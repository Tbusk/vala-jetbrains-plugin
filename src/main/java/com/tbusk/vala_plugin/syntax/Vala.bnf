{
    parserClass="com.tbusk.vala_plugin.ValaParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Vala"
    psiImplClassSuffix="Impl"
    psiPackage="com.tbusk.vala_plugin.psi"
    psiImplPackage="com.tbusk.vala_plugin.psi.impl"

    elementTypeHolderClass="com.tbusk.vala_plugin.psi.ValaTypes"
    elementTypeClass="com.tbusk.vala_plugin.psi.ValaElementType"
    tokenTypeClass="com.tbusk.vala_plugin.psi.ValaTokenType"

    tokens=[
        DOT='.'
        COMMA=','
        SEMICOLON=';'
        EQUALS="="
        LBRACE='{'
        RBRACE='}'
        COLON=':'
        LPAREN='('
        RPAREN=')'

        IDENTIFIER='regexp:[a-zA-Z_][a-zA-Z0-9_]*'
        WHITESPACE='regexp:\s+'
        STRING_LITERAL='regexp:\"([^"\\]|\\.)*\"'
        NUMBER='regexp:\d+'
        COMMENT='regexp://.*'
        DOC_COMMENT='regexp:/[^*]*\*+([^/*][^*]*\*+)*/'
    ]
}

Root ::= Definition*

Definition ::= Using | Namespace | VariableDefinition | COMMENT | ClassDeclaration | EnumDeclaration | FunctionDeclaration

VariableType ::= (
    char | uchar | unichar | int | uint | long | ulong | short | ushort | int8 | int16 | int32 | int64 | uint8 |
    uint16 | uint32 | uint64 | float | double | bool | string
)

// access modifiers
AccessModifier ::= public | private | protected

// class modifiers
ClassModifier ::= abstract? final? virtual?

// function return type
private FunctionReturnType ::= (VariableType | void | null)

// function modifiers
private FunctionModifier ::= static? virtual? async?

// variable declaration
private VariableDefinition ::= (VariableType | var) IDENTIFIER (SEMICOLON | (EQUALS (STRING_LITERAL | NUMBER) SEMICOLON))

// namespace declaration
private Namespace ::= namespace IDENTIFIER LBRACE Definition* RBRACE

// qualified name
private QualifiedName ::= IDENTIFIER (DOT IDENTIFIER)*

// using declaration
private Using ::= using QualifiedName SEMICOLON

// class declaration
private ClassDeclaration ::= AccessModifier? ClassModifier class IDENTIFIER LBRACE Definition* RBRACE

// enum declaration
private EnumDeclaration ::= AccessModifier? enum IDENTIFIER LBRACE EnumMember* RBRACE
private EnumMember ::= IDENTIFIER (COMMA IDENTIFIER)* SEMICOLON

// function declaration
private FunctionDeclaration ::= AccessModifier? FunctionModifier? FunctionReturnType IDENTIFIER LPAREN FunctionParameter* RPAREN LBRACE Definition* RBRACE
private FunctionParameter ::= VariableType IDENTIFIER (COMMA VariableType IDENTIFIER)*
