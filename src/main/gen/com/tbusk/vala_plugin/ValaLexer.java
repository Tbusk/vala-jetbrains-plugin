// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Vala.flex

package com.tbusk.vala_plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tbusk.vala_plugin.psi.ValaTypes;
import com.intellij.psi.TokenType;
import com.tbusk.vala_plugin.ValaTokenSets;
import com.tbusk.vala_plugin.psi.ValaTokenType;



import java.util.BitSet;

class ValaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\22\1\27\1\22\1\30\1\22"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\2\40"+
    "\1\41\4\40\1\42\4\40\1\43\1\40\1\44\13\40"+
    "\1\45\1\46\1\47\1\50\1\51\1\0\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\6\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\4\27\1\30\1\31\1\32\1\33\23\27\1\34"+
    "\1\35\1\36\1\37\4\0\1\40\2\0\1\41\2\0"+
    "\1\42\1\17\2\0\3\43\3\27\1\44\10\27\1\45"+
    "\7\27\1\46\1\47\1\50\33\27\5\0\32\27\1\51"+
    "\1\52\3\27\1\53\20\27\1\54\10\27\1\55\5\27"+
    "\4\0\1\56\1\57\1\0\6\27\1\60\1\61\1\27"+
    "\1\62\1\27\1\63\6\27\1\64\1\65\2\27\1\66"+
    "\10\27\1\67\1\27\1\70\1\71\1\27\1\72\15\27"+
    "\1\73\1\27\1\74\2\27\1\75\6\27\1\76\1\77"+
    "\2\27\1\56\1\0\1\100\3\0\1\101\4\27\1\102"+
    "\1\103\1\104\1\105\1\106\4\27\1\107\3\27\1\110"+
    "\1\111\1\27\1\112\1\113\1\114\3\27\1\115\5\27"+
    "\1\116\5\27\1\117\1\27\1\120\3\27\1\121\1\122"+
    "\3\27\1\123\1\27\1\124\1\125\1\100\1\27\1\126"+
    "\1\27\1\127\4\27\1\130\2\27\1\131\7\27\1\132"+
    "\1\27\1\133\1\134\1\135\1\136\1\137\1\140\1\141"+
    "\1\142\1\143\1\144\1\145\2\27\1\146\1\27\1\147"+
    "\3\27\1\150\1\27\1\151\1\27\1\152\4\27\1\153"+
    "\2\27\1\154\1\155\1\156\1\157\1\27\1\160\1\161"+
    "\2\27\1\162\1\27\1\163\1\27\1\164\1\165\1\27"+
    "\1\166\1\167\1\170\1\27\1\171";

  private static int [] zzUnpackAction() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\330\0\u0168\0\330"+
    "\0\330\0\330\0\u01b0\0\330\0\330\0\330\0\330\0\330"+
    "\0\330\0\330\0\u01f8\0\u0240\0\330\0\330\0\330\0\330"+
    "\0\330\0\330\0\330\0\u0288\0\u02d0\0\u0318\0\u0360\0\330"+
    "\0\330\0\330\0\u03a8\0\u03f0\0\u0438\0\u0480\0\u04c8\0\u0510"+
    "\0\u0558\0\u03a8\0\u05a0\0\u05e8\0\u0630\0\u0678\0\u06c0\0\u0708"+
    "\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8\0\330\0\330"+
    "\0\330\0\330\0\u0900\0\u0948\0\u0990\0\u0168\0\330\0\u09d8"+
    "\0\u01b0\0\330\0\u0a20\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\u0b88"+
    "\0\u0288\0\u0bd0\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80"+
    "\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0"+
    "\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u03a8"+
    "\0\u1200\0\u03a8\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0"+
    "\0\u13f8\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0"+
    "\0\u1638\0\u1680\0\u16c8\0\u1710\0\u1758\0\u17a0\0\u17e8\0\u1830"+
    "\0\u1878\0\u18c0\0\u1908\0\u1950\0\u1998\0\u19e0\0\u1a28\0\u1a70"+
    "\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0"+
    "\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0"+
    "\0\u1f38\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130"+
    "\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328\0\u2370"+
    "\0\u23b8\0\u03a8\0\u2400\0\u2448\0\u2490\0\u24d8\0\u2520\0\u2568"+
    "\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760\0\u27a8"+
    "\0\u27f0\0\u2838\0\u03a8\0\u2880\0\u28c8\0\u2910\0\u2958\0\u29a0"+
    "\0\u29e8\0\u2a30\0\u2a78\0\u03a8\0\u2ac0\0\u2b08\0\u2b50\0\u2b98"+
    "\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u2d48\0\330\0\u2d90"+
    "\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0\0\u2ef8\0\u2f40\0\u03a8\0\u03a8"+
    "\0\u2f88\0\u03a8\0\u2fd0\0\u03a8\0\u3018\0\u3060\0\u30a8\0\u30f0"+
    "\0\u3138\0\u3180\0\u03a8\0\u03a8\0\u31c8\0\u3210\0\u03a8\0\u3258"+
    "\0\u32a0\0\u32e8\0\u3330\0\u3378\0\u33c0\0\u3408\0\u3450\0\u03a8"+
    "\0\u3498\0\u03a8\0\u03a8\0\u34e0\0\u03a8\0\u3528\0\u3570\0\u35b8"+
    "\0\u3600\0\u3648\0\u3690\0\u36d8\0\u3720\0\u3768\0\u37b0\0\u37f8"+
    "\0\u3840\0\u3888\0\u03a8\0\u38d0\0\u03a8\0\u3918\0\u3960\0\u39a8"+
    "\0\u39f0\0\u3a38\0\u3a80\0\u3ac8\0\u3b10\0\u3b58\0\u03a8\0\u03a8"+
    "\0\u3ba0\0\u3be8\0\330\0\u3c30\0\u1a70\0\u2d48\0\u3c78\0\u3cc0"+
    "\0\u03a8\0\u3d08\0\u3d50\0\u3d98\0\u3de0\0\u03a8\0\u03a8\0\u03a8"+
    "\0\u03a8\0\u3e28\0\u3e70\0\u3eb8\0\u3f00\0\u3f48\0\u03a8\0\u3f90"+
    "\0\u3fd8\0\u4020\0\u03a8\0\u03a8\0\u4068\0\u03a8\0\u03a8\0\u03a8"+
    "\0\u40b0\0\u40f8\0\u4140\0\u03a8\0\u4188\0\u41d0\0\u4218\0\u4260"+
    "\0\u42a8\0\u03a8\0\u42f0\0\u4338\0\u4380\0\u43c8\0\u4410\0\u4458"+
    "\0\u44a0\0\u03a8\0\u44e8\0\u4530\0\u4578\0\u03a8\0\u03a8\0\u45c0"+
    "\0\u4608\0\u4650\0\u03a8\0\u4698\0\u03a8\0\u03a8\0\330\0\u46e0"+
    "\0\u03a8\0\u4728\0\u03a8\0\u4770\0\u47b8\0\u4800\0\u4848\0\u03a8"+
    "\0\u4890\0\u48d8\0\u03a8\0\u4920\0\u4968\0\u49b0\0\u49f8\0\u4a40"+
    "\0\u4a88\0\u4ad0\0\u03a8\0\u4b18\0\u03a8\0\u03a8\0\u03a8\0\u03a8"+
    "\0\u03a8\0\u03a8\0\u03a8\0\u03a8\0\u03a8\0\u03a8\0\u03a8\0\u4b60"+
    "\0\u4ba8\0\u03a8\0\u4bf0\0\u03a8\0\u4c38\0\u4c80\0\u4cc8\0\u03a8"+
    "\0\u4d10\0\u03a8\0\u4d58\0\u03a8\0\u4da0\0\u4de8\0\u4e30\0\u4e78"+
    "\0\u03a8\0\u4ec0\0\u4f08\0\u03a8\0\u03a8\0\u03a8\0\u03a8\0\u4f50"+
    "\0\u03a8\0\u03a8\0\u4f98\0\u4fe0\0\u03a8\0\u5028\0\u03a8\0\u5070"+
    "\0\u03a8\0\u03a8\0\u50b8\0\u03a8\0\u03a8\0\u03a8\0\u5100\0\u03a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\7\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\34\1\37\1\40\1\4"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\2\52\1\53\2\52\1\54\1\52\1\55\1\56"+
    "\1\57\1\52\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\52\1\66\1\52\1\67\1\70\1\71\1\72\40\0"+
    "\5\73\4\0\33\73\36\0\1\74\51\0\1\75\114\0"+
    "\2\5\105\0\5\76\1\77\40\76\1\100\41\76\11\101"+
    "\1\102\34\101\1\103\41\101\14\0\1\104\4\0\1\105"+
    "\106\0\1\106\1\0\7\24\60\0\1\107\10\0\1\110"+
    "\7\0\7\111\7\0\5\112\4\0\1\34\32\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\111\7\0\1\112\1\113"+
    "\3\112\4\0\1\34\32\52\5\0\1\107\10\0\1\110"+
    "\7\0\7\111\7\0\5\112\4\0\1\34\1\114\31\52"+
    "\5\0\1\107\10\0\1\110\7\0\7\111\7\0\5\112"+
    "\4\0\1\34\1\52\1\115\30\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\33\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\2\52\1\116\20\52\1\117\7\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\1\52\1\120"+
    "\15\52\1\121\2\52\1\122\10\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\1\52\1\123"+
    "\6\52\1\124\3\52\1\125\2\52\1\126\13\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\5\52\1\127\11\52\1\130\13\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\14\52\1\131"+
    "\1\52\1\132\3\52\1\133\5\52\1\134\2\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\1\52\1\135\12\52\1\136\2\52\1\137\13\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\6\52\1\140\7\52\1\141\4\52\1\142\7\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\17\52\1\143\13\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\1\52\1\144\3\52\1\145"+
    "\17\52\1\146\5\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\26\52\1\147\1\150\3\52"+
    "\5\0\1\107\10\0\1\110\7\0\7\52\7\0\5\52"+
    "\4\0\22\52\1\151\2\52\1\152\5\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\5\52"+
    "\1\153\25\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\10\52\1\154\1\155\12\52\1\156"+
    "\2\52\1\157\3\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\10\52\1\160\11\52\1\161"+
    "\6\52\1\162\1\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\3\52\1\163\5\52\1\164"+
    "\2\52\1\165\1\52\1\166\4\52\1\167\7\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\1\52\1\170\7\52\1\171\5\52\1\172\13\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\5\52\1\173\2\52\1\174\22\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\11\52\1\175"+
    "\21\52\26\0\7\73\7\0\5\73\4\0\33\73\5\0"+
    "\1\74\11\0\1\176\75\0\1\75\33\0\1\177\52\0"+
    "\2\76\2\0\104\76\2\101\2\0\104\101\14\200\1\201"+
    "\73\200\2\105\1\0\105\105\22\0\7\106\60\0\1\107"+
    "\10\0\1\110\75\0\13\110\1\202\74\110\1\0\1\107"+
    "\10\0\1\110\7\0\7\112\7\0\5\112\4\0\1\112"+
    "\32\52\5\0\1\107\10\0\1\110\7\0\7\112\7\0"+
    "\5\112\4\0\1\112\16\52\1\203\13\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\23\52"+
    "\1\204\7\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\12\52\1\205\20\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\23\52"+
    "\1\206\7\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\23\52\1\207\5\52\1\210\1\52"+
    "\5\0\1\107\10\0\1\110\7\0\7\52\7\0\5\52"+
    "\4\0\23\52\1\211\7\52\5\0\1\107\10\0\1\110"+
    "\7\0\7\52\7\0\5\52\4\0\17\52\1\212\13\52"+
    "\5\0\1\107\10\0\1\110\7\0\7\52\7\0\5\52"+
    "\4\0\5\52\1\213\25\52\5\0\1\107\10\0\1\110"+
    "\7\0\7\52\7\0\5\52\4\0\23\52\1\214\1\215"+
    "\6\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\1\52\1\216\31\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\1\52\1\217"+
    "\31\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\16\52\1\220\14\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\6\52\1\221"+
    "\5\52\1\222\16\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\25\52\1\223\5\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\11\52\1\224\11\52\1\225\7\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\4\52\1\226"+
    "\16\52\1\227\1\52\1\230\5\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\22\52\1\231"+
    "\10\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\24\52\1\232\6\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\14\52\1\233"+
    "\16\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\17\52\1\234\13\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\22\52\1\235"+
    "\10\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\24\52\1\236\6\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\3\52\1\237"+
    "\12\52\1\240\14\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\15\52\1\241\15\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\27\52\1\242\3\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\14\52\1\243\16\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\5\52\1\244\25\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\16\52\1\245\14\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\11\52\1\246\5\52\1\247\13\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\2\52\1\250"+
    "\30\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\21\52\1\251\2\52\1\252\6\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\17\52\1\253\13\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\7\52\1\254\23\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\1\52\1\255\20\52\1\256\10\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\11\52\1\257"+
    "\21\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\11\52\1\260\10\52\1\261\10\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\25\52\1\262\3\52\1\263\1\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\20\52\1\264"+
    "\12\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\10\52\1\265\22\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\16\52\1\266"+
    "\14\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\17\52\1\267\13\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\11\52\1\270"+
    "\5\52\1\271\13\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\10\52\1\272\1\273\21\52"+
    "\5\0\1\107\10\0\1\110\7\0\7\52\7\0\5\52"+
    "\4\0\22\52\1\274\10\52\5\0\1\107\10\0\1\110"+
    "\7\0\7\52\7\0\5\52\4\0\22\52\1\275\10\52"+
    "\5\0\1\107\10\0\1\110\7\0\7\52\7\0\5\52"+
    "\4\0\11\52\1\276\21\52\5\0\1\107\10\0\1\110"+
    "\7\0\7\52\7\0\5\52\4\0\1\52\1\277\31\52"+
    "\5\0\1\107\10\0\1\110\7\0\7\52\7\0\5\52"+
    "\4\0\11\52\1\300\21\52\5\0\1\107\10\0\1\110"+
    "\7\0\7\52\7\0\5\52\4\0\5\52\1\301\25\52"+
    "\4\0\12\176\1\302\1\0\74\176\34\0\1\74\53\0"+
    "\14\200\1\303\73\200\14\304\1\305\4\304\1\306\66\304"+
    "\1\0\1\202\30\0\1\307\1\0\1\310\54\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\4\52"+
    "\1\311\26\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\10\52\1\312\22\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\5\52"+
    "\1\313\25\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\24\52\1\314\6\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\5\52"+
    "\1\315\25\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\16\52\1\316\14\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\5\52"+
    "\1\317\25\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\14\52\1\320\16\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\1\52"+
    "\1\321\31\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\5\52\1\322\25\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\3\52"+
    "\1\323\27\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\22\52\1\324\10\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\23\52"+
    "\1\325\7\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\23\52\1\326\1\327\6\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\1\52\1\330\31\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\5\52\1\331\25\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\2\52\1\332\30\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\6\52\1\333\24\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\5\52\1\334\25\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\11\52\1\335\21\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\25\52\1\336\5\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\15\52\1\337\15\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\17\52\1\340\13\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\5\52\1\341\25\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\23\52\1\342\7\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\1\52\1\343\31\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\5\52\1\344\25\52\5\0\1\107\10\0\1\110\7\0"+
    "\1\52\1\345\1\52\1\346\1\52\1\347\1\350\7\0"+
    "\5\52\4\0\5\52\1\351\25\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\13\52\1\352"+
    "\17\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\7\52\1\353\23\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\5\52\1\354"+
    "\25\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\14\52\1\355\16\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\22\52\1\356"+
    "\10\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\5\52\1\357\25\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\26\52\1\360"+
    "\4\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\24\52\1\361\6\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\14\52\1\362"+
    "\16\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\25\52\1\363\5\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\25\52\1\364"+
    "\5\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\22\52\1\365\10\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\16\52\1\366"+
    "\14\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\24\52\1\367\6\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\11\52\1\370"+
    "\13\52\1\371\5\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\24\52\1\372\6\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\23\52\1\373\7\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\17\52\1\374\13\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\5\52\1\375\25\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\5\52\1\376\25\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\1\52\1\377\31\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\24\52\1\u0100\6\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\16\52\1\u0101\14\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\3\52\1\u0102\27\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\27\52\1\u0103\3\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\17\52\1\u0104\13\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\16\52\1\u0105\14\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\24\52\1\u0106\6\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\4\52\1\u0107\26\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\13\52\1\u0108\17\52\5\0"+
    "\1\107\10\0\1\110\7\0\7\52\7\0\5\52\4\0"+
    "\14\52\1\u0109\16\52\5\0\1\107\10\0\1\110\7\0"+
    "\7\52\7\0\5\52\4\0\14\52\1\u010a\16\52\4\0"+
    "\1\176\1\302\10\176\1\302\1\0\74\176\21\200\1\u010b"+
    "\66\200\14\304\1\u010c\107\304\1\u010c\4\304\1\u010d\66\304"+
    "\14\u010e\1\u010f\73\u010e\35\0\1\u0110\53\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\5\52\1\u0111"+
    "\25\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\3\52\1\u0112\1\52\4\0\33\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\3\52\1\u0113"+
    "\27\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\22\52\1\u0114\10\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\22\52\1\u0115"+
    "\10\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\3\52\1\u0116\27\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\13\52\1\u0117"+
    "\17\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\10\52\1\u0118\22\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\23\52\1\u0119"+
    "\7\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\24\52\1\u011a\6\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\11\52\1\u011b"+
    "\21\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\25\52\1\u011c\5\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\7\52\1\u011d"+
    "\23\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\14\52\1\u011e\16\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\6\52\1\u011f"+
    "\24\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\22\52\1\u0120\10\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\22\52\1\u0121"+
    "\10\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\22\52\1\u0122\10\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\5\52\1\u0123"+
    "\25\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\24\52\1\u0124\6\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\1\52\1\u0125"+
    "\31\52\5\0\1\107\10\0\1\110\7\0\5\52\1\u0126"+
    "\1\52\7\0\5\52\4\0\33\52\5\0\1\107\10\0"+
    "\1\110\7\0\2\52\1\u0127\4\52\7\0\5\52\4\0"+
    "\33\52\5\0\1\107\10\0\1\110\7\0\4\52\1\u0128"+
    "\2\52\7\0\5\52\4\0\33\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\22\52\1\u0129"+
    "\10\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\23\52\1\u012a\7\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\22\52\1\u012b"+
    "\10\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\4\52\1\u012c\26\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\1\52\1\u012d"+
    "\31\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\5\52\1\u012e\25\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\11\52\1\u012f"+
    "\21\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\11\52\1\u0130\21\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\22\52\1\u0131"+
    "\10\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\24\52\1\u0132\6\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\1\52\1\u0133"+
    "\31\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\11\52\1\u0134\21\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\16\52\1\u0135"+
    "\14\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\3\52\1\u0136\27\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\3\52\1\u0137"+
    "\27\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\27\52\1\u0138\3\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\17\52\1\u0139"+
    "\13\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\22\52\1\u013a\10\52\5\0\1\107\10\0"+
    "\1\110\7\0\1\52\1\u013b\1\52\1\u013c\1\52\1\u013d"+
    "\1\u013e\7\0\5\52\4\0\33\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\7\52\1\u013f"+
    "\23\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\10\52\1\u0140\22\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\16\52\1\u0141"+
    "\14\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\22\52\1\u0142\10\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\7\52\1\u0143"+
    "\23\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\25\52\1\u0144\5\52\5\0\1\107\10\0"+
    "\1\110\7\0\7\52\7\0\5\52\4\0\5\52\1\u0145"+
    "\25\52\5\0\1\107\10\0\1\110\7\0\7\52\7\0"+
    "\5\52\4\0\4\52\1\u0146\26\52\4\0\14\304\1\305"+
    "\4\304\1\u0147\66\304\14\u010e\1\u010f\4\u010e\1\u0147\66\u010e"+
    "\1\0\1\u0110\102\0\1\307\4\0\1\107\10\0\1\110"+
    "\7\0\7\52\7\0\5\52\4\0\1\52\1\u0148\31\52"+
    "\5\0\1\107\10\0\1\110\7\0\7\52\7\0\5\52"+
    "\4\0\24\52\1\u0149\6\52\5\0\1\107\10\0\1\110"+
    "\7\0\7\52\7\0\5\52\4\0\1\52\1\u014a\31\52"+
    "\5\0\1\107\10\0\1\110\7\0\7\52\7\0\5\52"+
    "\4\0\24\52\1\u014b\6\52\5\0\1\107\10\0\1\110"+
    "\7\0\7\52\7\0\5\52\4\0\22\52\1\u014c\10\52"+
    "\5\0\1\107\10\0\1\110\7\0\7\52\7\0\5\52"+
    "\4\0\16\52\1\u014d\14\52\5\0\1\107\10\0\1\110"+
    "\7\0\7\52\7\0\5\52\4\0\14\52\1\u014e\16\52"+
    "\5\0\1\107\10\0\1\110\7\0\7\52\7\0\5\52"+
    "\4\0\1\52\1\u014f\31\52\5\0\1\107\10\0\1\110"+
    "\7\0\7\52\7\0\5\52\4\0\5\52\1\u0150\25\52"+
    "\5\0\1\107\10\0\1\110\7\0\7\52\7\0\5\52"+
    "\4\0\5\52\1\u0151\25\52\5\0\1\107\10\0\1\110"+
    "\7\0\7\52\7\0\5\52\4\0\4\52\1\u0152\26\52"+
    "\5\0\1\107\10\0\1\110\7\0\7\52\7\0\5\52"+
    "\4\0\16\52\1\u0153\14\52\5\0\1\107\10\0\1\110"+
    "\7\0\7\52\7\0\5\52\4\0\3\52\1\u0154\27\52"+
    "\5\0\1\107\10\0\1\110\7\0\7\52\7\0\5\52"+
    "\4\0\6\52\1\u0155\7\52\1\u0156\14\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\20\52"+
    "\1\u0157\12\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\11\52\1\u0158\21\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\24\52"+
    "\1\u0159\6\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\3\52\1\u015a\27\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\3\52"+
    "\1\u015b\27\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\22\52\1\u015c\10\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\16\52"+
    "\1\u015d\14\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\14\52\1\u015e\16\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\3\52"+
    "\1\u015f\27\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\7\52\1\u0160\23\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\24\52"+
    "\1\u0161\6\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\10\52\1\u0162\22\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\23\52"+
    "\1\u0163\7\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\6\52\1\u0164\24\52\5\0\1\107"+
    "\10\0\1\110\7\0\5\52\1\u0165\1\52\7\0\5\52"+
    "\4\0\33\52\5\0\1\107\10\0\1\110\7\0\2\52"+
    "\1\u0166\4\52\7\0\5\52\4\0\33\52\5\0\1\107"+
    "\10\0\1\110\7\0\4\52\1\u0167\2\52\7\0\5\52"+
    "\4\0\33\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\1\52\1\u0168\31\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\5\52"+
    "\1\u0169\25\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\24\52\1\u016a\6\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\1\52"+
    "\1\u016b\31\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\20\52\1\u016c\12\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\3\52"+
    "\1\u016d\27\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\25\52\1\u016e\5\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\25\52"+
    "\1\u016f\5\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\24\52\1\u0170\6\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\24\52"+
    "\1\u0171\6\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\23\52\1\u0172\7\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\17\52"+
    "\1\u0173\13\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\10\52\1\u0174\22\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\1\52"+
    "\1\u0175\31\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\1\52\1\u0176\31\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\1\52"+
    "\1\u0177\31\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\4\52\1\u0178\26\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\5\52"+
    "\1\u0179\25\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\24\52\1\u017a\6\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\5\52"+
    "\1\u017b\25\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\22\52\1\u017c\10\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\4\52"+
    "\1\u017d\26\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\14\52\1\u017e\16\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\24\52"+
    "\1\u017f\6\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\3\52\1\u0180\27\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\5\52"+
    "\1\u0181\25\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\5\52\1\u0182\25\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\15\52"+
    "\1\u0183\15\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\3\52\1\u0184\27\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\14\52"+
    "\1\u0185\16\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\3\52\1\u0186\27\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\5\52"+
    "\1\u0187\25\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\5\52\1\u0188\25\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\23\52"+
    "\1\u0189\7\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\24\52\1\u018a\6\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\1\52"+
    "\1\u018b\31\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\5\52\1\u018c\25\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\5\52"+
    "\1\u018d\25\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\4\52\1\u018e\26\52\5\0\1\107"+
    "\10\0\1\110\7\0\7\52\7\0\5\52\4\0\11\52"+
    "\1\u018f\21\52\5\0\1\107\10\0\1\110\7\0\7\52"+
    "\7\0\5\52\4\0\16\52\1\u0190\14\52\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[20808];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\3\11\1\1\7\11"+
    "\2\1\7\11\4\1\3\11\24\1\4\11\1\1\3\0"+
    "\1\11\2\0\1\11\2\0\2\1\2\0\65\1\5\0"+
    "\100\1\3\0\1\1\1\11\1\0\102\1\1\11\1\0"+
    "\1\1\3\0\66\1\1\11\111\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private BitSet zzFin = null;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ValaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 122: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 123: break;
          case 3:
            { return ValaTypes.EXCLAMATION;
            }
          // fall through
          case 124: break;
          case 4:
            { return ValaTypes.POUND;
            }
          // fall through
          case 125: break;
          case 5:
            { return ValaTypes.PERCENT;
            }
          // fall through
          case 126: break;
          case 6:
            { return ValaTypes.AND;
            }
          // fall through
          case 127: break;
          case 7:
            { return ValaTypes.LPAREN;
            }
          // fall through
          case 128: break;
          case 8:
            { return ValaTypes.RPAREN;
            }
          // fall through
          case 129: break;
          case 9:
            { return ValaTypes.STAR;
            }
          // fall through
          case 130: break;
          case 10:
            { return ValaTypes.PLUS;
            }
          // fall through
          case 131: break;
          case 11:
            { return ValaTypes.COMMA;
            }
          // fall through
          case 132: break;
          case 12:
            { return ValaTypes.MINUS;
            }
          // fall through
          case 133: break;
          case 13:
            { return ValaTypes.DOT;
            }
          // fall through
          case 134: break;
          case 14:
            { return ValaTypes.FORWARD_SLASH;
            }
          // fall through
          case 135: break;
          case 15:
            { return ValaTypes.NUMBER;
            }
          // fall through
          case 136: break;
          case 16:
            { return ValaTypes.COLON;
            }
          // fall through
          case 137: break;
          case 17:
            { return ValaTypes.SEMICOLON;
            }
          // fall through
          case 138: break;
          case 18:
            { return ValaTypes.LESS_THAN;
            }
          // fall through
          case 139: break;
          case 19:
            { return ValaTypes.EQUALS;
            }
          // fall through
          case 140: break;
          case 20:
            { return ValaTypes.GREATER_THAN;
            }
          // fall through
          case 141: break;
          case 21:
            { return ValaTypes.QUESTION_MARK;
            }
          // fall through
          case 142: break;
          case 22:
            { return ValaTypes.AT;
            }
          // fall through
          case 143: break;
          case 23:
            { return ValaTypes.IDENTIFIER;
            }
          // fall through
          case 144: break;
          case 24:
            { return ValaTypes.LBRACKET;
            }
          // fall through
          case 145: break;
          case 25:
            { return ValaTypes.RBRACKET;
            }
          // fall through
          case 146: break;
          case 26:
            { return ValaTypes.CARET;
            }
          // fall through
          case 147: break;
          case 27:
            { return ValaTypes.UNDERSCORE;
            }
          // fall through
          case 148: break;
          case 28:
            { return ValaTypes.LBRACE;
            }
          // fall through
          case 149: break;
          case 29:
            { return ValaTypes.PIPE;
            }
          // fall through
          case 150: break;
          case 30:
            { return ValaTypes.RBRACE;
            }
          // fall through
          case 151: break;
          case 31:
            { return ValaTypes.TILDE;
            }
          // fall through
          case 152: break;
          case 32:
            { return ValaTypes.STRING_LITERAL;
            }
          // fall through
          case 153: break;
          case 33:
            { return ValaTypes.CHAR_LITERAL;
            }
          // fall through
          case 154: break;
          case 34:
            { return ValaTypes.COMMENT;
            }
          // fall through
          case 155: break;
          case 35:
            { return ValaTypes.CONSTANT;
            }
          // fall through
          case 156: break;
          case 36:
            { return ValaTypes.AS;
            }
          // fall through
          case 157: break;
          case 37:
            { return ValaTypes.DO;
            }
          // fall through
          case 158: break;
          case 38:
            { return ValaTypes.IF;
            }
          // fall through
          case 159: break;
          case 39:
            { return ValaTypes.IN;
            }
          // fall through
          case 160: break;
          case 40:
            { return ValaTypes.IS;
            }
          // fall through
          case 161: break;
          case 41:
            { return ValaTypes.FOR;
            }
          // fall through
          case 162: break;
          case 42:
            { return ValaTypes.INT;
            }
          // fall through
          case 163: break;
          case 43:
            { return ValaTypes.NEW;
            }
          // fall through
          case 164: break;
          case 44:
            { return ValaTypes.TRY;
            }
          // fall through
          case 165: break;
          case 45:
            { return ValaTypes.VAR;
            }
          // fall through
          case 166: break;
          case 46:
            { return ValaTypes.BLOCK_COMMENT;
            }
          // fall through
          case 167: break;
          case 47:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 1;
              int zzFPos = zzStartRead;
              if (zzFin == null || zzFin.size() <= zzBufferL.length()) {
                zzFin = new BitSet(zzBufferL.length()+1);
              }
              BitSet zzFinL = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL.set(zzFPos, ((zzAttrL[zzFState] & 1) == 1));
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL.set(zzFPos++, ((zzAttrL[zzFState] & 1) == 1));
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL.clear(zzFPos++);
              }

              zzFState = 2;
              zzFPos = zzMarkedPos;
              while (!zzFinL.get(zzFPos) || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { String text = yytext().toString();

              if(!ValaTokenSets.KEYWORDS_STRINGS.contains(text)) {
                  return ValaTypes.METHOD_CALL;
              }
            }
          // fall through
          case 168: break;
          case 48:
            { return ValaTypes.BASE;
            }
          // fall through
          case 169: break;
          case 49:
            { return ValaTypes.BOOL;
            }
          // fall through
          case 170: break;
          case 50:
            { return ValaTypes.CASE;
            }
          // fall through
          case 171: break;
          case 51:
            { return ValaTypes.CHAR;
            }
          // fall through
          case 172: break;
          case 52:
            { return ValaTypes.ELIF;
            }
          // fall through
          case 173: break;
          case 53:
            { return ValaTypes.ELSE;
            }
          // fall through
          case 174: break;
          case 54:
            { return ValaTypes.ENUM;
            }
          // fall through
          case 175: break;
          case 55:
            { return ValaTypes.INT8;
            }
          // fall through
          case 176: break;
          case 56:
            { return ValaTypes.LOCK;
            }
          // fall through
          case 177: break;
          case 57:
            { return ValaTypes.LONG;
            }
          // fall through
          case 178: break;
          case 58:
            { return ValaTypes.NULL;
            }
          // fall through
          case 179: break;
          case 59:
            { return ValaTypes.THIS;
            }
          // fall through
          case 180: break;
          case 60:
            { return ValaTypes.TRUE;
            }
          // fall through
          case 181: break;
          case 61:
            { return ValaTypes.UINT;
            }
          // fall through
          case 182: break;
          case 62:
            { return ValaTypes.VOID;
            }
          // fall through
          case 183: break;
          case 63:
            { return ValaTypes.WEAK;
            }
          // fall through
          case 184: break;
          case 64:
            { return ValaTypes.DOC_COMMENT;
            }
          // fall through
          case 185: break;
          case 65:
            { return ValaTypes.CCODE;
            }
          // fall through
          case 186: break;
          case 66:
            { return ValaTypes.ASYNC;
            }
          // fall through
          case 187: break;
          case 67:
            { return ValaTypes.BREAK;
            }
          // fall through
          case 188: break;
          case 68:
            { return ValaTypes.CATCH;
            }
          // fall through
          case 189: break;
          case 69:
            { return ValaTypes.CLASS;
            }
          // fall through
          case 190: break;
          case 70:
            { return ValaTypes.CONST;
            }
          // fall through
          case 191: break;
          case 71:
            { return ValaTypes.ENDIF;
            }
          // fall through
          case 192: break;
          case 72:
            { return ValaTypes.FALSE;
            }
          // fall through
          case 193: break;
          case 73:
            { return ValaTypes.FLOAT;
            }
          // fall through
          case 194: break;
          case 74:
            { return ValaTypes.INT16;
            }
          // fall through
          case 195: break;
          case 75:
            { return ValaTypes.INT32;
            }
          // fall through
          case 196: break;
          case 76:
            { return ValaTypes.INT64;
            }
          // fall through
          case 197: break;
          case 77:
            { return ValaTypes.OWNED;
            }
          // fall through
          case 198: break;
          case 78:
            { return ValaTypes.SHORT;
            }
          // fall through
          case 199: break;
          case 79:
            { return ValaTypes.THROW;
            }
          // fall through
          case 200: break;
          case 80:
            { return ValaTypes.UCHAR;
            }
          // fall through
          case 201: break;
          case 81:
            { return ValaTypes.UINT8;
            }
          // fall through
          case 202: break;
          case 82:
            { return ValaTypes.ULONG;
            }
          // fall through
          case 203: break;
          case 83:
            { return ValaTypes.USING;
            }
          // fall through
          case 204: break;
          case 84:
            { return ValaTypes.WHILE;
            }
          // fall through
          case 205: break;
          case 85:
            { return ValaTypes.YIELD;
            }
          // fall through
          case 206: break;
          case 86:
            { return ValaTypes.OBJECT;
            }
          // fall through
          case 207: break;
          case 87:
            { return ValaTypes.ASSERT;
            }
          // fall through
          case 208: break;
          case 88:
            { return ValaTypes.DOUBLE;
            }
          // fall through
          case 209: break;
          case 89:
            { return ValaTypes.EXTERN;
            }
          // fall through
          case 210: break;
          case 90:
            { return ValaTypes.PUBLIC;
            }
          // fall through
          case 211: break;
          case 91:
            { return ValaTypes.RETURN;
            }
          // fall through
          case 212: break;
          case 92:
            { return ValaTypes.SIGNAL;
            }
          // fall through
          case 213: break;
          case 93:
            { return ValaTypes.STATIC;
            }
          // fall through
          case 214: break;
          case 94:
            { return ValaTypes.STRING;
            }
          // fall through
          case 215: break;
          case 95:
            { return ValaTypes.STRUCT;
            }
          // fall through
          case 216: break;
          case 96:
            { return ValaTypes.SWITCH;
            }
          // fall through
          case 217: break;
          case 97:
            { return ValaTypes.THROWS;
            }
          // fall through
          case 218: break;
          case 98:
            { return ValaTypes.TYPEOF;
            }
          // fall through
          case 219: break;
          case 99:
            { return ValaTypes.UINT16;
            }
          // fall through
          case 220: break;
          case 100:
            { return ValaTypes.UINT32;
            }
          // fall through
          case 221: break;
          case 101:
            { return ValaTypes.UINT64;
            }
          // fall through
          case 222: break;
          case 102:
            { return ValaTypes.USHORT;
            }
          // fall through
          case 223: break;
          case 103:
            { return ValaTypes.HASHMAP;
            }
          // fall through
          case 224: break;
          case 104:
            { return ValaTypes.DEFAULT;
            }
          // fall through
          case 225: break;
          case 105:
            { return ValaTypes.ENSURES;
            }
          // fall through
          case 226: break;
          case 106:
            { return ValaTypes.FOREACH;
            }
          // fall through
          case 227: break;
          case 107:
            { return ValaTypes.PRIVATE;
            }
          // fall through
          case 228: break;
          case 108:
            { return ValaTypes.UNICHAR;
            }
          // fall through
          case 229: break;
          case 109:
            { return ValaTypes.UNOWNED;
            }
          // fall through
          case 230: break;
          case 110:
            { return ValaTypes.VIRTUAL;
            }
          // fall through
          case 231: break;
          case 111:
            { return ValaTypes.ABSTRACT;
            }
          // fall through
          case 232: break;
          case 112:
            { return ValaTypes.CONTINUE;
            }
          // fall through
          case 233: break;
          case 113:
            { return ValaTypes.DELEGATE;
            }
          // fall through
          case 234: break;
          case 114:
            { return ValaTypes.INTERNAL;
            }
          // fall through
          case 235: break;
          case 115:
            { return ValaTypes.OVERRIDE;
            }
          // fall through
          case 236: break;
          case 116:
            { return ValaTypes.REQUIRES;
            }
          // fall through
          case 237: break;
          case 117:
            { return ValaTypes.CONSTRUCT;
            }
          // fall through
          case 238: break;
          case 118:
            { return ValaTypes.INTERFACE;
            }
          // fall through
          case 239: break;
          case 119:
            { return ValaTypes.NAMESPACE;
            }
          // fall through
          case 240: break;
          case 120:
            { return ValaTypes.PROTECTED;
            }
          // fall through
          case 241: break;
          case 121:
            { return ValaTypes.ERRORDOMAIN;
            }
          // fall through
          case 242: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
