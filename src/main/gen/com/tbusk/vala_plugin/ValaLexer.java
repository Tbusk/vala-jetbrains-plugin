// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Vala.flex

package com.tbusk.vala_plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tbusk.vala_plugin.psi.ValaTypes;
import com.intellij.psi.TokenType;


class ValaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\0"+
    "\1\4\5\0\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\15"+
    "\1\22\1\15\1\23\1\15\1\0\1\24\1\25\1\26"+
    "\1\27\2\0\32\30\1\31\1\32\1\33\1\0\1\34"+
    "\1\0\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\2\30\1\46\1\47\1\50\1\51\1\52"+
    "\1\30\1\53\1\54\1\55\1\56\1\57\1\60\1\30"+
    "\1\61\1\30\1\62\1\0\1\63\7\0\1\3\u01a2\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\20\20\1\23\1\24\1\0"+
    "\1\25\2\0\1\26\1\13\16\20\1\27\1\30\22\20"+
    "\2\0\16\20\1\30\1\31\14\20\1\32\7\20\1\33"+
    "\2\20\3\0\1\34\1\20\1\35\1\20\1\36\4\20"+
    "\1\27\1\20\1\37\7\20\1\40\1\20\1\41\1\20"+
    "\1\42\10\20\1\43\1\20\1\44\6\20\1\45\1\34"+
    "\1\46\1\20\1\47\1\50\2\20\1\51\1\20\1\52"+
    "\1\20\1\53\1\54\1\55\7\20\1\56\2\20\1\57"+
    "\3\20\1\60\1\61\3\20\1\62\3\20\1\63\10\20"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\2\20"+
    "\1\73\3\20\1\30\4\20\1\74\1\20\1\75\1\76"+
    "\1\77\1\100\1\101\1\20\1\102\1\20\1\103\1\20"+
    "\1\104\1\105\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[243];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\64\0\64\0\64\0\64"+
    "\0\64\0\64\0\64\0\320\0\u0104\0\64\0\64\0\64"+
    "\0\64\0\u0138\0\64\0\64\0\u016c\0\u01a0\0\u01d4\0\u0208"+
    "\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8"+
    "\0\u03dc\0\u0410\0\u0444\0\u0478\0\64\0\64\0\234\0\64"+
    "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618"+
    "\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8"+
    "\0\u07ec\0\u0820\0\u0138\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924"+
    "\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4"+
    "\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64"+
    "\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04"+
    "\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4"+
    "\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144"+
    "\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u0138\0\u1248\0\u127c\0\u12b0"+
    "\0\u12e4\0\u1318\0\u134c\0\u1380\0\u0138\0\u13b4\0\u13e8\0\u141c"+
    "\0\u1450\0\u1484\0\u1450\0\u14b8\0\u0138\0\u14ec\0\u0138\0\u1520"+
    "\0\u1554\0\u1588\0\u15bc\0\u0e6c\0\u15f0\0\u0138\0\u1624\0\u1658"+
    "\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u0138\0\u1790\0\u0138"+
    "\0\u17c4\0\u0138\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc"+
    "\0\u1930\0\u1964\0\u0138\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68"+
    "\0\u1a9c\0\u1ad0\0\u1b04\0\u0138\0\64\0\64\0\u1b38\0\u0138"+
    "\0\u0138\0\u1b6c\0\u1ba0\0\u0138\0\u1bd4\0\u0138\0\u1c08\0\u0138"+
    "\0\u0138\0\u0138\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40"+
    "\0\u1d74\0\u0138\0\u1da8\0\u1ddc\0\u0138\0\u1e10\0\u1e44\0\u1e78"+
    "\0\u0138\0\u0138\0\u1eac\0\u1ee0\0\u1f14\0\u0138\0\u1f48\0\u1f7c"+
    "\0\u1fb0\0\u0138\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8"+
    "\0\u211c\0\u2150\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138"+
    "\0\u0138\0\u2184\0\u21b8\0\u0138\0\u21ec\0\u2220\0\u2254\0\u0138"+
    "\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u0138\0\u2358\0\u0138\0\u0138"+
    "\0\u0138\0\u0138\0\u0138\0\u238c\0\u0138\0\u23c0\0\u0138\0\u23f4"+
    "\0\u0138\0\u0138\0\u0138";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[243];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\7\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\2\1\24\1\2\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\2\22\1\33\1\34\1\22"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\2\22\1\45\1\46\65\0\2\3\61\0\4\47\1\50"+
    "\25\47\1\51\31\47\7\0\1\52\4\0\1\53\62\0"+
    "\1\54\1\0\7\15\55\0\7\22\4\0\1\22\3\0"+
    "\26\22\17\0\7\22\4\0\1\22\3\0\2\22\1\55"+
    "\23\22\17\0\7\22\4\0\1\22\3\0\15\22\1\56"+
    "\10\22\17\0\7\22\4\0\1\22\3\0\1\22\1\57"+
    "\6\22\1\60\1\22\1\61\2\22\1\62\1\22\1\63"+
    "\6\22\17\0\7\22\4\0\1\22\3\0\15\22\1\64"+
    "\10\22\17\0\7\22\4\0\1\22\3\0\12\22\1\65"+
    "\1\22\1\66\11\22\17\0\7\22\4\0\1\22\3\0"+
    "\1\22\1\67\7\22\1\70\1\71\2\22\1\72\10\22"+
    "\17\0\7\22\4\0\1\22\3\0\6\22\1\73\5\22"+
    "\1\74\11\22\17\0\7\22\4\0\1\22\3\0\15\22"+
    "\1\75\10\22\17\0\7\22\4\0\1\22\3\0\1\22"+
    "\1\76\20\22\1\77\3\22\17\0\7\22\4\0\1\22"+
    "\3\0\23\22\1\100\2\22\17\0\7\22\4\0\1\22"+
    "\3\0\17\22\1\101\2\22\1\102\3\22\17\0\7\22"+
    "\4\0\1\22\3\0\5\22\1\103\20\22\17\0\7\22"+
    "\4\0\1\22\3\0\10\22\1\104\10\22\1\105\4\22"+
    "\17\0\7\22\4\0\1\22\3\0\17\22\1\106\6\22"+
    "\17\0\7\22\4\0\1\22\3\0\3\22\1\107\5\22"+
    "\1\110\1\111\1\22\1\112\3\22\1\113\5\22\17\0"+
    "\7\22\4\0\1\22\3\0\1\22\1\114\7\22\1\115"+
    "\3\22\1\116\10\22\2\0\2\47\2\0\60\47\7\117"+
    "\1\120\54\117\2\53\1\0\61\53\15\0\7\54\55\0"+
    "\7\22\4\0\1\22\3\0\20\22\1\121\5\22\17\0"+
    "\7\22\4\0\1\22\3\0\15\22\1\122\10\22\17\0"+
    "\7\22\4\0\1\22\3\0\21\22\1\123\4\22\17\0"+
    "\7\22\4\0\1\22\3\0\1\22\1\124\24\22\17\0"+
    "\7\22\4\0\1\22\3\0\1\22\1\125\24\22\17\0"+
    "\7\22\4\0\1\22\3\0\14\22\1\126\11\22\17\0"+
    "\7\22\4\0\1\22\3\0\11\22\1\127\14\22\17\0"+
    "\7\22\4\0\1\22\3\0\22\22\1\130\3\22\17\0"+
    "\7\22\4\0\1\22\3\0\20\22\1\131\5\22\17\0"+
    "\7\22\4\0\1\22\3\0\4\22\1\132\15\22\1\133"+
    "\3\22\17\0\7\22\4\0\1\22\3\0\12\22\1\134"+
    "\13\22\17\0\7\22\4\0\1\22\3\0\14\22\1\135"+
    "\11\22\17\0\7\22\4\0\1\22\3\0\15\22\1\136"+
    "\10\22\17\0\7\22\4\0\1\22\3\0\17\22\1\137"+
    "\6\22\17\0\7\22\4\0\1\22\3\0\21\22\1\140"+
    "\4\22\17\0\7\22\4\0\1\22\3\0\14\22\1\141"+
    "\11\22\17\0\7\22\4\0\1\22\3\0\13\22\1\142"+
    "\12\22\17\0\7\22\4\0\1\22\3\0\12\22\1\143"+
    "\13\22\17\0\7\22\4\0\1\22\3\0\5\22\1\144"+
    "\20\22\17\0\7\22\4\0\1\22\3\0\11\22\1\145"+
    "\3\22\1\146\10\22\17\0\7\22\4\0\1\22\3\0"+
    "\2\22\1\147\23\22\17\0\7\22\4\0\1\22\3\0"+
    "\21\22\1\150\4\22\17\0\7\22\4\0\1\22\3\0"+
    "\15\22\1\151\10\22\17\0\7\22\4\0\1\22\3\0"+
    "\1\22\1\152\15\22\1\153\6\22\17\0\7\22\4\0"+
    "\1\22\3\0\22\22\1\154\2\22\1\155\17\0\7\22"+
    "\4\0\1\22\3\0\10\22\1\156\15\22\17\0\7\22"+
    "\4\0\1\22\3\0\14\22\1\157\11\22\17\0\7\22"+
    "\4\0\1\22\3\0\15\22\1\160\10\22\17\0\7\22"+
    "\4\0\1\22\3\0\11\22\1\161\3\22\1\162\10\22"+
    "\17\0\7\22\4\0\1\22\3\0\10\22\1\163\1\164"+
    "\14\22\17\0\7\22\4\0\1\22\3\0\17\22\1\165"+
    "\6\22\17\0\7\22\4\0\1\22\3\0\17\22\1\166"+
    "\6\22\17\0\7\22\4\0\1\22\3\0\11\22\1\167"+
    "\14\22\2\0\7\117\1\170\54\117\7\171\1\172\4\171"+
    "\1\173\47\171\15\0\7\22\4\0\1\22\3\0\21\22"+
    "\1\174\4\22\17\0\7\22\4\0\1\22\3\0\12\22"+
    "\1\175\13\22\17\0\7\22\4\0\1\22\3\0\3\22"+
    "\1\176\22\22\17\0\7\22\4\0\1\22\3\0\17\22"+
    "\1\177\6\22\17\0\7\22\4\0\1\22\3\0\20\22"+
    "\1\200\5\22\17\0\7\22\4\0\1\22\3\0\20\22"+
    "\1\201\5\22\17\0\7\22\4\0\1\22\3\0\21\22"+
    "\1\202\4\22\17\0\7\22\4\0\1\22\3\0\2\22"+
    "\1\203\23\22\17\0\7\22\4\0\1\22\3\0\5\22"+
    "\1\204\20\22\17\0\7\22\4\0\1\22\3\0\11\22"+
    "\1\205\14\22\17\0\7\22\4\0\1\22\3\0\13\22"+
    "\1\206\12\22\17\0\7\22\4\0\1\22\3\0\20\22"+
    "\1\207\5\22\17\0\7\22\4\0\1\22\3\0\1\22"+
    "\1\210\24\22\17\0\7\22\4\0\1\22\3\0\1\22"+
    "\1\211\24\22\17\0\7\22\4\0\1\22\3\0\5\22"+
    "\1\212\20\22\17\0\1\22\1\213\1\22\1\214\1\22"+
    "\1\215\1\216\4\0\1\22\3\0\5\22\1\217\20\22"+
    "\17\0\7\22\4\0\1\22\3\0\7\22\1\220\16\22"+
    "\17\0\7\22\4\0\1\22\3\0\5\22\1\221\20\22"+
    "\17\0\7\22\4\0\1\22\3\0\12\22\1\222\13\22"+
    "\17\0\7\22\4\0\1\22\3\0\17\22\1\223\6\22"+
    "\17\0\7\22\4\0\1\22\3\0\23\22\1\224\2\22"+
    "\17\0\7\22\4\0\1\22\3\0\21\22\1\225\4\22"+
    "\17\0\7\22\4\0\1\22\3\0\12\22\1\226\13\22"+
    "\17\0\7\22\4\0\1\22\3\0\22\22\1\227\3\22"+
    "\17\0\7\22\4\0\1\22\3\0\17\22\1\230\6\22"+
    "\17\0\7\22\4\0\1\22\3\0\21\22\1\231\4\22"+
    "\17\0\7\22\4\0\1\22\3\0\22\22\1\232\3\22"+
    "\17\0\7\22\4\0\1\22\3\0\5\22\1\233\20\22"+
    "\17\0\7\22\4\0\1\22\3\0\1\22\1\234\24\22"+
    "\17\0\7\22\4\0\1\22\3\0\21\22\1\235\4\22"+
    "\17\0\7\22\4\0\1\22\3\0\14\22\1\236\11\22"+
    "\17\0\7\22\4\0\1\22\3\0\3\22\1\237\22\22"+
    "\17\0\7\22\4\0\1\22\3\0\24\22\1\240\1\22"+
    "\17\0\7\22\4\0\1\22\3\0\15\22\1\241\10\22"+
    "\17\0\7\22\4\0\1\22\3\0\14\22\1\242\11\22"+
    "\17\0\7\22\4\0\1\22\3\0\21\22\1\243\4\22"+
    "\17\0\7\22\4\0\1\22\3\0\4\22\1\244\21\22"+
    "\2\0\7\117\1\170\4\117\1\245\47\117\7\171\1\172"+
    "\63\171\1\172\4\171\1\246\47\171\15\0\7\22\4\0"+
    "\1\22\3\0\17\22\1\247\6\22\17\0\7\22\4\0"+
    "\1\22\3\0\10\22\1\155\15\22\17\0\7\22\4\0"+
    "\1\22\3\0\20\22\1\250\5\22\17\0\7\22\4\0"+
    "\1\22\3\0\21\22\1\251\4\22\17\0\7\22\4\0"+
    "\1\22\3\0\11\22\1\252\14\22\17\0\7\22\4\0"+
    "\1\22\3\0\12\22\1\253\13\22\17\0\7\22\4\0"+
    "\1\22\3\0\6\22\1\73\17\22\17\0\7\22\4\0"+
    "\1\22\3\0\5\22\1\254\20\22\17\0\7\22\4\0"+
    "\1\22\3\0\12\22\1\255\13\22\17\0\7\22\4\0"+
    "\1\22\3\0\21\22\1\256\4\22\17\0\7\22\4\0"+
    "\1\22\3\0\1\22\1\257\24\22\17\0\5\22\1\260"+
    "\1\22\4\0\1\22\3\0\26\22\17\0\2\22\1\261"+
    "\4\22\4\0\1\22\3\0\26\22\17\0\4\22\1\262"+
    "\2\22\4\0\1\22\3\0\26\22\17\0\7\22\4\0"+
    "\1\22\3\0\17\22\1\263\6\22\17\0\7\22\4\0"+
    "\1\22\3\0\20\22\1\264\5\22\17\0\7\22\4\0"+
    "\1\22\3\0\17\22\1\265\6\22\17\0\7\22\4\0"+
    "\1\22\3\0\1\22\1\266\24\22\17\0\7\22\4\0"+
    "\1\22\3\0\5\22\1\267\20\22\17\0\7\22\4\0"+
    "\1\22\3\0\11\22\1\270\14\22\17\0\7\22\4\0"+
    "\1\22\3\0\17\22\1\271\6\22\17\0\7\22\4\0"+
    "\1\22\3\0\21\22\1\272\4\22\17\0\7\22\4\0"+
    "\1\22\3\0\11\22\1\273\14\22\17\0\7\22\4\0"+
    "\1\22\3\0\3\22\1\274\22\22\17\0\7\22\4\0"+
    "\1\22\3\0\17\22\1\275\6\22\17\0\1\22\1\276"+
    "\1\22\1\277\1\22\1\300\1\301\4\0\1\22\3\0"+
    "\26\22\17\0\7\22\4\0\1\22\3\0\7\22\1\302"+
    "\16\22\17\0\7\22\4\0\1\22\3\0\10\22\1\303"+
    "\15\22\17\0\7\22\4\0\1\22\3\0\14\22\1\304"+
    "\11\22\17\0\7\22\4\0\1\22\3\0\17\22\1\305"+
    "\6\22\17\0\7\22\4\0\1\22\3\0\7\22\1\306"+
    "\16\22\17\0\7\22\4\0\1\22\3\0\22\22\1\307"+
    "\3\22\17\0\7\22\4\0\1\22\3\0\1\22\1\310"+
    "\24\22\17\0\7\22\4\0\1\22\3\0\3\22\1\311"+
    "\22\22\17\0\7\22\4\0\1\22\3\0\5\22\1\312"+
    "\20\22\17\0\7\22\4\0\1\22\3\0\12\22\1\313"+
    "\13\22\17\0\7\22\4\0\1\22\3\0\3\22\1\314"+
    "\22\22\17\0\7\22\4\0\1\22\3\0\6\22\1\315"+
    "\5\22\1\316\11\22\17\0\7\22\4\0\1\22\3\0"+
    "\16\22\1\317\7\22\17\0\7\22\4\0\1\22\3\0"+
    "\11\22\1\320\14\22\17\0\7\22\4\0\1\22\3\0"+
    "\21\22\1\321\4\22\17\0\7\22\4\0\1\22\3\0"+
    "\3\22\1\322\22\22\17\0\7\22\4\0\1\22\3\0"+
    "\3\22\1\323\22\22\17\0\7\22\4\0\1\22\3\0"+
    "\14\22\1\324\11\22\17\0\7\22\4\0\1\22\3\0"+
    "\3\22\1\325\22\22\17\0\7\22\4\0\1\22\3\0"+
    "\21\22\1\326\4\22\17\0\5\22\1\327\1\22\4\0"+
    "\1\22\3\0\26\22\17\0\2\22\1\330\4\22\4\0"+
    "\1\22\3\0\26\22\17\0\4\22\1\331\2\22\4\0"+
    "\1\22\3\0\26\22\17\0\7\22\4\0\1\22\3\0"+
    "\1\22\1\332\24\22\17\0\7\22\4\0\1\22\3\0"+
    "\5\22\1\333\20\22\17\0\7\22\4\0\1\22\3\0"+
    "\21\22\1\334\4\22\17\0\7\22\4\0\1\22\3\0"+
    "\1\22\1\335\24\22\17\0\7\22\4\0\1\22\3\0"+
    "\3\22\1\336\22\22\17\0\7\22\4\0\1\22\3\0"+
    "\1\22\1\337\24\22\17\0\7\22\4\0\1\22\3\0"+
    "\25\22\1\155\17\0\7\22\4\0\1\22\3\0\10\22"+
    "\1\340\15\22\17\0\7\22\4\0\1\22\3\0\1\22"+
    "\1\341\24\22\17\0\7\22\4\0\1\22\3\0\1\22"+
    "\1\342\24\22\17\0\7\22\4\0\1\22\3\0\1\22"+
    "\1\343\24\22\17\0\7\22\4\0\1\22\3\0\4\22"+
    "\1\344\21\22\17\0\7\22\4\0\1\22\3\0\5\22"+
    "\1\345\20\22\17\0\7\22\4\0\1\22\3\0\21\22"+
    "\1\346\4\22\17\0\7\22\4\0\1\22\3\0\17\22"+
    "\1\347\6\22\17\0\7\22\4\0\1\22\3\0\4\22"+
    "\1\350\21\22\17\0\7\22\4\0\1\22\3\0\12\22"+
    "\1\351\13\22\17\0\7\22\4\0\1\22\3\0\21\22"+
    "\1\352\4\22\17\0\7\22\4\0\1\22\3\0\12\22"+
    "\1\353\13\22\17\0\7\22\4\0\1\22\3\0\3\22"+
    "\1\354\22\22\17\0\7\22\4\0\1\22\3\0\12\22"+
    "\1\355\13\22\17\0\7\22\4\0\1\22\3\0\3\22"+
    "\1\356\22\22\17\0\7\22\4\0\1\22\3\0\5\22"+
    "\1\357\20\22\17\0\7\22\4\0\1\22\3\0\5\22"+
    "\1\360\20\22\17\0\7\22\4\0\1\22\3\0\5\22"+
    "\1\361\20\22\17\0\7\22\4\0\1\22\3\0\5\22"+
    "\1\362\20\22\17\0\7\22\4\0\1\22\3\0\4\22"+
    "\1\363\21\22\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9256];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\7\11\2\1\4\11\1\1\2\11"+
    "\20\1\2\11\1\0\1\11\2\0\44\1\2\0\47\1"+
    "\3\0\52\1\2\11\115\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[243];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ValaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 71: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 72: break;
          case 3:
            { return ValaTypes.LPAREN;
            }
          // fall through
          case 73: break;
          case 4:
            { return ValaTypes.RPAREN;
            }
          // fall through
          case 74: break;
          case 5:
            { return ValaTypes.MULTIPLY;
            }
          // fall through
          case 75: break;
          case 6:
            { return ValaTypes.PLUS;
            }
          // fall through
          case 76: break;
          case 7:
            { return ValaTypes.COMMA;
            }
          // fall through
          case 77: break;
          case 8:
            { return ValaTypes.MINUS;
            }
          // fall through
          case 78: break;
          case 9:
            { return ValaTypes.DOT;
            }
          // fall through
          case 79: break;
          case 10:
            { return ValaTypes.DIVIDE;
            }
          // fall through
          case 80: break;
          case 11:
            { return ValaTypes.NUMBER;
            }
          // fall through
          case 81: break;
          case 12:
            { return ValaTypes.SEMICOLON;
            }
          // fall through
          case 82: break;
          case 13:
            { return ValaTypes.LESS_THAN;
            }
          // fall through
          case 83: break;
          case 14:
            { return ValaTypes.EQUALS;
            }
          // fall through
          case 84: break;
          case 15:
            { return ValaTypes.GREATER_THAN;
            }
          // fall through
          case 85: break;
          case 16:
            { return ValaTypes.IDENTIFIER;
            }
          // fall through
          case 86: break;
          case 17:
            { return ValaTypes.LBRACKET;
            }
          // fall through
          case 87: break;
          case 18:
            { return ValaTypes.RBRACKET;
            }
          // fall through
          case 88: break;
          case 19:
            { return ValaTypes.LBRACE;
            }
          // fall through
          case 89: break;
          case 20:
            { return ValaTypes.RBRACE;
            }
          // fall through
          case 90: break;
          case 21:
            { return ValaTypes.STRING;
            }
          // fall through
          case 91: break;
          case 22:
            { return ValaTypes.COMMENT;
            }
          // fall through
          case 92: break;
          case 23:
            { return ValaTypes.IF_STATEMENT;
            }
          // fall through
          case 93: break;
          case 24:
            { return ValaTypes.FOR_STATEMENT;
            }
          // fall through
          case 94: break;
          case 25:
            { return ValaTypes.INT;
            }
          // fall through
          case 95: break;
          case 26:
            { return ValaTypes.TRY_STATEMENT;
            }
          // fall through
          case 96: break;
          case 27:
            { return ValaTypes.VAR;
            }
          // fall through
          case 97: break;
          case 28:
            { return ValaTypes.BLOCK_COMMENT;
            }
          // fall through
          case 98: break;
          case 29:
            { return ValaTypes.BOOL;
            }
          // fall through
          case 99: break;
          case 30:
            { return ValaTypes.CHAR;
            }
          // fall through
          case 100: break;
          case 31:
            { return ValaTypes.ENUM_DECLARATION;
            }
          // fall through
          case 101: break;
          case 32:
            { return ValaTypes.INT8;
            }
          // fall through
          case 102: break;
          case 33:
            { return ValaTypes.LONG;
            }
          // fall through
          case 103: break;
          case 34:
            { return ValaTypes.NULL;
            }
          // fall through
          case 104: break;
          case 35:
            { return ValaTypes.TRUE;
            }
          // fall through
          case 105: break;
          case 36:
            { return ValaTypes.UINT;
            }
          // fall through
          case 106: break;
          case 37:
            { return ValaTypes.VOID;
            }
          // fall through
          case 107: break;
          case 38:
            { return ValaTypes.DOC_COMMENT;
            }
          // fall through
          case 108: break;
          case 39:
            { return ValaTypes.CLASS_DECLARATION;
            }
          // fall through
          case 109: break;
          case 40:
            { return ValaTypes.CONST;
            }
          // fall through
          case 110: break;
          case 41:
            { return ValaTypes.FALSE;
            }
          // fall through
          case 111: break;
          case 42:
            { return ValaTypes.FLOAT;
            }
          // fall through
          case 112: break;
          case 43:
            { return ValaTypes.INT16;
            }
          // fall through
          case 113: break;
          case 44:
            { return ValaTypes.INT32;
            }
          // fall through
          case 114: break;
          case 45:
            { return ValaTypes.INT64;
            }
          // fall through
          case 115: break;
          case 46:
            { return ValaTypes.SHORT;
            }
          // fall through
          case 116: break;
          case 47:
            { return ValaTypes.UCHAR;
            }
          // fall through
          case 117: break;
          case 48:
            { return ValaTypes.UINT8;
            }
          // fall through
          case 118: break;
          case 49:
            { return ValaTypes.ULONG;
            }
          // fall through
          case 119: break;
          case 50:
            { return ValaTypes.USING_STATEMENT;
            }
          // fall through
          case 120: break;
          case 51:
            { return ValaTypes.DOUBLE;
            }
          // fall through
          case 121: break;
          case 52:
            { return ValaTypes.PUBLIC;
            }
          // fall through
          case 122: break;
          case 53:
            { return ValaTypes.RETURN_STATEMENT;
            }
          // fall through
          case 123: break;
          case 54:
            { return ValaTypes.STATIC;
            }
          // fall through
          case 124: break;
          case 55:
            { return ValaTypes.STRUCT_DECLARATION;
            }
          // fall through
          case 125: break;
          case 56:
            { return ValaTypes.UINT16;
            }
          // fall through
          case 126: break;
          case 57:
            { return ValaTypes.UINT32;
            }
          // fall through
          case 127: break;
          case 58:
            { return ValaTypes.UINT64;
            }
          // fall through
          case 128: break;
          case 59:
            { return ValaTypes.USHORT;
            }
          // fall through
          case 129: break;
          case 60:
            { return ValaTypes.PRIVATE;
            }
          // fall through
          case 130: break;
          case 61:
            { return ValaTypes.UNICHAR;
            }
          // fall through
          case 131: break;
          case 62:
            { return ValaTypes.UNOWNED;
            }
          // fall through
          case 132: break;
          case 63:
            { return ValaTypes.VIRTUAL;
            }
          // fall through
          case 133: break;
          case 64:
            { return ValaTypes.ABSTRACT;
            }
          // fall through
          case 134: break;
          case 65:
            { return ValaTypes.CRITICAL;
            }
          // fall through
          case 135: break;
          case 66:
            { return ValaTypes.INTERNAL;
            }
          // fall through
          case 136: break;
          case 67:
            { return ValaTypes.OVERRIDE;
            }
          // fall through
          case 137: break;
          case 68:
            { return ValaTypes.INTERFACE_DECLARATION;
            }
          // fall through
          case 138: break;
          case 69:
            { return ValaTypes.NAMESPACE_STATEMENT;
            }
          // fall through
          case 139: break;
          case 70:
            { return ValaTypes.PROTECTED;
            }
          // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
