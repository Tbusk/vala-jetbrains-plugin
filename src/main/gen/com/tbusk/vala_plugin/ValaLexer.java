// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Vala.flex

package com.tbusk.vala_plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tbusk.vala_plugin.psi.ValaTypes;
import com.intellij.psi.TokenType;
import com.tbusk.vala_plugin.ValaTokenSets;
import com.tbusk.vala_plugin.psi.ValaTokenType;

/**
 * Lexer generator used is JFlex.
 * Documentation can be found at: https://jflex.de/manual.html
 */

public class ValaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\23\1\30\1\23\1\31\1\23"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\21\41\1\45\4\41\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\6\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\4\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\23\30\1\37\1\40\1\41\1\42\1\43\1\0"+
    "\1\44\1\0\1\45\1\46\1\0\1\47\1\0\1\50"+
    "\1\51\1\52\1\53\1\54\2\0\1\55\1\56\1\0"+
    "\1\20\1\57\1\60\1\61\3\62\2\30\1\63\10\30"+
    "\1\64\10\30\1\65\1\66\1\67\34\30\1\70\1\71"+
    "\2\0\1\71\1\0\30\30\1\72\1\73\3\30\1\74"+
    "\1\30\1\75\5\30\1\76\14\30\1\77\7\30\1\100"+
    "\5\30\3\0\1\101\3\0\1\30\1\102\3\30\1\103"+
    "\1\104\1\30\1\105\1\30\1\106\6\30\1\107\1\30"+
    "\1\110\11\30\1\111\1\30\1\112\1\113\1\30\1\114"+
    "\17\30\1\115\1\30\1\116\1\30\1\117\6\30\1\120"+
    "\1\121\2\30\1\101\1\0\1\71\1\122\3\0\1\123"+
    "\2\30\1\124\1\125\1\126\1\127\1\130\7\30\1\131"+
    "\1\30\1\132\1\30\1\133\1\134\1\135\3\30\1\136"+
    "\5\30\1\137\7\30\1\140\1\141\3\30\1\142\1\143"+
    "\3\30\1\144\1\30\1\145\1\146\1\122\1\0\6\30"+
    "\1\147\2\30\1\150\10\30\1\151\1\30\1\152\1\153"+
    "\1\154\1\30\1\155\1\156\1\157\1\160\1\161\1\162"+
    "\1\163\1\164\2\30\1\165\1\30\1\0\1\166\3\30"+
    "\1\167\1\30\1\170\1\30\1\171\1\172\4\30\1\173"+
    "\2\30\1\174\1\175\1\176\1\177\1\200\1\30\1\201"+
    "\1\202\2\30\1\203\1\30\1\204\1\30\1\205\1\206"+
    "\1\30\1\207\1\210\1\211\1\30\1\212";

  private static int [] zzUnpackAction() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\112\0\112\0\u0172"+
    "\0\u01bc\0\u0206\0\112\0\112\0\u0250\0\u029a\0\112\0\u02e4"+
    "\0\112\0\u032e\0\u0378\0\112\0\112\0\u03c2\0\u040c\0\u0456"+
    "\0\112\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8\0\112\0\112"+
    "\0\112\0\112\0\u04ea\0\112\0\u0612\0\u065c\0\u06a6\0\u06f0"+
    "\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862\0\u08ac\0\u08f6\0\u0940"+
    "\0\u098a\0\u09d4\0\u0a1e\0\u0a68\0\u0ab2\0\u0afc\0\u0b46\0\112"+
    "\0\u0b90\0\112\0\112\0\112\0\u0128\0\112\0\u0bda\0\112"+
    "\0\112\0\u0206\0\112\0\u0c24\0\112\0\112\0\112\0\112"+
    "\0\112\0\u0c6e\0\u0cb8\0\u0d02\0\u0c6e\0\u0d4c\0\u0d96\0\112"+
    "\0\112\0\112\0\u04ea\0\u0de0\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08"+
    "\0\u0f52\0\u0f9c\0\u0fe6\0\u1030\0\u107a\0\u10c4\0\u110e\0\u1158"+
    "\0\u11a2\0\u11ec\0\u1236\0\u1280\0\u12ca\0\u1314\0\u135e\0\u13a8"+
    "\0\u13f2\0\u07ce\0\u143c\0\u07ce\0\u1486\0\u14d0\0\u151a\0\u1564"+
    "\0\u15ae\0\u15f8\0\u1642\0\u168c\0\u16d6\0\u1720\0\u176a\0\u17b4"+
    "\0\u17fe\0\u1848\0\u1892\0\u18dc\0\u1926\0\u1970\0\u19ba\0\u1a04"+
    "\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c\0\u1b76\0\u1bc0\0\u1c0a\0\u1c54"+
    "\0\112\0\112\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6\0\u1e10"+
    "\0\u1e5a\0\u1ea4\0\u1eee\0\u1f38\0\u1f82\0\u1fcc\0\u2016\0\u2060"+
    "\0\u20aa\0\u20f4\0\u213e\0\u2188\0\u21d2\0\u221c\0\u2266\0\u22b0"+
    "\0\u22fa\0\u2344\0\u238e\0\u23d8\0\u2422\0\u246c\0\u24b6\0\u2500"+
    "\0\u254a\0\u2594\0\u25de\0\u07ce\0\u2628\0\u07ce\0\u2672\0\u26bc"+
    "\0\u2706\0\u2750\0\u279a\0\u07ce\0\u27e4\0\u282e\0\u2878\0\u28c2"+
    "\0\u290c\0\u2956\0\u29a0\0\u29ea\0\u2a34\0\u2a7e\0\u2ac8\0\u2b12"+
    "\0\u07ce\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a\0\u2c84\0\u2cce\0\u2d18"+
    "\0\u07ce\0\u2d62\0\u2dac\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e"+
    "\0\u2f68\0\u2fb2\0\u2ffc\0\u1d32\0\u3046\0\u3090\0\u07ce\0\u30da"+
    "\0\u3124\0\u316e\0\u07ce\0\u07ce\0\u31b8\0\u07ce\0\u3202\0\u07ce"+
    "\0\u324c\0\u3296\0\u32e0\0\u332a\0\u3374\0\u33be\0\u07ce\0\u3408"+
    "\0\u07ce\0\u3452\0\u349c\0\u34e6\0\u3530\0\u357a\0\u35c4\0\u360e"+
    "\0\u3658\0\u36a2\0\u07ce\0\u36ec\0\u07ce\0\u07ce\0\u3736\0\u07ce"+
    "\0\u3780\0\u37ca\0\u3814\0\u385e\0\u38a8\0\u38f2\0\u393c\0\u3986"+
    "\0\u39d0\0\u3a1a\0\u3a64\0\u3aae\0\u3af8\0\u3b42\0\u3b8c\0\u07ce"+
    "\0\u3bd6\0\u07ce\0\u3c20\0\u3c6a\0\u3cb4\0\u3cfe\0\u3d48\0\u3d92"+
    "\0\u3ddc\0\u3e26\0\u07ce\0\u07ce\0\u3e70\0\u3eba\0\112\0\u3f04"+
    "\0\u3f4e\0\u1d32\0\u2fb2\0\u3f98\0\u3f4e\0\u07ce\0\u3fe2\0\u402c"+
    "\0\u07ce\0\u07ce\0\u07ce\0\u07ce\0\u4076\0\u40c0\0\u410a\0\u4154"+
    "\0\u419e\0\u41e8\0\u4232\0\u427c\0\u07ce\0\u42c6\0\u07ce\0\u4310"+
    "\0\u07ce\0\u07ce\0\u07ce\0\u435a\0\u43a4\0\u43ee\0\u07ce\0\u4438"+
    "\0\u4482\0\u44cc\0\u4516\0\u4560\0\u07ce\0\u45aa\0\u45f4\0\u463e"+
    "\0\u4688\0\u46d2\0\u471c\0\u4766\0\u47b0\0\u07ce\0\u47fa\0\u4844"+
    "\0\u488e\0\u07ce\0\u07ce\0\u48d8\0\u4922\0\u496c\0\u07ce\0\u49b6"+
    "\0\u07ce\0\u07ce\0\112\0\u4a00\0\u4a4a\0\u4a94\0\u4ade\0\u4b28"+
    "\0\u4b72\0\u4bbc\0\u07ce\0\u4c06\0\u4c50\0\u07ce\0\u4c9a\0\u4ce4"+
    "\0\u4d2e\0\u4d78\0\u4dc2\0\u4e0c\0\u4e56\0\u4ea0\0\u07ce\0\u4eea"+
    "\0\u07ce\0\u07ce\0\u07ce\0\u4f34\0\u07ce\0\u07ce\0\u07ce\0\u07ce"+
    "\0\u07ce\0\u07ce\0\u07ce\0\u07ce\0\u4f7e\0\u4fc8\0\u07ce\0\u5012"+
    "\0\u505c\0\u07ce\0\u50a6\0\u50f0\0\u513a\0\u07ce\0\u5184\0\u07ce"+
    "\0\u51ce\0\u07ce\0\u07ce\0\u5218\0\u5262\0\u52ac\0\u52f6\0\u07ce"+
    "\0\u5340\0\u538a\0\u07ce\0\u07ce\0\u07ce\0\u07ce\0\u07ce\0\u53d4"+
    "\0\u07ce\0\u07ce\0\u541e\0\u5468\0\u07ce\0\u54b2\0\u07ce\0\u54fc"+
    "\0\u07ce\0\u07ce\0\u5546\0\u07ce\0\u07ce\0\u07ce\0\u5590\0\u07ce";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\7\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\2\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\2\53\1\54\2\53\1\55\1\53\1\56"+
    "\1\57\1\60\1\53\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\53\1\67\1\53\1\70\1\71\1\72\1\73"+
    "\113\0\2\3\144\0\1\74\54\0\5\75\1\76\41\75"+
    "\1\77\42\75\35\0\1\100\65\0\1\101\100\0\12\102"+
    "\1\103\34\102\1\104\42\102\35\0\1\105\72\0\1\106"+
    "\16\0\1\107\74\0\1\110\2\0\7\23\3\0\1\111"+
    "\54\0\15\112\1\113\4\112\1\114\12\112\1\115\11\112"+
    "\1\116\42\112\21\0\1\117\1\0\7\23\115\0\1\120"+
    "\111\0\1\121\111\0\1\122\61\0\1\75\113\0\1\53"+
    "\13\0\7\123\7\0\5\123\4\0\1\123\1\0\32\53"+
    "\13\0\1\53\13\0\7\123\7\0\2\123\1\124\2\123"+
    "\4\0\1\123\1\0\32\53\13\0\1\53\13\0\7\123"+
    "\7\0\1\123\1\125\3\123\4\0\1\123\1\0\32\53"+
    "\13\0\1\53\13\0\7\123\7\0\5\123\4\0\1\123"+
    "\1\0\4\53\1\126\25\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\1\53\1\127\20\53"+
    "\1\130\7\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\1\131\15\53\1\132\2\53\1\133"+
    "\10\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\1\134\6\53\1\135\3\53\1\136\2\53"+
    "\1\137\13\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\4\53\1\140\11\53\1\141\13\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\13\53\1\142\1\53\1\143\3\53\1\144\5\53"+
    "\1\145\2\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\1\146\7\53\1\147\2\53\1\150"+
    "\2\53\1\151\13\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\32\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\5\53\1\152"+
    "\7\53\1\153\4\53\1\154\7\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\16\53\1\155"+
    "\13\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\1\156\3\53\1\157\17\53\1\160\5\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\24\53\1\161\1\162\1\163\3\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\21\53"+
    "\1\164\2\53\1\165\5\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\4\53\1\166\25\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\7\53\1\167\1\170\11\53\1\171\1\172\2\53"+
    "\1\173\3\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\7\53\1\174\11\53\1\175\10\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\2\53\1\176\5\53\1\177\2\53\1\200\1\53"+
    "\1\201\4\53\1\202\7\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\1\203\7\53\1\204"+
    "\5\53\1\205\13\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\4\53\1\206\2\53\1\207"+
    "\22\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\10\53\1\210\21\53\113\0\1\211\2\0"+
    "\2\75\2\0\106\75\2\102\2\0\106\102\22\112\1\212"+
    "\24\112\1\116\42\112\15\213\1\214\4\213\1\215\24\213"+
    "\1\216\42\213\2\114\1\0\107\114\2\112\2\0\106\112"+
    "\23\0\7\117\67\0\1\53\13\0\7\123\7\0\5\123"+
    "\4\0\1\123\1\0\16\53\1\217\13\53\13\0\1\53"+
    "\13\0\7\123\7\0\5\123\4\0\1\123\1\0\24\53"+
    "\1\220\5\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\21\53\1\221\10\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\22\53"+
    "\1\222\7\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\30\53\1\223\1\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\22\53"+
    "\1\224\7\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\16\53\1\225\13\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\4\53"+
    "\1\226\25\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\22\53\1\227\1\230\6\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\1\231\31\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\1\232\31\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\15\53\1\233"+
    "\14\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\5\53\1\234\5\53\1\235\16\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\24\53\1\236\5\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\22\53\1\237\7\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\22\53\1\240\1\53\1\241\5\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\21\53\1\242"+
    "\10\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\23\53\1\243\6\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\13\53\1\244"+
    "\16\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\15\53\1\245\14\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\16\53\1\246"+
    "\13\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\21\53\1\247\10\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\23\53\1\250"+
    "\6\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\2\53\1\251\12\53\1\252\14\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\14\53\1\253\15\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\26\53\1\254\3\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\13\53\1\255\16\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\23\53\1\256\6\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\4\53\1\257\25\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\15\53\1\260\14\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\10\53\1\261\5\53\1\262\13\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\1\53\1\263"+
    "\30\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\5\53\1\264\12\53\1\265\2\53\1\266"+
    "\6\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\16\53\1\267\13\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\6\53\1\270"+
    "\22\53\1\271\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\10\53\1\272\21\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\1\273"+
    "\20\53\1\274\10\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\10\53\1\275\21\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\10\53\1\276\10\53\1\277\10\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\24\53\1\300"+
    "\3\53\1\301\1\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\7\53\1\302\22\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\15\53\1\303\14\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\16\53\1\304\13\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\10\53\1\305\5\53\1\306\13\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\7\53\1\307"+
    "\1\310\21\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\21\53\1\311\10\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\21\53"+
    "\1\312\10\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\10\53\1\313\21\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\1\314"+
    "\31\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\10\53\1\315\21\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\4\53\1\316"+
    "\25\53\4\0\15\213\1\317\4\213\1\215\24\213\1\216"+
    "\42\213\15\320\1\321\4\320\1\322\24\320\1\323\42\320"+
    "\15\324\1\325\74\324\2\213\2\324\11\213\1\317\74\213"+
    "\7\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\3\53\1\326\26\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\22\53\1\327\7\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\22\53\1\330\7\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\23\53\1\331\6\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\15\53\1\332\14\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\4\53\1\333\25\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\13\53\1\334\16\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\1\335\31\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\4\53\1\336\25\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\2\53\1\337\27\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\21\53\1\340\10\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\22\53\1\341\7\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\22\53\1\342\1\343\6\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\1\344\31\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\4\53\1\345\25\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\1\53\1\346\30\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\4\53\1\347\25\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\24\53\1\350\5\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\14\53\1\351\15\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\16\53\1\352\13\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\4\53\1\353\25\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\22\53\1\354\7\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\1\355\31\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\1\356\31\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\4\53\1\357"+
    "\25\53\13\0\1\53\13\0\1\53\1\360\1\53\1\361"+
    "\1\53\1\362\1\363\7\0\5\53\4\0\1\53\1\0"+
    "\4\53\1\364\25\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\12\53\1\365\17\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\6\53\1\366\23\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\4\53\1\367\25\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\13\53\1\370\16\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\21\53\1\371\10\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\4\53\1\372\25\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\25\53\1\373\4\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\23\53\1\374\6\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\13\53\1\375\16\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\24\53\1\376\5\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\24\53\1\377\5\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\21\53\1\u0100\10\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\15\53\1\u0101\14\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\4\53\1\u0102\25\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\31\53\1\u0103\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\23\53"+
    "\1\u0104\6\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\10\53\1\u0105\13\53\1\u0106\5\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\23\53\1\u0107\6\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\22\53\1\u0108\7\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\16\53\1\u0109\13\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\4\53\1\u010a\25\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\1\u010b\31\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\23\53\1\u010c\6\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\15\53\1\u010d\14\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\2\53\1\u010e\27\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\26\53\1\u010f\3\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\16\53\1\u0110\13\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\15\53\1\u0111\14\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\23\53\1\u0112\6\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\3\53\1\u0113\26\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\12\53\1\u0114\17\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\13\53\1\u0115\16\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\13\53\1\u0116\16\53\4\0"+
    "\22\213\1\u0117\24\213\1\216\42\213\15\320\1\u0118\4\320"+
    "\1\u0119\24\320\1\323\57\320\1\u0118\4\320\1\u011a\24\320"+
    "\1\323\42\320\15\u011b\1\u011c\74\u011b\2\320\2\u011d\11\320"+
    "\1\u0118\74\320\22\324\1\u0117\67\324\7\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\4\53\1\u011e"+
    "\25\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\10\53\1\u011f\21\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\21\53\1\u0120"+
    "\10\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\2\53\1\u0121\27\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\12\53\1\u0122"+
    "\17\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\7\53\1\u0123\22\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\22\53\1\u0124"+
    "\7\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\23\53\1\u0125\6\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\10\53\1\u0126"+
    "\21\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\24\53\1\u0127\5\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\6\53\1\u0128"+
    "\23\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\13\53\1\u0129\16\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\21\53\1\u012a"+
    "\10\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\21\53\1\u012b\10\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\21\53\1\u012c"+
    "\10\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\4\53\1\u012d\25\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\13\53\1\u012e"+
    "\16\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\23\53\1\u012f\6\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\1\u0130\31\53"+
    "\13\0\1\53\13\0\5\53\1\u0131\1\53\7\0\5\53"+
    "\4\0\1\53\1\0\32\53\13\0\1\53\13\0\2\53"+
    "\1\u0132\4\53\7\0\5\53\4\0\1\53\1\0\32\53"+
    "\13\0\1\53\13\0\4\53\1\u0133\2\53\7\0\5\53"+
    "\4\0\1\53\1\0\32\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\21\53\1\u0134\10\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\22\53\1\u0135\7\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\21\53\1\u0136\10\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\3\53\1\u0137\26\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\1\u0138\31\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\4\53\1\u0139\25\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\10\53\1\u013a\21\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\10\53\1\u013b\21\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\21\53\1\u013c\10\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\23\53\1\u013d\6\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\1\u013e\31\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\u013f\1\0\32\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\4\53\1\u0140\25\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\10\53\1\u0141\21\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\15\53\1\u0142\14\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\2\53\1\u0143\27\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\2\53\1\u0144\27\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\26\53\1\u0145\3\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\21\53\1\u0146\10\53\13\0\1\53\13\0\1\53"+
    "\1\u0147\1\53\1\u0148\1\53\1\u0149\1\u014a\7\0\5\53"+
    "\4\0\1\53\1\0\32\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\6\53\1\u014b\23\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\7\53\1\u014c\22\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\15\53\1\u014d\14\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\21\53\1\u014e\10\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\6\53\1\u014f\23\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\24\53\1\u0150\5\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\4\53\1\u0151\25\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\3\53\1\u0152\26\53\4\0\15\320\1\321\4\320"+
    "\1\u0153\24\320\1\323\42\320\15\u011d\1\u0154\74\u011d\15\u011b"+
    "\1\u011c\4\u011b\1\u0153\67\u011b\7\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\16\53\1\u0155\13\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\1\u0156\31\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\21\53\1\u0157\10\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\15\53\1\u0158\14\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\13\53\1\u0159\16\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\1\u015a\31\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\4\53\1\u015b\25\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\4\53"+
    "\1\u015c\25\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\3\53\1\u015d\26\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\15\53"+
    "\1\u015e\14\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\13\53\1\u015f\16\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\2\53"+
    "\1\u0160\27\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\5\53\1\u0161\7\53\1\u0162\14\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\17\53\1\u0163\12\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\10\53\1\u0164\21\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\23\53\1\u0165\6\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\2\53\1\u0166\27\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\2\53\1\u0167\27\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\21\53\1\u0168\10\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\15\53\1\u0169\14\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\13\53\1\u016a\16\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\23\53\1\u016b\6\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\u016c\1\0\32\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\2\53"+
    "\1\u016d\27\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\6\53\1\u016e\23\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\23\53"+
    "\1\u016f\6\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\7\53\1\u0170\22\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\22\53"+
    "\1\u0171\7\53\13\0\1\53\13\0\5\53\1\u0172\1\53"+
    "\7\0\5\53\4\0\1\53\1\0\32\53\13\0\1\53"+
    "\13\0\2\53\1\u0173\4\53\7\0\5\53\4\0\1\53"+
    "\1\0\32\53\13\0\1\53\13\0\4\53\1\u0174\2\53"+
    "\7\0\5\53\4\0\1\53\1\0\32\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\1\u0175"+
    "\31\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\4\53\1\u0176\25\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\23\53\1\u0177"+
    "\6\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\1\u0178\31\53\4\0\15\u011d\1\u0179\4\u011d"+
    "\1\u0153\67\u011d\7\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\15\53\1\u017a\14\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\2\53"+
    "\1\u017b\27\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\24\53\1\u017c\5\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\24\53"+
    "\1\u017d\5\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\23\53\1\u017e\6\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\23\53"+
    "\1\u017f\6\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\22\53\1\u0180\7\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\16\53"+
    "\1\u0181\13\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\30\53\1\u0182\1\53\13\0\1\53"+
    "\13\0\7\53\7\0\5\53\4\0\1\53\1\0\7\53"+
    "\1\u0183\22\53\13\0\1\53\13\0\7\53\7\0\5\53"+
    "\4\0\1\53\1\0\1\u0184\31\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\1\u0185\31\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\1\u0186\31\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\3\53\1\u0187\26\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\4\53\1\u0188\25\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\23\53\1\u0189\6\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\4\53\1\u018a\25\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\23\53\1\u018b\6\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\21\53\1\u018c\10\53\13\0\1\53\13\0\7\53\7\0"+
    "\5\53\4\0\1\53\1\0\3\53\1\u018d\26\53\13\0"+
    "\1\53\13\0\7\53\7\0\5\53\4\0\1\53\1\0"+
    "\13\53\1\u018e\16\53\4\0\15\u011d\1\u0154\4\u011d\1\u011a"+
    "\67\u011d\7\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\23\53\1\u018f\6\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\2\53\1\u0190"+
    "\27\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\4\53\1\u0191\25\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\4\53\1\u0192"+
    "\25\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\14\53\1\u0193\15\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\2\53\1\u0194"+
    "\27\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\13\53\1\u0195\16\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\2\53\1\u0196"+
    "\27\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\4\53\1\u0197\25\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\4\53\1\u0198"+
    "\25\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\22\53\1\u0199\7\53\13\0\1\53\13\0"+
    "\7\53\7\0\5\53\4\0\1\53\1\0\23\53\1\u019a"+
    "\6\53\13\0\1\53\13\0\7\53\7\0\5\53\4\0"+
    "\1\53\1\0\1\u019b\31\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\4\53\1\u019c\25\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\4\53\1\u019d\25\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\3\53\1\u019e\26\53"+
    "\13\0\1\53\13\0\7\53\7\0\5\53\4\0\1\53"+
    "\1\0\10\53\1\u019f\21\53\13\0\1\53\13\0\7\53"+
    "\7\0\5\53\4\0\1\53\1\0\15\53\1\u01a0\14\53"+
    "\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[21978];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\3\1\2\11\2\1\1\11"+
    "\1\1\1\11\2\1\2\11\3\1\1\11\5\1\4\11"+
    "\1\1\1\11\23\1\1\11\1\1\3\11\1\0\1\11"+
    "\1\0\2\11\1\0\1\11\1\0\5\11\2\0\2\1"+
    "\1\0\1\1\3\11\66\1\2\11\2\0\1\1\1\0"+
    "\100\1\3\0\1\1\3\0\101\1\1\11\1\0\2\1"+
    "\3\0\65\1\1\11\1\0\44\1\1\0\47\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ValaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 139: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 140: break;
          case 3:
            { return ValaTypes.EXCLAMATION;
            }
          // fall through
          case 141: break;
          case 4:
            { return ValaTypes.POUND;
            }
          // fall through
          case 142: break;
          case 5:
            { return ValaTypes.DOLLAR;
            }
          // fall through
          case 143: break;
          case 6:
            { return ValaTypes.PERCENT;
            }
          // fall through
          case 144: break;
          case 7:
            { return ValaTypes.AND;
            }
          // fall through
          case 145: break;
          case 8:
            { return ValaTypes.LPAREN;
            }
          // fall through
          case 146: break;
          case 9:
            { return ValaTypes.RPAREN;
            }
          // fall through
          case 147: break;
          case 10:
            { return ValaTypes.STAR;
            }
          // fall through
          case 148: break;
          case 11:
            { return ValaTypes.PLUS;
            }
          // fall through
          case 149: break;
          case 12:
            { return ValaTypes.COMMA;
            }
          // fall through
          case 150: break;
          case 13:
            { return ValaTypes.MINUS;
            }
          // fall through
          case 151: break;
          case 14:
            { return ValaTypes.DOT;
            }
          // fall through
          case 152: break;
          case 15:
            { return ValaTypes.FORWARD_SLASH;
            }
          // fall through
          case 153: break;
          case 16:
            { return ValaTypes.NUMBER;
            }
          // fall through
          case 154: break;
          case 17:
            { return ValaTypes.COLON;
            }
          // fall through
          case 155: break;
          case 18:
            { return ValaTypes.SEMICOLON;
            }
          // fall through
          case 156: break;
          case 19:
            { return ValaTypes.LESS_THAN;
            }
          // fall through
          case 157: break;
          case 20:
            { return ValaTypes.EQUALS;
            }
          // fall through
          case 158: break;
          case 21:
            { return ValaTypes.GREATER_THAN;
            }
          // fall through
          case 159: break;
          case 22:
            { return ValaTypes.QUESTION_MARK;
            }
          // fall through
          case 160: break;
          case 23:
            { return ValaTypes.AT;
            }
          // fall through
          case 161: break;
          case 24:
            { return ValaTypes.IDENTIFIER;
            }
          // fall through
          case 162: break;
          case 25:
            { return ValaTypes.LBRACKET;
            }
          // fall through
          case 163: break;
          case 26:
            { return ValaTypes.BACKSLASH;
            }
          // fall through
          case 164: break;
          case 27:
            { return ValaTypes.RBRACKET;
            }
          // fall through
          case 165: break;
          case 28:
            { return ValaTypes.CARET;
            }
          // fall through
          case 166: break;
          case 29:
            { return ValaTypes.UNDERSCORE;
            }
          // fall through
          case 167: break;
          case 30:
            { return ValaTypes.BACKTICK;
            }
          // fall through
          case 168: break;
          case 31:
            { return ValaTypes.LBRACE;
            }
          // fall through
          case 169: break;
          case 32:
            { return ValaTypes.PIPE;
            }
          // fall through
          case 170: break;
          case 33:
            { return ValaTypes.RBRACE;
            }
          // fall through
          case 171: break;
          case 34:
            { return ValaTypes.TILDE;
            }
          // fall through
          case 172: break;
          case 35:
            { return ValaTypes.NOT_EQUALS;
            }
          // fall through
          case 173: break;
          case 36:
            { return ValaTypes.STRING_LITERAL;
            }
          // fall through
          case 174: break;
          case 37:
            { return ValaTypes.MODULO_EQUALS;
            }
          // fall through
          case 175: break;
          case 38:
            { return ValaTypes.AND_AND;
            }
          // fall through
          case 176: break;
          case 39:
            { return ValaTypes.CHAR_LITERAL;
            }
          // fall through
          case 177: break;
          case 40:
            { return ValaTypes.MULTIPLY_EQUALS;
            }
          // fall through
          case 178: break;
          case 41:
            { return ValaTypes.INCREMENT;
            }
          // fall through
          case 179: break;
          case 42:
            { return ValaTypes.PLUS_EQUALS;
            }
          // fall through
          case 180: break;
          case 43:
            { return ValaTypes.DECREMENT;
            }
          // fall through
          case 181: break;
          case 44:
            { return ValaTypes.MINUS_EQUALS;
            }
          // fall through
          case 182: break;
          case 45:
            { return ValaTypes.COMMENT;
            }
          // fall through
          case 183: break;
          case 46:
            { return ValaTypes.DIVIDE_EQUALS;
            }
          // fall through
          case 184: break;
          case 47:
            { return ValaTypes.LESS_THAN_EQUALS;
            }
          // fall through
          case 185: break;
          case 48:
            { return ValaTypes.EQUALS_EQUALS;
            }
          // fall through
          case 186: break;
          case 49:
            { return ValaTypes.GREATER_THAN_EQUALS;
            }
          // fall through
          case 187: break;
          case 50:
            { return ValaTypes.CONSTANT;
            }
          // fall through
          case 188: break;
          case 51:
            { return ValaTypes.AS;
            }
          // fall through
          case 189: break;
          case 52:
            { return ValaTypes.DO;
            }
          // fall through
          case 190: break;
          case 53:
            { return ValaTypes.IF;
            }
          // fall through
          case 191: break;
          case 54:
            { return ValaTypes.IN;
            }
          // fall through
          case 192: break;
          case 55:
            { return ValaTypes.IS;
            }
          // fall through
          case 193: break;
          case 56:
            { return ValaTypes.OR_OR;
            }
          // fall through
          case 194: break;
          case 57:
            { return ValaTypes.REGULAR_EXPRESSION;
            }
          // fall through
          case 195: break;
          case 58:
            { return ValaTypes.FOR;
            }
          // fall through
          case 196: break;
          case 59:
            { return ValaTypes.INT;
            }
          // fall through
          case 197: break;
          case 60:
            { return ValaTypes.NEW;
            }
          // fall through
          case 198: break;
          case 61:
            { return ValaTypes.OUT;
            }
          // fall through
          case 199: break;
          case 62:
            { return ValaTypes.REF;
            }
          // fall through
          case 200: break;
          case 63:
            { return ValaTypes.TRY;
            }
          // fall through
          case 201: break;
          case 64:
            { return ValaTypes.VAR;
            }
          // fall through
          case 202: break;
          case 65:
            { return ValaTypes.BLOCK_COMMENT;
            }
          // fall through
          case 203: break;
          case 66:
            { return ValaTypes.DBUS;
            }
          // fall through
          case 204: break;
          case 67:
            { return ValaTypes.BASE;
            }
          // fall through
          case 205: break;
          case 68:
            { return ValaTypes.BOOL;
            }
          // fall through
          case 206: break;
          case 69:
            { return ValaTypes.CASE;
            }
          // fall through
          case 207: break;
          case 70:
            { return ValaTypes.CHAR;
            }
          // fall through
          case 208: break;
          case 71:
            { return ValaTypes.ELSE;
            }
          // fall through
          case 209: break;
          case 72:
            { return ValaTypes.ENUM;
            }
          // fall through
          case 210: break;
          case 73:
            { return ValaTypes.INT8;
            }
          // fall through
          case 211: break;
          case 74:
            { return ValaTypes.LOCK;
            }
          // fall through
          case 212: break;
          case 75:
            { return ValaTypes.LONG;
            }
          // fall through
          case 213: break;
          case 76:
            { return ValaTypes.NULL;
            }
          // fall through
          case 214: break;
          case 77:
            { return ValaTypes.THIS;
            }
          // fall through
          case 215: break;
          case 78:
            { return ValaTypes.TRUE;
            }
          // fall through
          case 216: break;
          case 79:
            { return ValaTypes.UINT;
            }
          // fall through
          case 217: break;
          case 80:
            { return ValaTypes.VOID;
            }
          // fall through
          case 218: break;
          case 81:
            { return ValaTypes.WEAK;
            }
          // fall through
          case 219: break;
          case 82:
            { return ValaTypes.DOC_COMMENT;
            }
          // fall through
          case 220: break;
          case 83:
            { return ValaTypes.CCODE;
            }
          // fall through
          case 221: break;
          case 84:
            { return ValaTypes.ASYNC;
            }
          // fall through
          case 222: break;
          case 85:
            { return ValaTypes.BREAK;
            }
          // fall through
          case 223: break;
          case 86:
            { return ValaTypes.CATCH;
            }
          // fall through
          case 224: break;
          case 87:
            { return ValaTypes.CLASS;
            }
          // fall through
          case 225: break;
          case 88:
            { return ValaTypes.CONST;
            }
          // fall through
          case 226: break;
          case 89:
            { return ValaTypes.FALSE;
            }
          // fall through
          case 227: break;
          case 90:
            { return ValaTypes.FLOAT;
            }
          // fall through
          case 228: break;
          case 91:
            { return ValaTypes.INT16;
            }
          // fall through
          case 229: break;
          case 92:
            { return ValaTypes.INT32;
            }
          // fall through
          case 230: break;
          case 93:
            { return ValaTypes.INT64;
            }
          // fall through
          case 231: break;
          case 94:
            { return ValaTypes.OWNED;
            }
          // fall through
          case 232: break;
          case 95:
            { return ValaTypes.SHORT;
            }
          // fall through
          case 233: break;
          case 96:
            { return ValaTypes.THROW;
            }
          // fall through
          case 234: break;
          case 97:
            { return ValaTypes.UCHAR;
            }
          // fall through
          case 235: break;
          case 98:
            { return ValaTypes.UINT8;
            }
          // fall through
          case 236: break;
          case 99:
            { return ValaTypes.ULONG;
            }
          // fall through
          case 237: break;
          case 100:
            { return ValaTypes.USING;
            }
          // fall through
          case 238: break;
          case 101:
            { return ValaTypes.WHILE;
            }
          // fall through
          case 239: break;
          case 102:
            { return ValaTypes.YIELD;
            }
          // fall through
          case 240: break;
          case 103:
            { return ValaTypes.DOUBLE;
            }
          // fall through
          case 241: break;
          case 104:
            { return ValaTypes.EXTERN;
            }
          // fall through
          case 242: break;
          case 105:
            { return ValaTypes.PUBLIC;
            }
          // fall through
          case 243: break;
          case 106:
            { return ValaTypes.RETURN;
            }
          // fall through
          case 244: break;
          case 107:
            { return ValaTypes.SIGNAL;
            }
          // fall through
          case 245: break;
          case 108:
            { return ValaTypes.SIZE_T;
            }
          // fall through
          case 246: break;
          case 109:
            { return ValaTypes.STATIC;
            }
          // fall through
          case 247: break;
          case 110:
            { return ValaTypes.STRING;
            }
          // fall through
          case 248: break;
          case 111:
            { return ValaTypes.STRUCT;
            }
          // fall through
          case 249: break;
          case 112:
            { return ValaTypes.SWITCH;
            }
          // fall through
          case 250: break;
          case 113:
            { return ValaTypes.THROWS;
            }
          // fall through
          case 251: break;
          case 114:
            { return ValaTypes.UINT16;
            }
          // fall through
          case 252: break;
          case 115:
            { return ValaTypes.UINT32;
            }
          // fall through
          case 253: break;
          case 116:
            { return ValaTypes.UINT64;
            }
          // fall through
          case 254: break;
          case 117:
            { return ValaTypes.USHORT;
            }
          // fall through
          case 255: break;
          case 118:
            { return ValaTypes.VERSION;
            }
          // fall through
          case 256: break;
          case 119:
            { return ValaTypes.DEFAULT;
            }
          // fall through
          case 257: break;
          case 120:
            { return ValaTypes.ENSURES;
            }
          // fall through
          case 258: break;
          case 121:
            { return ValaTypes.FINALLY;
            }
          // fall through
          case 259: break;
          case 122:
            { return ValaTypes.FOREACH;
            }
          // fall through
          case 260: break;
          case 123:
            { return ValaTypes.PRIVATE;
            }
          // fall through
          case 261: break;
          case 124:
            { return ValaTypes.SSIZE_T;
            }
          // fall through
          case 262: break;
          case 125:
            { return ValaTypes.UNICHAR;
            }
          // fall through
          case 263: break;
          case 126:
            { return ValaTypes.UNOWNED;
            }
          // fall through
          case 264: break;
          case 127:
            { return ValaTypes.VIRTUAL;
            }
          // fall through
          case 265: break;
          case 128:
            { return ValaTypes.ABSTRACT;
            }
          // fall through
          case 266: break;
          case 129:
            { return ValaTypes.CONTINUE;
            }
          // fall through
          case 267: break;
          case 130:
            { return ValaTypes.DELEGATE;
            }
          // fall through
          case 268: break;
          case 131:
            { return ValaTypes.INTERNAL;
            }
          // fall through
          case 269: break;
          case 132:
            { return ValaTypes.OVERRIDE;
            }
          // fall through
          case 270: break;
          case 133:
            { return ValaTypes.REQUIRES;
            }
          // fall through
          case 271: break;
          case 134:
            { return ValaTypes.CONSTRUCT;
            }
          // fall through
          case 272: break;
          case 135:
            { return ValaTypes.INTERFACE;
            }
          // fall through
          case 273: break;
          case 136:
            { return ValaTypes.NAMESPACE;
            }
          // fall through
          case 274: break;
          case 137:
            { return ValaTypes.PROTECTED;
            }
          // fall through
          case 275: break;
          case 138:
            { return ValaTypes.ERRORDOMAIN;
            }
          // fall through
          case 276: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
