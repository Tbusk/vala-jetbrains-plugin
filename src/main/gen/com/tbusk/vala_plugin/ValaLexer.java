// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Vala.flex

package com.tbusk.vala_plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tbusk.vala_plugin.psi.ValaTypes;
import com.intellij.psi.TokenType;
import com.tbusk.vala_plugin.ValaTokenSets;
import com.tbusk.vala_plugin.psi.ValaTokenType;



import java.util.BitSet;

class ValaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\22\1\27\1\22\1\30\1\22"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\32\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\0\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\57\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\57\1\74\1\57"+
    "\1\75\1\76\1\77\1\100\6\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\23\27\1\34"+
    "\1\35\1\36\1\37\4\0\1\40\2\0\1\41\2\0"+
    "\1\42\1\17\2\0\2\43\11\27\1\44\5\27\1\45"+
    "\1\46\30\27\5\0\21\27\1\47\1\50\2\27\1\51"+
    "\16\27\1\52\7\27\1\53\4\27\4\0\1\54\1\55"+
    "\1\0\3\27\1\56\1\27\1\57\1\27\1\60\5\27"+
    "\1\61\1\27\1\62\6\27\1\63\1\27\1\64\1\27"+
    "\1\65\13\27\1\66\1\27\1\67\1\27\1\70\6\27"+
    "\1\71\2\27\1\54\1\0\1\72\3\0\2\27\1\73"+
    "\1\74\1\75\1\76\1\77\3\27\1\100\1\101\1\102"+
    "\1\27\1\103\1\104\1\105\3\27\1\106\4\27\1\107"+
    "\4\27\1\110\1\111\3\27\1\112\1\113\3\27\1\114"+
    "\1\27\1\115\1\116\1\72\1\27\1\117\3\27\1\120"+
    "\6\27\1\121\1\122\1\123\1\124\1\125\1\126\1\127"+
    "\1\130\1\131\2\27\1\132\4\27\1\133\1\134\3\27"+
    "\1\135\1\27\1\136\1\137\1\140\1\141\1\27\1\142"+
    "\2\27\1\143\1\27\1\144\1\145\1\146\1\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\303\0\u0145\0\303"+
    "\0\303\0\303\0\u0186\0\303\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\u01c7\0\u0208\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\303\0\u0249\0\303\0\303\0\303\0\u028a"+
    "\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf\0\u0410\0\u028a\0\u0451"+
    "\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659"+
    "\0\u069a\0\u06db\0\u071c\0\303\0\303\0\303\0\303\0\u075d"+
    "\0\u079e\0\u07df\0\u0145\0\303\0\u0820\0\u0186\0\303\0\u0861"+
    "\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u0249\0\u09e7\0\u0a28"+
    "\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30"+
    "\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u028a\0\u0df7"+
    "\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff"+
    "\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207"+
    "\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f"+
    "\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617"+
    "\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f"+
    "\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27"+
    "\0\u1a68\0\u1aa9\0\u028a\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee"+
    "\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6"+
    "\0\u1e37\0\u028a\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd"+
    "\0\u1ffe\0\u028a\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184"+
    "\0\u21c5\0\u2206\0\u2247\0\303\0\u2288\0\u22c9\0\u230a\0\u234b"+
    "\0\u028a\0\u238c\0\u028a\0\u23cd\0\u028a\0\u240e\0\u244f\0\u2490"+
    "\0\u24d1\0\u2512\0\u028a\0\u2553\0\u028a\0\u2594\0\u25d5\0\u2616"+
    "\0\u2657\0\u2698\0\u26d9\0\u028a\0\u271a\0\u028a\0\u275b\0\u028a"+
    "\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963"+
    "\0\u29a4\0\u29e5\0\u2a26\0\u028a\0\u2a67\0\u028a\0\u2aa8\0\u2ae9"+
    "\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u028a\0\u2cb0"+
    "\0\u2cf1\0\303\0\u2d32\0\u14d2\0\u2247\0\u2d73\0\u2db4\0\u2df5"+
    "\0\u2e36\0\u028a\0\u028a\0\u028a\0\u028a\0\u2e77\0\u2eb8\0\u2ef9"+
    "\0\u2f3a\0\u028a\0\u028a\0\u028a\0\u2f7b\0\u028a\0\u028a\0\u028a"+
    "\0\u2fbc\0\u2ffd\0\u303e\0\u028a\0\u307f\0\u30c0\0\u3101\0\u3142"+
    "\0\u028a\0\u3183\0\u31c4\0\u3205\0\u3246\0\u028a\0\u028a\0\u3287"+
    "\0\u32c8\0\u3309\0\u028a\0\u028a\0\u334a\0\u338b\0\u33cc\0\u028a"+
    "\0\u340d\0\u028a\0\u028a\0\303\0\u344e\0\u028a\0\u348f\0\u34d0"+
    "\0\u3511\0\u028a\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656\0\u3697"+
    "\0\u028a\0\u028a\0\u028a\0\u028a\0\u028a\0\u028a\0\u028a\0\u028a"+
    "\0\u028a\0\u36d8\0\u3719\0\u028a\0\u375a\0\u379b\0\u37dc\0\u381d"+
    "\0\u028a\0\u028a\0\u385e\0\u389f\0\u38e0\0\u028a\0\u3921\0\u028a"+
    "\0\u028a\0\u028a\0\u028a\0\u3962\0\u028a\0\u39a3\0\u39e4\0\u028a"+
    "\0\u3a25\0\u028a\0\u028a\0\u028a\0\u028a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\7\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\4\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\2\47\1\50\2\47"+
    "\1\51\1\47\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\40\0\1\70\4\0\30\70\36\0\1\71\42\0\1\72"+
    "\105\0\2\5\76\0\5\73\1\74\34\73\1\75\36\73"+
    "\11\76\1\77\30\76\1\100\36\76\14\0\1\101\4\0"+
    "\1\102\77\0\1\103\1\0\7\24\51\0\1\104\10\0"+
    "\1\105\7\0\7\106\7\0\1\107\4\0\1\34\27\47"+
    "\5\0\1\104\10\0\1\105\7\0\7\47\7\0\1\47"+
    "\4\0\30\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\2\47\1\110\17\47\1\111\5\47"+
    "\5\0\1\104\10\0\1\105\7\0\7\47\7\0\1\47"+
    "\4\0\17\47\1\112\1\47\1\113\6\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\1\47"+
    "\1\114\6\47\1\115\3\47\1\116\2\47\1\117\10\47"+
    "\5\0\1\104\10\0\1\105\7\0\7\47\7\0\1\47"+
    "\4\0\5\47\1\120\11\47\1\121\10\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\14\47"+
    "\1\122\1\47\1\123\11\47\5\0\1\104\10\0\1\105"+
    "\7\0\7\47\7\0\1\47\4\0\1\47\1\124\12\47"+
    "\1\125\2\47\1\126\10\47\5\0\1\104\10\0\1\105"+
    "\7\0\7\47\7\0\1\47\4\0\6\47\1\127\7\47"+
    "\1\130\11\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\17\47\1\131\10\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\1\47"+
    "\1\132\3\47\1\133\16\47\1\134\3\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\25\47"+
    "\1\135\1\136\1\47\5\0\1\104\10\0\1\105\7\0"+
    "\7\47\7\0\1\47\4\0\21\47\1\137\2\47\1\140"+
    "\3\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\5\47\1\141\22\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\10\47\1\142"+
    "\12\47\1\143\2\47\1\144\1\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\10\47\1\145"+
    "\10\47\1\146\6\47\5\0\1\104\10\0\1\105\7\0"+
    "\7\47\7\0\1\47\4\0\3\47\1\147\5\47\1\150"+
    "\2\47\1\151\1\47\1\152\3\47\1\153\5\47\5\0"+
    "\1\104\10\0\1\105\7\0\7\47\7\0\1\47\4\0"+
    "\1\47\1\154\7\47\1\155\5\47\1\156\10\47\5\0"+
    "\1\104\10\0\1\105\7\0\7\47\7\0\1\47\4\0"+
    "\10\47\1\157\17\47\5\0\1\104\10\0\1\105\7\0"+
    "\7\47\7\0\1\47\4\0\11\47\1\160\16\47\26\0"+
    "\7\70\7\0\1\70\4\0\30\70\5\0\1\71\11\0"+
    "\1\161\66\0\1\72\33\0\1\162\43\0\2\73\2\0"+
    "\75\73\2\76\2\0\75\76\14\163\1\164\64\163\2\102"+
    "\1\0\76\102\22\0\7\103\51\0\1\104\10\0\1\105"+
    "\66\0\13\105\1\165\65\105\1\0\1\104\10\0\1\105"+
    "\7\0\7\107\7\0\1\107\4\0\1\107\27\47\5\0"+
    "\1\104\10\0\1\105\7\0\7\47\7\0\1\47\4\0"+
    "\22\47\1\166\5\47\5\0\1\104\10\0\1\105\7\0"+
    "\7\47\7\0\1\47\4\0\22\47\1\167\4\47\1\170"+
    "\5\0\1\104\10\0\1\105\7\0\7\47\7\0\1\47"+
    "\4\0\17\47\1\171\10\47\5\0\1\104\10\0\1\105"+
    "\7\0\7\47\7\0\1\47\4\0\5\47\1\172\22\47"+
    "\5\0\1\104\10\0\1\105\7\0\7\47\7\0\1\47"+
    "\4\0\22\47\1\173\1\174\4\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\1\47\1\175"+
    "\26\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\1\47\1\176\26\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\16\47\1\177"+
    "\11\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\6\47\1\200\21\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\24\47\1\201"+
    "\3\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\22\47\1\202\5\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\4\47\1\203"+
    "\17\47\1\204\3\47\5\0\1\104\10\0\1\105\7\0"+
    "\7\47\7\0\1\47\4\0\14\47\1\205\13\47\5\0"+
    "\1\104\10\0\1\105\7\0\7\47\7\0\1\47\4\0"+
    "\17\47\1\206\10\47\5\0\1\104\10\0\1\105\7\0"+
    "\7\47\7\0\1\47\4\0\21\47\1\207\6\47\5\0"+
    "\1\104\10\0\1\105\7\0\7\47\7\0\1\47\4\0"+
    "\23\47\1\210\4\47\5\0\1\104\10\0\1\105\7\0"+
    "\7\47\7\0\1\47\4\0\16\47\1\211\11\47\5\0"+
    "\1\104\10\0\1\105\7\0\7\47\7\0\1\47\4\0"+
    "\15\47\1\212\12\47\5\0\1\104\10\0\1\105\7\0"+
    "\7\47\7\0\1\47\4\0\26\47\1\213\1\47\5\0"+
    "\1\104\10\0\1\105\7\0\7\47\7\0\1\47\4\0"+
    "\14\47\1\214\13\47\5\0\1\104\10\0\1\105\7\0"+
    "\7\47\7\0\1\47\4\0\5\47\1\215\22\47\5\0"+
    "\1\104\10\0\1\105\7\0\7\47\7\0\1\47\4\0"+
    "\16\47\1\216\11\47\5\0\1\104\10\0\1\105\7\0"+
    "\7\47\7\0\1\47\4\0\11\47\1\217\5\47\1\220"+
    "\10\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\2\47\1\221\25\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\23\47\1\222"+
    "\4\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\17\47\1\223\10\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\1\47\1\224"+
    "\17\47\1\225\6\47\5\0\1\104\10\0\1\105\7\0"+
    "\7\47\7\0\1\47\4\0\11\47\1\226\16\47\5\0"+
    "\1\104\10\0\1\105\7\0\7\47\7\0\1\47\4\0"+
    "\11\47\1\227\7\47\1\230\6\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\24\47\1\231"+
    "\2\47\1\232\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\10\47\1\233\17\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\16\47"+
    "\1\234\11\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\17\47\1\235\10\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\11\47"+
    "\1\236\5\47\1\237\10\47\5\0\1\104\10\0\1\105"+
    "\7\0\7\47\7\0\1\47\4\0\10\47\1\240\1\241"+
    "\16\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\21\47\1\242\6\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\21\47\1\243"+
    "\6\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\11\47\1\244\16\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\11\47\1\245"+
    "\16\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\5\47\1\246\22\47\4\0\12\161\1\247"+
    "\1\0\65\161\34\0\1\71\44\0\14\163\1\250\64\163"+
    "\14\251\1\252\4\251\1\253\57\251\1\0\1\165\30\0"+
    "\1\254\1\0\1\255\45\0\1\104\10\0\1\105\7\0"+
    "\7\47\7\0\1\47\4\0\23\47\1\256\4\47\5\0"+
    "\1\104\10\0\1\105\7\0\7\47\7\0\1\47\4\0"+
    "\5\47\1\257\22\47\5\0\1\104\10\0\1\105\7\0"+
    "\7\47\7\0\1\47\4\0\16\47\1\260\11\47\5\0"+
    "\1\104\10\0\1\105\7\0\7\47\7\0\1\47\4\0"+
    "\14\47\1\261\13\47\5\0\1\104\10\0\1\105\7\0"+
    "\7\47\7\0\1\47\4\0\1\47\1\262\26\47\5\0"+
    "\1\104\10\0\1\105\7\0\7\47\7\0\1\47\4\0"+
    "\5\47\1\263\22\47\5\0\1\104\10\0\1\105\7\0"+
    "\7\47\7\0\1\47\4\0\3\47\1\264\24\47\5\0"+
    "\1\104\10\0\1\105\7\0\7\47\7\0\1\47\4\0"+
    "\21\47\1\265\6\47\5\0\1\104\10\0\1\105\7\0"+
    "\7\47\7\0\1\47\4\0\22\47\1\266\5\47\5\0"+
    "\1\104\10\0\1\105\7\0\7\47\7\0\1\47\4\0"+
    "\22\47\1\267\1\270\4\47\5\0\1\104\10\0\1\105"+
    "\7\0\7\47\7\0\1\47\4\0\1\47\1\271\26\47"+
    "\5\0\1\104\10\0\1\105\7\0\7\47\7\0\1\47"+
    "\4\0\2\47\1\272\25\47\5\0\1\104\10\0\1\105"+
    "\7\0\7\47\7\0\1\47\4\0\5\47\1\273\22\47"+
    "\5\0\1\104\10\0\1\105\7\0\7\47\7\0\1\47"+
    "\4\0\11\47\1\274\16\47\5\0\1\104\10\0\1\105"+
    "\7\0\7\47\7\0\1\47\4\0\15\47\1\275\12\47"+
    "\5\0\1\104\10\0\1\105\7\0\7\47\7\0\1\47"+
    "\4\0\22\47\1\276\5\47\5\0\1\104\10\0\1\105"+
    "\7\0\7\47\7\0\1\47\4\0\1\47\1\277\26\47"+
    "\5\0\1\104\10\0\1\105\7\0\7\47\7\0\1\47"+
    "\4\0\5\47\1\300\22\47\5\0\1\104\10\0\1\105"+
    "\7\0\1\47\1\301\1\47\1\302\1\47\1\303\1\304"+
    "\7\0\1\47\4\0\5\47\1\305\22\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\7\47"+
    "\1\306\20\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\5\47\1\307\22\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\14\47"+
    "\1\310\13\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\21\47\1\311\6\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\5\47"+
    "\1\312\22\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\25\47\1\313\2\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\23\47"+
    "\1\314\4\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\14\47\1\315\13\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\24\47"+
    "\1\316\3\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\21\47\1\317\6\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\23\47"+
    "\1\320\4\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\11\47\1\321\12\47\1\322\3\47"+
    "\5\0\1\104\10\0\1\105\7\0\7\47\7\0\1\47"+
    "\4\0\23\47\1\323\4\47\5\0\1\104\10\0\1\105"+
    "\7\0\7\47\7\0\1\47\4\0\22\47\1\324\5\47"+
    "\5\0\1\104\10\0\1\105\7\0\7\47\7\0\1\47"+
    "\4\0\17\47\1\325\10\47\5\0\1\104\10\0\1\105"+
    "\7\0\7\47\7\0\1\47\4\0\5\47\1\326\22\47"+
    "\5\0\1\104\10\0\1\105\7\0\7\47\7\0\1\47"+
    "\4\0\1\47\1\327\26\47\5\0\1\104\10\0\1\105"+
    "\7\0\7\47\7\0\1\47\4\0\23\47\1\330\4\47"+
    "\5\0\1\104\10\0\1\105\7\0\7\47\7\0\1\47"+
    "\4\0\16\47\1\331\11\47\5\0\1\104\10\0\1\105"+
    "\7\0\7\47\7\0\1\47\4\0\3\47\1\332\24\47"+
    "\5\0\1\104\10\0\1\105\7\0\7\47\7\0\1\47"+
    "\4\0\26\47\1\333\1\47\5\0\1\104\10\0\1\105"+
    "\7\0\7\47\7\0\1\47\4\0\17\47\1\334\10\47"+
    "\5\0\1\104\10\0\1\105\7\0\7\47\7\0\1\47"+
    "\4\0\16\47\1\335\11\47\5\0\1\104\10\0\1\105"+
    "\7\0\7\47\7\0\1\47\4\0\23\47\1\336\4\47"+
    "\5\0\1\104\10\0\1\105\7\0\7\47\7\0\1\47"+
    "\4\0\4\47\1\337\23\47\5\0\1\104\10\0\1\105"+
    "\7\0\7\47\7\0\1\47\4\0\14\47\1\340\13\47"+
    "\5\0\1\104\10\0\1\105\7\0\7\47\7\0\1\47"+
    "\4\0\14\47\1\341\13\47\4\0\1\161\1\247\10\161"+
    "\1\247\1\0\65\161\21\163\1\342\57\163\14\251\1\343"+
    "\100\251\1\343\4\251\1\344\57\251\14\345\1\346\64\345"+
    "\35\0\1\347\44\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\21\47\1\350\6\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\21\47"+
    "\1\351\6\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\3\47\1\352\24\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\13\47"+
    "\1\353\14\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\10\47\1\354\17\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\22\47"+
    "\1\355\5\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\23\47\1\356\4\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\11\47"+
    "\1\357\16\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\24\47\1\360\3\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\14\47"+
    "\1\361\13\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\6\47\1\362\21\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\5\47"+
    "\1\363\22\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\23\47\1\364\4\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\1\47"+
    "\1\365\26\47\5\0\1\104\10\0\1\105\7\0\5\47"+
    "\1\366\1\47\7\0\1\47\4\0\30\47\5\0\1\104"+
    "\10\0\1\105\7\0\2\47\1\367\4\47\7\0\1\47"+
    "\4\0\30\47\5\0\1\104\10\0\1\105\7\0\4\47"+
    "\1\370\2\47\7\0\1\47\4\0\30\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\21\47"+
    "\1\371\6\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\22\47\1\372\5\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\21\47"+
    "\1\373\6\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\4\47\1\374\23\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\1\47"+
    "\1\375\26\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\5\47\1\376\22\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\11\47"+
    "\1\377\16\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\21\47\1\u0100\6\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\23\47"+
    "\1\u0101\4\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\11\47\1\u0102\16\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\16\47"+
    "\1\u0103\11\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\3\47\1\u0104\24\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\3\47"+
    "\1\u0105\24\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\26\47\1\u0106\1\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\21\47"+
    "\1\u0107\6\47\5\0\1\104\10\0\1\105\7\0\1\47"+
    "\1\u0108\1\47\1\u0109\1\47\1\u010a\1\u010b\7\0\1\47"+
    "\4\0\30\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\7\47\1\u010c\20\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\10\47"+
    "\1\u010d\17\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\16\47\1\u010e\11\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\21\47"+
    "\1\u010f\6\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\7\47\1\u0110\20\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\24\47"+
    "\1\u0111\3\47\5\0\1\104\10\0\1\105\7\0\7\47"+
    "\7\0\1\47\4\0\5\47\1\u0112\22\47\5\0\1\104"+
    "\10\0\1\105\7\0\7\47\7\0\1\47\4\0\4\47"+
    "\1\u0113\23\47\4\0\14\251\1\252\4\251\1\u0114\57\251"+
    "\14\345\1\346\4\345\1\u0114\57\345\1\0\1\347\73\0"+
    "\1\254\4\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\1\47\1\u0115\26\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\23\47\1\u0116"+
    "\4\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\21\47\1\u0117\6\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\16\47\1\u0118"+
    "\11\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\14\47\1\u0119\13\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\5\47\1\u011a"+
    "\22\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\3\47\1\u011b\24\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\6\47\1\u011c"+
    "\21\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\20\47\1\u011d\7\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\11\47\1\u011e"+
    "\16\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\23\47\1\u011f\4\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\3\47\1\u0120"+
    "\24\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\3\47\1\u0121\24\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\16\47\1\u0122"+
    "\11\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\3\47\1\u0123\24\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\7\47\1\u0124"+
    "\20\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\23\47\1\u0125\4\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\10\47\1\u0126"+
    "\17\47\5\0\1\104\10\0\1\105\7\0\5\47\1\u0127"+
    "\1\47\7\0\1\47\4\0\30\47\5\0\1\104\10\0"+
    "\1\105\7\0\2\47\1\u0128\4\47\7\0\1\47\4\0"+
    "\30\47\5\0\1\104\10\0\1\105\7\0\4\47\1\u0129"+
    "\2\47\7\0\1\47\4\0\30\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\1\47\1\u012a"+
    "\26\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\5\47\1\u012b\22\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\23\47\1\u012c"+
    "\4\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\1\47\1\u012d\26\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\3\47\1\u012e"+
    "\24\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\24\47\1\u012f\3\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\24\47\1\u0130"+
    "\3\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\23\47\1\u0131\4\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\10\47\1\u0132"+
    "\17\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\1\47\1\u0133\26\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\1\47\1\u0134"+
    "\26\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\4\47\1\u0135\23\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\5\47\1\u0136"+
    "\22\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\23\47\1\u0137\4\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\21\47\1\u0138"+
    "\6\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\4\47\1\u0139\23\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\14\47\1\u013a"+
    "\13\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\23\47\1\u013b\4\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\3\47\1\u013c"+
    "\24\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\5\47\1\u013d\22\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\3\47\1\u013e"+
    "\24\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\3\47\1\u013f\24\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\5\47\1\u0140"+
    "\22\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\5\47\1\u0141\22\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\23\47\1\u0142"+
    "\4\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\5\47\1\u0143\22\47\5\0\1\104\10\0"+
    "\1\105\7\0\7\47\7\0\1\47\4\0\5\47\1\u0144"+
    "\22\47\5\0\1\104\10\0\1\105\7\0\7\47\7\0"+
    "\1\47\4\0\4\47\1\u0145\23\47\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14950];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\3\11\1\1\7\11"+
    "\2\1\7\11\1\1\3\11\24\1\4\11\1\1\3\0"+
    "\1\11\2\0\1\11\2\0\2\1\2\0\53\1\5\0"+
    "\62\1\3\0\1\1\1\11\1\0\64\1\1\11\1\0"+
    "\1\1\3\0\54\1\1\11\61\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private BitSet zzFin = null;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ValaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 104: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 105: break;
          case 3:
            { return ValaTypes.EXCLAMATION;
            }
          // fall through
          case 106: break;
          case 4:
            { return ValaTypes.POUND;
            }
          // fall through
          case 107: break;
          case 5:
            { return ValaTypes.PERCENT;
            }
          // fall through
          case 108: break;
          case 6:
            { return ValaTypes.AND;
            }
          // fall through
          case 109: break;
          case 7:
            { return ValaTypes.LPAREN;
            }
          // fall through
          case 110: break;
          case 8:
            { return ValaTypes.RPAREN;
            }
          // fall through
          case 111: break;
          case 9:
            { return ValaTypes.STAR;
            }
          // fall through
          case 112: break;
          case 10:
            { return ValaTypes.PLUS;
            }
          // fall through
          case 113: break;
          case 11:
            { return ValaTypes.COMMA;
            }
          // fall through
          case 114: break;
          case 12:
            { return ValaTypes.MINUS;
            }
          // fall through
          case 115: break;
          case 13:
            { return ValaTypes.DOT;
            }
          // fall through
          case 116: break;
          case 14:
            { return ValaTypes.FORWARD_SLASH;
            }
          // fall through
          case 117: break;
          case 15:
            { return ValaTypes.NUMBER;
            }
          // fall through
          case 118: break;
          case 16:
            { return ValaTypes.COLON;
            }
          // fall through
          case 119: break;
          case 17:
            { return ValaTypes.SEMICOLON;
            }
          // fall through
          case 120: break;
          case 18:
            { return ValaTypes.LESS_THAN;
            }
          // fall through
          case 121: break;
          case 19:
            { return ValaTypes.EQUALS;
            }
          // fall through
          case 122: break;
          case 20:
            { return ValaTypes.GREATER_THAN;
            }
          // fall through
          case 123: break;
          case 21:
            { return ValaTypes.QUESTION_MARK;
            }
          // fall through
          case 124: break;
          case 22:
            { return ValaTypes.AT;
            }
          // fall through
          case 125: break;
          case 23:
            { return ValaTypes.IDENTIFIER;
            }
          // fall through
          case 126: break;
          case 24:
            { return ValaTypes.LBRACKET;
            }
          // fall through
          case 127: break;
          case 25:
            { return ValaTypes.RBRACKET;
            }
          // fall through
          case 128: break;
          case 26:
            { return ValaTypes.CARET;
            }
          // fall through
          case 129: break;
          case 27:
            { return ValaTypes.UNDERSCORE;
            }
          // fall through
          case 130: break;
          case 28:
            { return ValaTypes.LBRACE;
            }
          // fall through
          case 131: break;
          case 29:
            { return ValaTypes.PIPE;
            }
          // fall through
          case 132: break;
          case 30:
            { return ValaTypes.RBRACE;
            }
          // fall through
          case 133: break;
          case 31:
            { return ValaTypes.TILDE;
            }
          // fall through
          case 134: break;
          case 32:
            { return ValaTypes.STRING_LITERAL;
            }
          // fall through
          case 135: break;
          case 33:
            { return ValaTypes.CHAR_LITERAL;
            }
          // fall through
          case 136: break;
          case 34:
            { return ValaTypes.COMMENT;
            }
          // fall through
          case 137: break;
          case 35:
            { return ValaTypes.CONSTANT;
            }
          // fall through
          case 138: break;
          case 36:
            { return ValaTypes.DO;
            }
          // fall through
          case 139: break;
          case 37:
            { return ValaTypes.IF;
            }
          // fall through
          case 140: break;
          case 38:
            { return ValaTypes.IN;
            }
          // fall through
          case 141: break;
          case 39:
            { return ValaTypes.FOR;
            }
          // fall through
          case 142: break;
          case 40:
            { return ValaTypes.INT;
            }
          // fall through
          case 143: break;
          case 41:
            { return ValaTypes.NEW;
            }
          // fall through
          case 144: break;
          case 42:
            { return ValaTypes.TRY;
            }
          // fall through
          case 145: break;
          case 43:
            { return ValaTypes.VAR;
            }
          // fall through
          case 146: break;
          case 44:
            { return ValaTypes.BLOCK_COMMENT;
            }
          // fall through
          case 147: break;
          case 45:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 1;
              int zzFPos = zzStartRead;
              if (zzFin == null || zzFin.size() <= zzBufferL.length()) {
                zzFin = new BitSet(zzBufferL.length()+1);
              }
              BitSet zzFinL = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL.set(zzFPos, ((zzAttrL[zzFState] & 1) == 1));
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL.set(zzFPos++, ((zzAttrL[zzFState] & 1) == 1));
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL.clear(zzFPos++);
              }

              zzFState = 2;
              zzFPos = zzMarkedPos;
              while (!zzFinL.get(zzFPos) || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { String text = yytext().toString();

              if(!ValaTokenSets.KEYWORDS_STRINGS.contains(text)) {
                  return ValaTypes.METHOD_CALL;
              }
            }
          // fall through
          case 148: break;
          case 46:
            { return ValaTypes.BOOL;
            }
          // fall through
          case 149: break;
          case 47:
            { return ValaTypes.CASE;
            }
          // fall through
          case 150: break;
          case 48:
            { return ValaTypes.CHAR;
            }
          // fall through
          case 151: break;
          case 49:
            { return ValaTypes.ELSE;
            }
          // fall through
          case 152: break;
          case 50:
            { return ValaTypes.ENUM;
            }
          // fall through
          case 153: break;
          case 51:
            { return ValaTypes.INT8;
            }
          // fall through
          case 154: break;
          case 52:
            { return ValaTypes.LONG;
            }
          // fall through
          case 155: break;
          case 53:
            { return ValaTypes.NULL;
            }
          // fall through
          case 156: break;
          case 54:
            { return ValaTypes.THIS;
            }
          // fall through
          case 157: break;
          case 55:
            { return ValaTypes.TRUE;
            }
          // fall through
          case 158: break;
          case 56:
            { return ValaTypes.UINT;
            }
          // fall through
          case 159: break;
          case 57:
            { return ValaTypes.VOID;
            }
          // fall through
          case 160: break;
          case 58:
            { return ValaTypes.DOC_COMMENT;
            }
          // fall through
          case 161: break;
          case 59:
            { return ValaTypes.ASYNC;
            }
          // fall through
          case 162: break;
          case 60:
            { return ValaTypes.BREAK;
            }
          // fall through
          case 163: break;
          case 61:
            { return ValaTypes.CATCH;
            }
          // fall through
          case 164: break;
          case 62:
            { return ValaTypes.CLASS;
            }
          // fall through
          case 165: break;
          case 63:
            { return ValaTypes.CONST;
            }
          // fall through
          case 166: break;
          case 64:
            { return ValaTypes.ENDIF;
            }
          // fall through
          case 167: break;
          case 65:
            { return ValaTypes.FALSE;
            }
          // fall through
          case 168: break;
          case 66:
            { return ValaTypes.FLOAT;
            }
          // fall through
          case 169: break;
          case 67:
            { return ValaTypes.INT16;
            }
          // fall through
          case 170: break;
          case 68:
            { return ValaTypes.INT32;
            }
          // fall through
          case 171: break;
          case 69:
            { return ValaTypes.INT64;
            }
          // fall through
          case 172: break;
          case 70:
            { return ValaTypes.OWNED;
            }
          // fall through
          case 173: break;
          case 71:
            { return ValaTypes.SHORT;
            }
          // fall through
          case 174: break;
          case 72:
            { return ValaTypes.THROW;
            }
          // fall through
          case 175: break;
          case 73:
            { return ValaTypes.UCHAR;
            }
          // fall through
          case 176: break;
          case 74:
            { return ValaTypes.UINT8;
            }
          // fall through
          case 177: break;
          case 75:
            { return ValaTypes.ULONG;
            }
          // fall through
          case 178: break;
          case 76:
            { return ValaTypes.USING;
            }
          // fall through
          case 179: break;
          case 77:
            { return ValaTypes.WHILE;
            }
          // fall through
          case 180: break;
          case 78:
            { return ValaTypes.YIELD;
            }
          // fall through
          case 181: break;
          case 79:
            { return ValaTypes.ASSERT;
            }
          // fall through
          case 182: break;
          case 80:
            { return ValaTypes.DOUBLE;
            }
          // fall through
          case 183: break;
          case 81:
            { return ValaTypes.PUBLIC;
            }
          // fall through
          case 184: break;
          case 82:
            { return ValaTypes.RETURN;
            }
          // fall through
          case 185: break;
          case 83:
            { return ValaTypes.STATIC;
            }
          // fall through
          case 186: break;
          case 84:
            { return ValaTypes.STRING;
            }
          // fall through
          case 187: break;
          case 85:
            { return ValaTypes.STRUCT;
            }
          // fall through
          case 188: break;
          case 86:
            { return ValaTypes.SWITCH;
            }
          // fall through
          case 189: break;
          case 87:
            { return ValaTypes.UINT16;
            }
          // fall through
          case 190: break;
          case 88:
            { return ValaTypes.UINT32;
            }
          // fall through
          case 191: break;
          case 89:
            { return ValaTypes.UINT64;
            }
          // fall through
          case 192: break;
          case 90:
            { return ValaTypes.USHORT;
            }
          // fall through
          case 193: break;
          case 91:
            { return ValaTypes.DEFAULT;
            }
          // fall through
          case 194: break;
          case 92:
            { return ValaTypes.FOREACH;
            }
          // fall through
          case 195: break;
          case 93:
            { return ValaTypes.PRIVATE;
            }
          // fall through
          case 196: break;
          case 94:
            { return ValaTypes.UNICHAR;
            }
          // fall through
          case 197: break;
          case 95:
            { return ValaTypes.UNOWNED;
            }
          // fall through
          case 198: break;
          case 96:
            { return ValaTypes.VIRTUAL;
            }
          // fall through
          case 199: break;
          case 97:
            { return ValaTypes.ABSTRACT;
            }
          // fall through
          case 200: break;
          case 98:
            { return ValaTypes.CONTINUE;
            }
          // fall through
          case 201: break;
          case 99:
            { return ValaTypes.OVERRIDE;
            }
          // fall through
          case 202: break;
          case 100:
            { return ValaTypes.CONSTRUCT;
            }
          // fall through
          case 203: break;
          case 101:
            { return ValaTypes.INTERFACE;
            }
          // fall through
          case 204: break;
          case 102:
            { return ValaTypes.NAMESPACE;
            }
          // fall through
          case 205: break;
          case 103:
            { return ValaTypes.PROTECTED;
            }
          // fall through
          case 206: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
