// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Vala.flex

package com.tbusk.vala_plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tbusk.vala_plugin.psi.ValaTypes;
import com.intellij.psi.TokenType;
import com.tbusk.vala_plugin.psi.ValaTypes;


class ValaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\22\1\27\1\22\1\30\1\22"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\32\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\0\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\40"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\40\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\40\1\73\1\40"+
    "\1\74\1\75\1\76\1\77\6\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\22\27\1\34"+
    "\1\35\1\36\1\37\1\0\1\40\1\0\1\6\1\0"+
    "\1\41\2\0\1\42\1\17\11\27\1\43\5\27\1\44"+
    "\1\45\30\27\2\0\17\27\1\46\1\47\2\27\1\50"+
    "\15\27\1\51\7\27\1\52\4\27\3\0\1\53\2\27"+
    "\1\54\1\27\1\55\1\27\1\56\5\27\1\57\1\60"+
    "\6\27\1\61\1\27\1\62\1\27\1\63\14\27\1\64"+
    "\1\27\1\65\6\27\1\66\2\27\1\53\1\0\1\67"+
    "\2\0\1\27\1\70\1\71\1\72\1\73\1\74\3\27"+
    "\1\75\1\76\1\27\1\77\1\100\1\101\3\27\1\102"+
    "\4\27\1\103\4\27\1\104\1\105\3\27\1\106\1\107"+
    "\3\27\1\110\1\27\1\111\1\112\1\67\4\27\1\113"+
    "\6\27\1\114\1\115\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\1\124\2\27\1\125\4\27\1\126\1\127\3\27"+
    "\1\130\1\27\1\131\1\132\1\133\1\134\1\27\1\135"+
    "\2\27\1\136\1\27\1\137\1\140\1\141\1\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\100\0\300\0\100\0\100\0\u0100"+
    "\0\u0140\0\100\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\u0180\0\u01c0\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\100\0\u0200\0\100\0\100\0\100\0\100\0\u0240\0\u0280"+
    "\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480"+
    "\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680"+
    "\0\100\0\100\0\100\0\100\0\300\0\100\0\u06c0\0\100"+
    "\0\u0140\0\100\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840"+
    "\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40"+
    "\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0200\0\u0bc0\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00"+
    "\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000"+
    "\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200"+
    "\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400"+
    "\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600"+
    "\0\u1640\0\u1680\0\u16c0\0\u1700\0\u0200\0\u1740\0\u1780\0\u17c0"+
    "\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0"+
    "\0\u1a00\0\u1a40\0\u0200\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80"+
    "\0\u1bc0\0\u1c00\0\u0200\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40"+
    "\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u0200\0\u1ec0\0\u0200"+
    "\0\u1f00\0\u0200\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u0200"+
    "\0\u0200\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u0200"+
    "\0\u2200\0\u0200\0\u2240\0\u0200\0\u2280\0\u22c0\0\u2300\0\u2340"+
    "\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540"+
    "\0\u0200\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680\0\u26c0\0\u2700"+
    "\0\u2740\0\u0200\0\u2780\0\u27c0\0\100\0\u2800\0\u1200\0\u1e00"+
    "\0\u2840\0\u2880\0\u0200\0\u0200\0\u0200\0\u0200\0\u28c0\0\u2900"+
    "\0\u2940\0\u2980\0\u0200\0\u0200\0\u29c0\0\u0200\0\u0200\0\u0200"+
    "\0\u2a00\0\u2a40\0\u2a80\0\u0200\0\u2ac0\0\u2b00\0\u2b40\0\u2b80"+
    "\0\u0200\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u0200\0\u0200\0\u2cc0"+
    "\0\u2d00\0\u2d40\0\u0200\0\u0200\0\u2d80\0\u2dc0\0\u2e00\0\u0200"+
    "\0\u2e40\0\u0200\0\u0200\0\100\0\u2e80\0\u2ec0\0\u2f00\0\u2f40"+
    "\0\u0200\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0\0\u0200"+
    "\0\u0200\0\u0200\0\u0200\0\u0200\0\u0200\0\u0200\0\u0200\0\u0200"+
    "\0\u3100\0\u3140\0\u0200\0\u3180\0\u31c0\0\u3200\0\u3240\0\u0200"+
    "\0\u0200\0\u3280\0\u32c0\0\u3300\0\u0200\0\u3340\0\u0200\0\u0200"+
    "\0\u0200\0\u0200\0\u3380\0\u0200\0\u33c0\0\u3400\0\u0200\0\u3440"+
    "\0\u0200\0\u0200\0\u0200\0\u0200";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\7\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\2\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\2\32\1\45\1\32"+
    "\1\46\1\32\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\101\0\2\3\75\0\5\65\1\66\34\65\1\67\35\65"+
    "\10\0\1\70\67\0\11\71\1\72\30\71\1\73\35\71"+
    "\14\0\1\74\4\0\1\75\76\0\1\76\1\0\7\22"+
    "\71\0\7\32\7\0\1\32\4\0\27\32\26\0\7\32"+
    "\7\0\1\32\4\0\2\32\1\77\16\32\1\100\5\32"+
    "\26\0\7\32\7\0\1\32\4\0\16\32\1\101\1\32"+
    "\1\102\6\32\26\0\7\32\7\0\1\32\4\0\1\32"+
    "\1\103\6\32\1\104\2\32\1\105\2\32\1\106\10\32"+
    "\26\0\7\32\7\0\1\32\4\0\5\32\1\107\10\32"+
    "\1\110\10\32\26\0\7\32\7\0\1\32\4\0\13\32"+
    "\1\111\1\32\1\112\11\32\26\0\7\32\7\0\1\32"+
    "\4\0\1\32\1\113\11\32\1\114\2\32\1\115\10\32"+
    "\26\0\7\32\7\0\1\32\4\0\6\32\1\116\6\32"+
    "\1\117\11\32\26\0\7\32\7\0\1\32\4\0\16\32"+
    "\1\120\10\32\26\0\7\32\7\0\1\32\4\0\1\32"+
    "\1\121\3\32\1\122\15\32\1\123\3\32\26\0\7\32"+
    "\7\0\1\32\4\0\24\32\1\124\1\125\1\32\26\0"+
    "\7\32\7\0\1\32\4\0\20\32\1\126\2\32\1\127"+
    "\3\32\26\0\7\32\7\0\1\32\4\0\5\32\1\130"+
    "\21\32\26\0\7\32\7\0\1\32\4\0\10\32\1\131"+
    "\11\32\1\132\2\32\1\133\1\32\26\0\7\32\7\0"+
    "\1\32\4\0\10\32\1\134\7\32\1\135\6\32\26\0"+
    "\7\32\7\0\1\32\4\0\3\32\1\136\5\32\1\137"+
    "\1\32\1\140\1\32\1\141\3\32\1\142\5\32\26\0"+
    "\7\32\7\0\1\32\4\0\1\32\1\143\7\32\1\144"+
    "\4\32\1\145\10\32\26\0\7\32\7\0\1\32\4\0"+
    "\10\32\1\146\16\32\26\0\7\32\7\0\1\32\4\0"+
    "\11\32\1\147\15\32\4\0\2\65\2\0\74\65\2\71"+
    "\2\0\74\71\14\150\1\151\63\150\2\75\1\0\75\75"+
    "\22\0\7\76\71\0\7\32\7\0\1\32\4\0\21\32"+
    "\1\152\5\32\26\0\7\32\7\0\1\32\4\0\26\32"+
    "\1\153\26\0\7\32\7\0\1\32\4\0\16\32\1\154"+
    "\10\32\26\0\7\32\7\0\1\32\4\0\5\32\1\155"+
    "\21\32\26\0\7\32\7\0\1\32\4\0\21\32\1\156"+
    "\1\157\4\32\26\0\7\32\7\0\1\32\4\0\1\32"+
    "\1\160\25\32\26\0\7\32\7\0\1\32\4\0\1\32"+
    "\1\161\25\32\26\0\7\32\7\0\1\32\4\0\15\32"+
    "\1\162\11\32\26\0\7\32\7\0\1\32\4\0\6\32"+
    "\1\163\20\32\26\0\7\32\7\0\1\32\4\0\23\32"+
    "\1\164\3\32\26\0\7\32\7\0\1\32\4\0\21\32"+
    "\1\165\5\32\26\0\7\32\7\0\1\32\4\0\23\32"+
    "\1\166\3\32\26\0\7\32\7\0\1\32\4\0\13\32"+
    "\1\167\13\32\26\0\7\32\7\0\1\32\4\0\16\32"+
    "\1\170\10\32\26\0\7\32\7\0\1\32\4\0\20\32"+
    "\1\171\6\32\26\0\7\32\7\0\1\32\4\0\22\32"+
    "\1\172\4\32\26\0\7\32\7\0\1\32\4\0\15\32"+
    "\1\173\11\32\26\0\7\32\7\0\1\32\4\0\14\32"+
    "\1\174\12\32\26\0\7\32\7\0\1\32\4\0\25\32"+
    "\1\175\1\32\26\0\7\32\7\0\1\32\4\0\13\32"+
    "\1\176\13\32\26\0\7\32\7\0\1\32\4\0\5\32"+
    "\1\177\21\32\26\0\7\32\7\0\1\32\4\0\15\32"+
    "\1\200\11\32\26\0\7\32\7\0\1\32\4\0\11\32"+
    "\1\201\4\32\1\202\10\32\26\0\7\32\7\0\1\32"+
    "\4\0\2\32\1\203\24\32\26\0\7\32\7\0\1\32"+
    "\4\0\22\32\1\204\4\32\26\0\7\32\7\0\1\32"+
    "\4\0\16\32\1\205\10\32\26\0\7\32\7\0\1\32"+
    "\4\0\1\32\1\206\16\32\1\207\6\32\26\0\7\32"+
    "\7\0\1\32\4\0\11\32\1\210\15\32\26\0\7\32"+
    "\7\0\1\32\4\0\20\32\1\211\6\32\26\0\7\32"+
    "\7\0\1\32\4\0\23\32\1\212\2\32\1\213\26\0"+
    "\7\32\7\0\1\32\4\0\10\32\1\214\16\32\26\0"+
    "\7\32\7\0\1\32\4\0\15\32\1\215\11\32\26\0"+
    "\7\32\7\0\1\32\4\0\16\32\1\216\10\32\26\0"+
    "\7\32\7\0\1\32\4\0\11\32\1\217\4\32\1\220"+
    "\10\32\26\0\7\32\7\0\1\32\4\0\10\32\1\221"+
    "\1\222\15\32\26\0\7\32\7\0\1\32\4\0\20\32"+
    "\1\223\6\32\26\0\7\32\7\0\1\32\4\0\20\32"+
    "\1\224\6\32\26\0\7\32\7\0\1\32\4\0\11\32"+
    "\1\225\15\32\26\0\7\32\7\0\1\32\4\0\11\32"+
    "\1\226\15\32\26\0\7\32\7\0\1\32\4\0\5\32"+
    "\1\227\21\32\4\0\14\150\1\230\63\150\14\231\1\232"+
    "\4\231\1\233\56\231\22\0\7\32\7\0\1\32\4\0"+
    "\22\32\1\234\4\32\26\0\7\32\7\0\1\32\4\0"+
    "\15\32\1\235\11\32\26\0\7\32\7\0\1\32\4\0"+
    "\13\32\1\236\13\32\26\0\7\32\7\0\1\32\4\0"+
    "\1\32\1\237\25\32\26\0\7\32\7\0\1\32\4\0"+
    "\5\32\1\240\21\32\26\0\7\32\7\0\1\32\4\0"+
    "\3\32\1\241\23\32\26\0\7\32\7\0\1\32\4\0"+
    "\20\32\1\242\6\32\26\0\7\32\7\0\1\32\4\0"+
    "\21\32\1\243\5\32\26\0\7\32\7\0\1\32\4\0"+
    "\21\32\1\244\1\245\4\32\26\0\7\32\7\0\1\32"+
    "\4\0\1\32\1\246\25\32\26\0\7\32\7\0\1\32"+
    "\4\0\2\32\1\247\24\32\26\0\7\32\7\0\1\32"+
    "\4\0\5\32\1\250\21\32\26\0\7\32\7\0\1\32"+
    "\4\0\14\32\1\251\12\32\26\0\7\32\7\0\1\32"+
    "\4\0\21\32\1\252\5\32\26\0\7\32\7\0\1\32"+
    "\4\0\1\32\1\253\25\32\26\0\7\32\7\0\1\32"+
    "\4\0\5\32\1\254\21\32\26\0\1\32\1\255\1\32"+
    "\1\256\1\32\1\257\1\260\7\0\1\32\4\0\5\32"+
    "\1\261\21\32\26\0\7\32\7\0\1\32\4\0\7\32"+
    "\1\262\17\32\26\0\7\32\7\0\1\32\4\0\5\32"+
    "\1\263\21\32\26\0\7\32\7\0\1\32\4\0\13\32"+
    "\1\264\13\32\26\0\7\32\7\0\1\32\4\0\20\32"+
    "\1\265\6\32\26\0\7\32\7\0\1\32\4\0\5\32"+
    "\1\266\21\32\26\0\7\32\7\0\1\32\4\0\24\32"+
    "\1\267\2\32\26\0\7\32\7\0\1\32\4\0\22\32"+
    "\1\270\4\32\26\0\7\32\7\0\1\32\4\0\13\32"+
    "\1\271\13\32\26\0\7\32\7\0\1\32\4\0\23\32"+
    "\1\272\3\32\26\0\7\32\7\0\1\32\4\0\20\32"+
    "\1\273\6\32\26\0\7\32\7\0\1\32\4\0\22\32"+
    "\1\274\4\32\26\0\7\32\7\0\1\32\4\0\11\32"+
    "\1\275\11\32\1\276\3\32\26\0\7\32\7\0\1\32"+
    "\4\0\22\32\1\277\4\32\26\0\7\32\7\0\1\32"+
    "\4\0\16\32\1\300\10\32\26\0\7\32\7\0\1\32"+
    "\4\0\5\32\1\301\21\32\26\0\7\32\7\0\1\32"+
    "\4\0\1\32\1\302\25\32\26\0\7\32\7\0\1\32"+
    "\4\0\22\32\1\303\4\32\26\0\7\32\7\0\1\32"+
    "\4\0\15\32\1\304\11\32\26\0\7\32\7\0\1\32"+
    "\4\0\3\32\1\305\23\32\26\0\7\32\7\0\1\32"+
    "\4\0\25\32\1\306\1\32\26\0\7\32\7\0\1\32"+
    "\4\0\16\32\1\307\10\32\26\0\7\32\7\0\1\32"+
    "\4\0\15\32\1\310\11\32\26\0\7\32\7\0\1\32"+
    "\4\0\22\32\1\311\4\32\26\0\7\32\7\0\1\32"+
    "\4\0\4\32\1\312\22\32\26\0\7\32\7\0\1\32"+
    "\4\0\13\32\1\313\13\32\26\0\7\32\7\0\1\32"+
    "\4\0\13\32\1\314\13\32\4\0\21\150\1\315\56\150"+
    "\14\231\1\316\77\231\1\316\4\231\1\317\56\231\14\320"+
    "\1\321\63\320\22\0\7\32\7\0\1\32\4\0\20\32"+
    "\1\322\6\32\26\0\7\32\7\0\1\32\4\0\3\32"+
    "\1\323\23\32\26\0\7\32\7\0\1\32\4\0\12\32"+
    "\1\324\14\32\26\0\7\32\7\0\1\32\4\0\10\32"+
    "\1\325\16\32\26\0\7\32\7\0\1\32\4\0\21\32"+
    "\1\326\5\32\26\0\7\32\7\0\1\32\4\0\22\32"+
    "\1\327\4\32\26\0\7\32\7\0\1\32\4\0\11\32"+
    "\1\330\15\32\26\0\7\32\7\0\1\32\4\0\23\32"+
    "\1\331\3\32\26\0\7\32\7\0\1\32\4\0\13\32"+
    "\1\332\13\32\26\0\7\32\7\0\1\32\4\0\5\32"+
    "\1\333\21\32\26\0\7\32\7\0\1\32\4\0\22\32"+
    "\1\334\4\32\26\0\7\32\7\0\1\32\4\0\1\32"+
    "\1\335\25\32\26\0\5\32\1\336\1\32\7\0\1\32"+
    "\4\0\27\32\26\0\2\32\1\337\4\32\7\0\1\32"+
    "\4\0\27\32\26\0\4\32\1\340\2\32\7\0\1\32"+
    "\4\0\27\32\26\0\7\32\7\0\1\32\4\0\20\32"+
    "\1\341\6\32\26\0\7\32\7\0\1\32\4\0\21\32"+
    "\1\342\5\32\26\0\7\32\7\0\1\32\4\0\20\32"+
    "\1\343\6\32\26\0\7\32\7\0\1\32\4\0\4\32"+
    "\1\344\22\32\26\0\7\32\7\0\1\32\4\0\1\32"+
    "\1\345\25\32\26\0\7\32\7\0\1\32\4\0\5\32"+
    "\1\346\21\32\26\0\7\32\7\0\1\32\4\0\11\32"+
    "\1\347\15\32\26\0\7\32\7\0\1\32\4\0\20\32"+
    "\1\350\6\32\26\0\7\32\7\0\1\32\4\0\22\32"+
    "\1\351\4\32\26\0\7\32\7\0\1\32\4\0\11\32"+
    "\1\352\15\32\26\0\7\32\7\0\1\32\4\0\15\32"+
    "\1\353\11\32\26\0\7\32\7\0\1\32\4\0\3\32"+
    "\1\354\23\32\26\0\7\32\7\0\1\32\4\0\3\32"+
    "\1\355\23\32\26\0\7\32\7\0\1\32\4\0\25\32"+
    "\1\356\1\32\26\0\7\32\7\0\1\32\4\0\20\32"+
    "\1\357\6\32\26\0\1\32\1\360\1\32\1\361\1\32"+
    "\1\362\1\363\7\0\1\32\4\0\27\32\26\0\7\32"+
    "\7\0\1\32\4\0\7\32\1\364\17\32\26\0\7\32"+
    "\7\0\1\32\4\0\10\32\1\365\16\32\26\0\7\32"+
    "\7\0\1\32\4\0\15\32\1\366\11\32\26\0\7\32"+
    "\7\0\1\32\4\0\20\32\1\367\6\32\26\0\7\32"+
    "\7\0\1\32\4\0\7\32\1\370\17\32\26\0\7\32"+
    "\7\0\1\32\4\0\23\32\1\371\3\32\26\0\7\32"+
    "\7\0\1\32\4\0\5\32\1\372\21\32\26\0\7\32"+
    "\7\0\1\32\4\0\4\32\1\373\22\32\4\0\14\231"+
    "\1\232\4\231\1\374\56\231\14\320\1\321\4\320\1\374"+
    "\56\320\22\0\7\32\7\0\1\32\4\0\1\32\1\375"+
    "\25\32\26\0\7\32\7\0\1\32\4\0\20\32\1\376"+
    "\6\32\26\0\7\32\7\0\1\32\4\0\15\32\1\377"+
    "\11\32\26\0\7\32\7\0\1\32\4\0\13\32\1\u0100"+
    "\13\32\26\0\7\32\7\0\1\32\4\0\5\32\1\u0101"+
    "\21\32\26\0\7\32\7\0\1\32\4\0\3\32\1\u0102"+
    "\23\32\26\0\7\32\7\0\1\32\4\0\6\32\1\u0103"+
    "\20\32\26\0\7\32\7\0\1\32\4\0\17\32\1\u0104"+
    "\7\32\26\0\7\32\7\0\1\32\4\0\11\32\1\u0105"+
    "\15\32\26\0\7\32\7\0\1\32\4\0\22\32\1\u0106"+
    "\4\32\26\0\7\32\7\0\1\32\4\0\3\32\1\u0107"+
    "\23\32\26\0\7\32\7\0\1\32\4\0\3\32\1\u0108"+
    "\23\32\26\0\7\32\7\0\1\32\4\0\15\32\1\u0109"+
    "\11\32\26\0\7\32\7\0\1\32\4\0\3\32\1\u010a"+
    "\23\32\26\0\7\32\7\0\1\32\4\0\7\32\1\u010b"+
    "\17\32\26\0\7\32\7\0\1\32\4\0\22\32\1\u010c"+
    "\4\32\26\0\7\32\7\0\1\32\4\0\10\32\1\u010d"+
    "\16\32\26\0\5\32\1\u010e\1\32\7\0\1\32\4\0"+
    "\27\32\26\0\2\32\1\u010f\4\32\7\0\1\32\4\0"+
    "\27\32\26\0\4\32\1\u0110\2\32\7\0\1\32\4\0"+
    "\27\32\26\0\7\32\7\0\1\32\4\0\1\32\1\u0111"+
    "\25\32\26\0\7\32\7\0\1\32\4\0\5\32\1\u0112"+
    "\21\32\26\0\7\32\7\0\1\32\4\0\22\32\1\u0113"+
    "\4\32\26\0\7\32\7\0\1\32\4\0\1\32\1\u0114"+
    "\25\32\26\0\7\32\7\0\1\32\4\0\3\32\1\u0115"+
    "\23\32\26\0\7\32\7\0\1\32\4\0\23\32\1\u0116"+
    "\3\32\26\0\7\32\7\0\1\32\4\0\23\32\1\u0117"+
    "\3\32\26\0\7\32\7\0\1\32\4\0\22\32\1\u0118"+
    "\4\32\26\0\7\32\7\0\1\32\4\0\10\32\1\u0119"+
    "\16\32\26\0\7\32\7\0\1\32\4\0\1\32\1\u011a"+
    "\25\32\26\0\7\32\7\0\1\32\4\0\1\32\1\u011b"+
    "\25\32\26\0\7\32\7\0\1\32\4\0\4\32\1\u011c"+
    "\22\32\26\0\7\32\7\0\1\32\4\0\5\32\1\u011d"+
    "\21\32\26\0\7\32\7\0\1\32\4\0\22\32\1\u011e"+
    "\4\32\26\0\7\32\7\0\1\32\4\0\20\32\1\u011f"+
    "\6\32\26\0\7\32\7\0\1\32\4\0\4\32\1\u0120"+
    "\22\32\26\0\7\32\7\0\1\32\4\0\13\32\1\u0121"+
    "\13\32\26\0\7\32\7\0\1\32\4\0\22\32\1\u0122"+
    "\4\32\26\0\7\32\7\0\1\32\4\0\3\32\1\u0123"+
    "\23\32\26\0\7\32\7\0\1\32\4\0\5\32\1\u0124"+
    "\21\32\26\0\7\32\7\0\1\32\4\0\3\32\1\u0125"+
    "\23\32\26\0\7\32\7\0\1\32\4\0\3\32\1\u0126"+
    "\23\32\26\0\7\32\7\0\1\32\4\0\5\32\1\u0127"+
    "\21\32\26\0\7\32\7\0\1\32\4\0\5\32\1\u0128"+
    "\21\32\26\0\7\32\7\0\1\32\4\0\22\32\1\u0129"+
    "\4\32\26\0\7\32\7\0\1\32\4\0\5\32\1\u012a"+
    "\21\32\26\0\7\32\7\0\1\32\4\0\5\32\1\u012b"+
    "\21\32\26\0\7\32\7\0\1\32\4\0\4\32\1\u012c"+
    "\22\32\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13440];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\2\11\2\1\7\11"+
    "\2\1\7\11\1\1\4\11\22\1\4\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\53\1\2\0\56\1"+
    "\3\0\62\1\1\11\1\0\1\1\2\0\52\1\1\11"+
    "\60\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ValaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 99: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 100: break;
          case 3:
            { return ValaTypes.EXCLAMATION;
            }
          // fall through
          case 101: break;
          case 4:
            { return ValaTypes.POUND;
            }
          // fall through
          case 102: break;
          case 5:
            { return ValaTypes.PERCENT;
            }
          // fall through
          case 103: break;
          case 6:
            { return ValaTypes.AND;
            }
          // fall through
          case 104: break;
          case 7:
            { return ValaTypes.LPAREN;
            }
          // fall through
          case 105: break;
          case 8:
            { return ValaTypes.RPAREN;
            }
          // fall through
          case 106: break;
          case 9:
            { return ValaTypes.STAR;
            }
          // fall through
          case 107: break;
          case 10:
            { return ValaTypes.PLUS;
            }
          // fall through
          case 108: break;
          case 11:
            { return ValaTypes.COMMA;
            }
          // fall through
          case 109: break;
          case 12:
            { return ValaTypes.MINUS;
            }
          // fall through
          case 110: break;
          case 13:
            { return ValaTypes.DOT;
            }
          // fall through
          case 111: break;
          case 14:
            { return ValaTypes.FORWARD_SLASH;
            }
          // fall through
          case 112: break;
          case 15:
            { return ValaTypes.NUMBER;
            }
          // fall through
          case 113: break;
          case 16:
            { return ValaTypes.COLON;
            }
          // fall through
          case 114: break;
          case 17:
            { return ValaTypes.SEMICOLON;
            }
          // fall through
          case 115: break;
          case 18:
            { return ValaTypes.LESS_THAN;
            }
          // fall through
          case 116: break;
          case 19:
            { return ValaTypes.EQUALS;
            }
          // fall through
          case 117: break;
          case 20:
            { return ValaTypes.GREATER_THAN;
            }
          // fall through
          case 118: break;
          case 21:
            { return ValaTypes.QUESTION_MARK;
            }
          // fall through
          case 119: break;
          case 22:
            { return ValaTypes.AT;
            }
          // fall through
          case 120: break;
          case 23:
            { return ValaTypes.IDENTIFIER;
            }
          // fall through
          case 121: break;
          case 24:
            { return ValaTypes.LBRACKET;
            }
          // fall through
          case 122: break;
          case 25:
            { return ValaTypes.RBRACKET;
            }
          // fall through
          case 123: break;
          case 26:
            { return ValaTypes.CARET;
            }
          // fall through
          case 124: break;
          case 27:
            { return ValaTypes.UNDERSCORE;
            }
          // fall through
          case 125: break;
          case 28:
            { return ValaTypes.LBRACE;
            }
          // fall through
          case 126: break;
          case 29:
            { return ValaTypes.PIPE;
            }
          // fall through
          case 127: break;
          case 30:
            { return ValaTypes.RBRACE;
            }
          // fall through
          case 128: break;
          case 31:
            { return ValaTypes.TILDE;
            }
          // fall through
          case 129: break;
          case 32:
            { return ValaTypes.STRING_LITERAL;
            }
          // fall through
          case 130: break;
          case 33:
            { return ValaTypes.CHAR_LITERAL;
            }
          // fall through
          case 131: break;
          case 34:
            { return ValaTypes.COMMENT;
            }
          // fall through
          case 132: break;
          case 35:
            { return ValaTypes.DO;
            }
          // fall through
          case 133: break;
          case 36:
            { return ValaTypes.IF;
            }
          // fall through
          case 134: break;
          case 37:
            { return ValaTypes.IN;
            }
          // fall through
          case 135: break;
          case 38:
            { return ValaTypes.FOR;
            }
          // fall through
          case 136: break;
          case 39:
            { return ValaTypes.INT;
            }
          // fall through
          case 137: break;
          case 40:
            { return ValaTypes.NEW;
            }
          // fall through
          case 138: break;
          case 41:
            { return ValaTypes.TRY;
            }
          // fall through
          case 139: break;
          case 42:
            { return ValaTypes.VAR;
            }
          // fall through
          case 140: break;
          case 43:
            { return ValaTypes.BLOCK_COMMENT;
            }
          // fall through
          case 141: break;
          case 44:
            { return ValaTypes.BOOL;
            }
          // fall through
          case 142: break;
          case 45:
            { return ValaTypes.CASE;
            }
          // fall through
          case 143: break;
          case 46:
            { return ValaTypes.CHAR;
            }
          // fall through
          case 144: break;
          case 47:
            { return ValaTypes.ELSE;
            }
          // fall through
          case 145: break;
          case 48:
            { return ValaTypes.ENUM;
            }
          // fall through
          case 146: break;
          case 49:
            { return ValaTypes.INT8;
            }
          // fall through
          case 147: break;
          case 50:
            { return ValaTypes.LONG;
            }
          // fall through
          case 148: break;
          case 51:
            { return ValaTypes.NULL;
            }
          // fall through
          case 149: break;
          case 52:
            { return ValaTypes.TRUE;
            }
          // fall through
          case 150: break;
          case 53:
            { return ValaTypes.UINT;
            }
          // fall through
          case 151: break;
          case 54:
            { return ValaTypes.VOID;
            }
          // fall through
          case 152: break;
          case 55:
            { return ValaTypes.DOC_COMMENT;
            }
          // fall through
          case 153: break;
          case 56:
            { return ValaTypes.ASYNC;
            }
          // fall through
          case 154: break;
          case 57:
            { return ValaTypes.BREAK;
            }
          // fall through
          case 155: break;
          case 58:
            { return ValaTypes.CATCH;
            }
          // fall through
          case 156: break;
          case 59:
            { return ValaTypes.CLASS;
            }
          // fall through
          case 157: break;
          case 60:
            { return ValaTypes.CONST;
            }
          // fall through
          case 158: break;
          case 61:
            { return ValaTypes.FALSE;
            }
          // fall through
          case 159: break;
          case 62:
            { return ValaTypes.FLOAT;
            }
          // fall through
          case 160: break;
          case 63:
            { return ValaTypes.INT16;
            }
          // fall through
          case 161: break;
          case 64:
            { return ValaTypes.INT32;
            }
          // fall through
          case 162: break;
          case 65:
            { return ValaTypes.INT64;
            }
          // fall through
          case 163: break;
          case 66:
            { return ValaTypes.OWNED;
            }
          // fall through
          case 164: break;
          case 67:
            { return ValaTypes.SHORT;
            }
          // fall through
          case 165: break;
          case 68:
            { return ValaTypes.THROW;
            }
          // fall through
          case 166: break;
          case 69:
            { return ValaTypes.UCHAR;
            }
          // fall through
          case 167: break;
          case 70:
            { return ValaTypes.UINT8;
            }
          // fall through
          case 168: break;
          case 71:
            { return ValaTypes.ULONG;
            }
          // fall through
          case 169: break;
          case 72:
            { return ValaTypes.USING;
            }
          // fall through
          case 170: break;
          case 73:
            { return ValaTypes.WHILE;
            }
          // fall through
          case 171: break;
          case 74:
            { return ValaTypes.YIELD;
            }
          // fall through
          case 172: break;
          case 75:
            { return ValaTypes.DOUBLE;
            }
          // fall through
          case 173: break;
          case 76:
            { return ValaTypes.PUBLIC;
            }
          // fall through
          case 174: break;
          case 77:
            { return ValaTypes.RETURN;
            }
          // fall through
          case 175: break;
          case 78:
            { return ValaTypes.STATIC;
            }
          // fall through
          case 176: break;
          case 79:
            { return ValaTypes.STRING;
            }
          // fall through
          case 177: break;
          case 80:
            { return ValaTypes.STRUCT;
            }
          // fall through
          case 178: break;
          case 81:
            { return ValaTypes.SWITCH;
            }
          // fall through
          case 179: break;
          case 82:
            { return ValaTypes.UINT16;
            }
          // fall through
          case 180: break;
          case 83:
            { return ValaTypes.UINT32;
            }
          // fall through
          case 181: break;
          case 84:
            { return ValaTypes.UINT64;
            }
          // fall through
          case 182: break;
          case 85:
            { return ValaTypes.USHORT;
            }
          // fall through
          case 183: break;
          case 86:
            { return ValaTypes.DEFAULT;
            }
          // fall through
          case 184: break;
          case 87:
            { return ValaTypes.FOREACH;
            }
          // fall through
          case 185: break;
          case 88:
            { return ValaTypes.PRIVATE;
            }
          // fall through
          case 186: break;
          case 89:
            { return ValaTypes.UNICHAR;
            }
          // fall through
          case 187: break;
          case 90:
            { return ValaTypes.UNOWNED;
            }
          // fall through
          case 188: break;
          case 91:
            { return ValaTypes.VIRTUAL;
            }
          // fall through
          case 189: break;
          case 92:
            { return ValaTypes.ABSTRACT;
            }
          // fall through
          case 190: break;
          case 93:
            { return ValaTypes.CONTINUE;
            }
          // fall through
          case 191: break;
          case 94:
            { return ValaTypes.OVERRIDE;
            }
          // fall through
          case 192: break;
          case 95:
            { return ValaTypes.CONSTRUCT;
            }
          // fall through
          case 193: break;
          case 96:
            { return ValaTypes.INTERFACE;
            }
          // fall through
          case 194: break;
          case 97:
            { return ValaTypes.NAMESPACE;
            }
          // fall through
          case 195: break;
          case 98:
            { return ValaTypes.PROTECTED;
            }
          // fall through
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
