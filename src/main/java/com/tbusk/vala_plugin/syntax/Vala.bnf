{
    parserClass="com.tbusk.vala_plugin.ValaParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Vala"
    psiImplClassSuffix="Impl"
    psiPackage="com.tbusk.vala_plugin.psi"
    psiImplPackage="com.tbusk.vala_plugin.psi.impl"

    elementTypeHolderClass="com.tbusk.vala_plugin.psi.ValaTypes"
    elementTypeClass="com.tbusk.vala_plugin.psi.ValaElementType"
    tokenTypeClass="com.tbusk.vala_plugin.psi.ValaTokenType"

    tokens=[
        DOT='.'
        COMMA=','
        SEMICOLON=';'
        EQUALS="="
        LBRACE='{'
        RBRACE='}'
        COLON=':'
        LPAREN='('
        RPAREN=')'
        LBRACKET='['
        RBRACKET=']'
        QUESTION_MARK='?'
        AT='@'
        UNDERSCORE='_'
        GREATER_THAN='>'
        LESS_THAN='<'
        PLUS='+'
        MINUS='-'
        STAR='*'
        FORWARD_SLASH='/'
        PERCENT='%'
        AND='&'
        PIPE='|'
        EXCLAMATION='!'
        TILDE='~'
        CARET='^'
        BACKTICK='`'
        DOLLAR='$'

        IDENTIFIER='regexp:[a-zA-Z_][a-zA-Z0-9_]*'
        WHITESPACE='regexp:\s+'
        STRING_LITERAL='regexp:\"([^"\\]|\\.)*\"'
        CHAR_LITERAL="regexp:'([^'\\]|\\.)'"
        NUMBER='regexp:\d+'
        COMMENT='regexp://.*'
        BLOCK_COMMENT='regexp:/[^*]\*+([^/*][^*]*\*+)*/'
        DOC_COMMENT='regexp:/[^*]*\*+([^/*][^*]*\*+)*/'
        EMPTY='regexp:\s*'
    ]
}

Root ::= Items*

Items ::= Keywords | Comments | Identifiers | Symbols

Symbols ::= DOT
         | COMMA
         | SEMICOLON
         | EQUALS
         | LBRACE
         | RBRACE
         | COLON
         | LPAREN
         | RPAREN
         | LBRACKET
         | RBRACKET
         | QUESTION_MARK
         | AT
         | UNDERSCORE
         | GREATER_THAN
         | LESS_THAN
         | PLUS
         | MINUS
         | STAR
         | FORWARD_SLASH
         | PERCENT
         | AND
         | PIPE
         | EXCLAMATION
         | TILDE
         | CARET
         | BACKTICK
         | DOLLAR



Comments ::= COMMENT
          | BLOCK_COMMENT
          | DOC_COMMENT

Identifiers ::= IDENTIFIER
             | STRING_LITERAL
             | CHAR_LITERAL
             | NUMBER
             | WHITESPACE
             | EMPTY

Keywords ::= if
            | else
            | while
            | for
            | do
            | switch
            | case
            | default
            | break
            | continue
            | return
            | goto
            | sizeof
            | typedef
            | struct
            | union
            | enum
            | class
            | interface
            | public
            | private
            | protected
            | static
            | final
            | abstract
            | virtual
            | override
            | namespace
            | internal
            | foreach
            | in
            | try
            | catch
            | finally
            | throw
            | throws
            | new
            | delete
            | this
            | super
            | null
            | true
            | false
            | const
            | volatile
            | assert
            | string
            | char
            | uchar
            | unichar
            | int
            | uint
            | long
            | ulong
            | short
            | ushort
            | int8
            | int16
            | int32
            | int64
            | uint8
            | uint16
            | uint32
            | uint64
            | float
            | double
            | bool
            | var
            | void
            | owned
            | unowned
            | using
            | construct
            | yield
            | async