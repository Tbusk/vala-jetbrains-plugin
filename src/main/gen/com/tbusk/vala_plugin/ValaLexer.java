// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Vala.flex

package com.tbusk.vala_plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tbusk.vala_plugin.psi.ValaTypes;
import com.intellij.psi.TokenType;
import com.tbusk.vala_plugin.ValaTokenSets;
import com.tbusk.vala_plugin.psi.ValaTokenType;

/**
 * Lexer generator used is JFlex.
 * Documentation can be found at: https://jflex.de/manual.html
 */

public class ValaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\25\1\32\1\25\1\33\1\25"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\32\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\43"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\6\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\22\30\1\36\1\37\1\40\1\41\1\42\1\0\1\43"+
    "\3\0\1\44\1\45\1\0\1\46\1\0\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\3\0\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\12\30\1\63\10\30\1\64\1\65"+
    "\34\30\1\66\1\67\1\43\4\0\1\70\5\0\25\30"+
    "\1\71\1\72\3\30\1\73\1\30\1\74\5\30\1\75"+
    "\14\30\1\76\7\30\1\77\5\30\3\0\2\100\3\0"+
    "\1\101\6\0\1\102\3\0\1\101\1\0\2\30\1\103"+
    "\1\104\1\30\1\105\1\30\1\106\6\30\1\107\1\30"+
    "\1\110\11\30\1\111\1\30\1\112\1\113\1\30\1\114"+
    "\17\30\1\115\1\30\1\116\1\30\1\117\6\30\1\120"+
    "\1\121\2\30\3\0\1\101\4\0\2\102\3\0\1\122"+
    "\7\0\1\101\3\0\1\101\4\0\1\30\1\123\1\124"+
    "\1\125\1\126\1\127\7\30\1\130\1\30\1\131\1\30"+
    "\1\132\1\133\1\134\3\30\1\135\5\30\1\136\7\30"+
    "\1\137\1\140\3\30\1\141\1\142\3\30\1\143\1\30"+
    "\1\144\1\145\1\146\4\0\1\122\3\0\1\101\2\0"+
    "\1\122\3\0\1\101\10\0\5\30\1\147\2\30\1\150"+
    "\10\30\1\151\1\30\1\152\1\153\1\154\1\30\1\155"+
    "\1\156\1\157\1\160\1\161\1\162\1\163\1\164\2\30"+
    "\1\165\1\30\6\0\1\101\4\0\1\122\10\0\3\30"+
    "\1\166\1\30\1\167\1\30\1\170\1\171\4\30\1\172"+
    "\2\30\1\173\1\174\1\175\1\176\20\0\1\177\1\30"+
    "\1\200\1\201\2\30\1\202\1\30\1\203\1\30\1\204"+
    "\16\0\1\205\1\30\1\206\1\207\1\210\13\0\1\30"+
    "\1\0\1\101\6\0\1\101\1\211\1\101\4\0\2\101"+
    "\4\0\2\101\5\0\1\101\27\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[577];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\107\0\u01aa"+
    "\0\u01f1\0\u0238\0\107\0\107\0\u027f\0\u02c6\0\107\0\u030d"+
    "\0\u0354\0\u039b\0\u03e2\0\107\0\107\0\u0429\0\u0470\0\u04b7"+
    "\0\107\0\u04fe\0\u0545\0\107\0\107\0\107\0\107\0\107"+
    "\0\u058c\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d"+
    "\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5"+
    "\0\u09fc\0\u0a43\0\107\0\u0a8a\0\107\0\107\0\107\0\u0ad1"+
    "\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed\0\107\0\107\0\u0238\0\107"+
    "\0\u0c34\0\107\0\107\0\107\0\107\0\107\0\107\0\u0c7b"+
    "\0\u0cc2\0\u0d09\0\u0d50\0\107\0\u0d97\0\107\0\107\0\107"+
    "\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf"+
    "\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207"+
    "\0\u124e\0\u1295\0\u12dc\0\u0545\0\u1323\0\u136a\0\u13b1\0\u13f8"+
    "\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630"+
    "\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868"+
    "\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0"+
    "\0\u1ae7\0\107\0\107\0\107\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03"+
    "\0\107\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4"+
    "\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c"+
    "\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264"+
    "\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c"+
    "\0\u0545\0\u24e3\0\u0545\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646"+
    "\0\u0545\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837"+
    "\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u0545\0\u29e1\0\u2a28"+
    "\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u0545\0\u2bd2\0\u2c19"+
    "\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\107\0\u2e0a"+
    "\0\u2e51\0\u2e98\0\u2edf\0\u0cc2\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb"+
    "\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u1c91\0\u31ec"+
    "\0\u3233\0\u327a\0\u0545\0\u0545\0\u32c1\0\u0545\0\u3308\0\u0545"+
    "\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u0545\0\u34f9"+
    "\0\u0545\0\u3540\0\u3587\0\u35ce\0\u3615\0\u365c\0\u36a3\0\u36ea"+
    "\0\u3731\0\u3778\0\u0545\0\u37bf\0\u0545\0\u0545\0\u3806\0\u0545"+
    "\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e"+
    "\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u0545"+
    "\0\u3c76\0\u0545\0\u3cbd\0\u3d04\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20"+
    "\0\u3e67\0\u3eae\0\u0545\0\u0545\0\u3ef5\0\u3f3c\0\u3f83\0\u3fca"+
    "\0\u4011\0\107\0\u4058\0\u409f\0\u40e6\0\u412d\0\u1c4a\0\107"+
    "\0\u4174\0\u41bb\0\u4202\0\u1d66\0\u4249\0\u4290\0\u42d7\0\u431e"+
    "\0\u4365\0\u43ac\0\u30d0\0\u4249\0\u43f3\0\u443a\0\u4481\0\u1cd8"+
    "\0\u44c8\0\u450f\0\u4556\0\u459d\0\u45e4\0\u0545\0\u0545\0\u0545"+
    "\0\u0545\0\u462b\0\u4672\0\u46b9\0\u4700\0\u4747\0\u478e\0\u47d5"+
    "\0\u481c\0\u0545\0\u4863\0\u0545\0\u48aa\0\u0545\0\u0545\0\u0545"+
    "\0\u48f1\0\u4938\0\u497f\0\u0545\0\u49c6\0\u4a0d\0\u4a54\0\u4a9b"+
    "\0\u4ae2\0\u0545\0\u4b29\0\u4b70\0\u4bb7\0\u4bfe\0\u4c45\0\u4c8c"+
    "\0\u4cd3\0\u4d1a\0\u0545\0\u4d61\0\u4da8\0\u4def\0\u0545\0\u0545"+
    "\0\u4e36\0\u4e7d\0\u4ec4\0\u0545\0\u4f0b\0\u0545\0\u0545\0\107"+
    "\0\u4f52\0\u4f99\0\u4fe0\0\u5027\0\u1c4a\0\u506e\0\u50b5\0\u50fc"+
    "\0\u2ffb\0\u5143\0\u518a\0\107\0\u51d1\0\u5218\0\u525f\0\u42d7"+
    "\0\u52a6\0\u52ed\0\u5334\0\u537b\0\u53c2\0\u5409\0\u5450\0\u5497"+
    "\0\u54de\0\u5525\0\u556c\0\u55b3\0\u55fa\0\u0545\0\u5641\0\u5688"+
    "\0\u0545\0\u56cf\0\u5716\0\u575d\0\u57a4\0\u57eb\0\u5832\0\u5879"+
    "\0\u58c0\0\u0545\0\u5907\0\u0545\0\u0545\0\u0545\0\u594e\0\u0545"+
    "\0\u0545\0\u0545\0\u0545\0\u0545\0\u0545\0\u0545\0\u0545\0\u5995"+
    "\0\u59dc\0\u0545\0\u5a23\0\u5a6a\0\u5ab1\0\u5af8\0\u5b3f\0\u5b86"+
    "\0\u5bcd\0\u3042\0\u5c14\0\u5c5b\0\u5ca2\0\u5ce9\0\u1cd8\0\u5d30"+
    "\0\u5d77\0\u5dbe\0\u5e05\0\u5e4c\0\u5e93\0\u5eda\0\u5f21\0\u5f68"+
    "\0\u5faf\0\u5ff6\0\u0545\0\u603d\0\u0545\0\u6084\0\u0545\0\u0545"+
    "\0\u60cb\0\u6112\0\u6159\0\u61a0\0\u0545\0\u61e7\0\u622e\0\u0545"+
    "\0\u0545\0\u0545\0\u0545\0\u6275\0\u62bc\0\u6303\0\u634a\0\u6391"+
    "\0\u63d8\0\u641f\0\u6466\0\u64ad\0\u64f4\0\u653b\0\u6582\0\u65c9"+
    "\0\u6610\0\u6657\0\u669e\0\u0545\0\u66e5\0\u0545\0\u0545\0\u672c"+
    "\0\u6773\0\u0545\0\u67ba\0\u0545\0\u6801\0\u0545\0\u6848\0\u688f"+
    "\0\u68d6\0\u691d\0\u6964\0\u69ab\0\u69f2\0\u6a39\0\u6a80\0\u6ac7"+
    "\0\u6b0e\0\u6b55\0\u6b9c\0\u6be3\0\u0545\0\u6c2a\0\u0545\0\u0545"+
    "\0\u0545\0\u6c71\0\u6cb8\0\u6cff\0\u6d46\0\u6d8d\0\u6dd4\0\u6e1b"+
    "\0\u6e62\0\u6ea9\0\u6ef0\0\u6f37\0\u6f7e\0\u6fc5\0\u700c\0\u7053"+
    "\0\u709a\0\u70e1\0\u7128\0\u716f\0\u71b6\0\u71fd\0\u0545\0\u7244"+
    "\0\u728b\0\u72d2\0\u7319\0\u7360\0\u73a7\0\u73ee\0\u7435\0\u747c"+
    "\0\u74c3\0\u750a\0\u7551\0\u7598\0\u75df\0\u7626\0\u766d\0\u76b4"+
    "\0\u76fb\0\u7742\0\u7789\0\u77d0\0\u7817\0\u785e\0\u78a5\0\u78ec"+
    "\0\u7933\0\u797a\0\u79c1\0\u7a08\0\u7a4f\0\u7a96\0\u7add\0\u7b24"+
    "\0\u7b6b\0\u7bb2\0\u7bf9\0\u7c40\0\u7c87\0\u7cce\0\u7d15\0\u7d5c"+
    "\0\u7da3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[577];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\7\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\33\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\2\33\1\47\1\33\1\50\1\33\1\51\1\52\1\53"+
    "\1\33\1\54\1\55\1\56\1\57\1\60\1\61\1\33"+
    "\1\62\1\33\1\63\1\64\1\65\1\66\110\0\2\3"+
    "\1\0\2\3\140\0\1\67\47\0\7\70\1\71\35\70"+
    "\1\72\41\70\56\0\1\73\3\0\1\74\63\0\1\75"+
    "\62\0\1\76\73\0\14\77\1\100\30\77\1\101\41\77"+
    "\37\0\1\102\67\0\1\103\16\0\1\104\71\0\1\105"+
    "\2\0\7\23\3\0\1\106\1\107\71\0\1\110\74\0"+
    "\1\111\2\0\3\111\1\112\1\111\1\0\2\111\1\113"+
    "\7\111\3\0\1\114\1\0\10\111\1\0\34\111\24\0"+
    "\1\115\1\0\7\23\112\0\1\116\106\0\1\117\106\0"+
    "\1\120\56\0\1\70\110\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\31\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\1\33\1\121"+
    "\17\33\1\122\7\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\1\123\14\33\1\124\2\33"+
    "\1\125\10\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\1\126\6\33\1\127\2\33\1\130"+
    "\2\33\1\131\13\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\132\10\33\1\133"+
    "\13\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\12\33\1\134\1\33\1\135\3\33\1\136"+
    "\5\33\1\137\2\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\1\140\7\33\1\141\1\33"+
    "\1\142\2\33\1\143\13\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\5\33\1\144\6\33"+
    "\1\145\14\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\15\33\1\146\13\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\1\147"+
    "\3\33\1\150\16\33\1\151\5\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\23\33\1\152"+
    "\1\153\1\154\3\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\20\33\1\155\2\33\1\156"+
    "\5\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\4\33\1\157\24\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\7\33\1\160"+
    "\1\161\10\33\1\162\1\163\2\33\1\164\3\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\7\33\1\165\10\33\1\166\10\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\2\33\1\167"+
    "\5\33\1\170\1\33\1\171\1\33\1\172\4\33\1\173"+
    "\7\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\1\174\7\33\1\175\4\33\1\176\13\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\4\33\1\177\2\33\1\200\21\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\10\33"+
    "\1\201\20\33\43\0\1\202\44\0\1\203\2\0\7\70"+
    "\1\204\35\70\1\72\41\70\7\0\1\205\77\0\2\70"+
    "\3\0\102\70\64\0\1\206\1\0\1\207\77\0\1\210"+
    "\27\0\2\77\3\0\102\77\23\0\1\211\63\0\2\111"+
    "\3\0\17\111\1\212\62\111\2\213\3\214\12\213\1\215"+
    "\4\213\1\216\62\213\2\113\1\0\1\113\1\0\102\113"+
    "\25\0\7\115\64\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\21\33\1\217\7\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\27\33"+
    "\1\220\1\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\21\33\1\221\7\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\15\33"+
    "\1\222\13\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\4\33\1\223\24\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\21\33"+
    "\1\224\1\225\6\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\1\226\30\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\1\227"+
    "\30\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\14\33\1\230\14\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\5\33\1\231"+
    "\4\33\1\232\16\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\23\33\1\233\5\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\21\33\1\234\7\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\21\33\1\235\1\33\1\236"+
    "\5\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\20\33\1\237\10\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\22\33\1\240"+
    "\6\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\12\33\1\241\16\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\14\33\1\242"+
    "\14\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\15\33\1\243\13\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\20\33\1\244"+
    "\10\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\22\33\1\245\6\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\2\33\1\246"+
    "\11\33\1\247\14\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\13\33\1\250\15\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\25\33\1\251\3\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\12\33\1\252\16\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\22\33\1\253\6\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\254\24\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\14\33\1\255\14\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\10\33\1\256\4\33\1\257"+
    "\13\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\1\33\1\260\27\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\5\33\1\261"+
    "\11\33\1\262\2\33\1\263\6\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\15\33\1\264"+
    "\13\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\6\33\1\265\21\33\1\266\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\10\33"+
    "\1\267\20\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\1\270\17\33\1\271\10\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\10\33\1\272\20\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\10\33\1\273\7\33\1\274"+
    "\10\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\23\33\1\275\3\33\1\276\1\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\7\33\1\277\21\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\14\33\1\300\14\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\15\33\1\301\13\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\10\33\1\302\4\33\1\303"+
    "\13\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\7\33\1\304\1\305\20\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\20\33"+
    "\1\306\10\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\20\33\1\307\10\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\10\33"+
    "\1\310\20\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\1\311\30\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\10\33\1\312"+
    "\20\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\4\33\1\313\24\33\4\0\7\205\1\314"+
    "\77\205\62\0\1\74\10\0\1\315\70\0\1\316\31\0"+
    "\2\210\1\317\1\0\1\320\102\210\2\111\1\321\2\0"+
    "\1\322\15\111\1\323\1\212\10\111\1\324\24\111\1\325"+
    "\2\111\1\325\1\111\1\325\3\111\1\325\4\111\1\325"+
    "\6\111\2\213\3\214\12\213\1\326\4\213\1\216\62\213"+
    "\17\214\1\327\67\214\2\330\3\331\12\330\1\332\4\330"+
    "\1\333\62\330\2\213\1\334\2\214\1\335\11\213\1\326"+
    "\3\213\1\336\1\216\10\213\1\337\24\213\1\340\2\213"+
    "\1\340\1\213\1\340\3\213\1\340\4\213\1\340\6\213"+
    "\11\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\22\33\1\341\6\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\14\33\1\342\14\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\4\33\1\343\24\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\12\33\1\344\16\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\1\345\30\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\346\24\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\2\33\1\347\26\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\20\33\1\350\10\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\21\33\1\351\7\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\21\33\1\352\1\353\6\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\1\354\30\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\355\24\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\1\33\1\356\27\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\357\24\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\23\33\1\360\5\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\13\33\1\361\15\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\15\33\1\362\13\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\363\24\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\21\33\1\364\7\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\1\365\30\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\1\366"+
    "\30\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\4\33\1\367\24\33\15\0\1\33\13\0"+
    "\1\33\1\370\1\33\1\371\1\33\1\372\1\373\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\374\24\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\11\33\1\375\17\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\6\33\1\376\22\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\4\33\1\377\24\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\12\33\1\u0100\16\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\20\33\1\u0101\10\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\u0102\24\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\24\33\1\u0103\4\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\22\33\1\u0104\6\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\12\33\1\u0105\16\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\23\33\1\u0106\5\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\23\33\1\u0107\5\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\20\33\1\u0108\10\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\14\33\1\u0109\14\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\u010a\24\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\30\33\1\u010b\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\22\33\1\u010c\6\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\10\33"+
    "\1\u010d\12\33\1\u010e\5\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\22\33\1\u010f\6\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\21\33\1\u0110\7\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\15\33\1\u0111\13\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\4\33\1\u0112\24\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\1\u0113\30\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\22\33\1\u0114\6\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\14\33\1\u0115\14\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\2\33\1\u0116\26\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\25\33\1\u0117\3\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\15\33\1\u0118\13\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\14\33\1\u0119\14\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\22\33\1\u011a\6\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\3\33\1\u011b\25\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\11\33\1\u011c\17\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\12\33\1\u011d\16\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\12\33\1\u011e\16\33\4\0\7\205\1\u011f\77\205\56\0"+
    "\1\210\112\0\1\74\26\0\1\317\106\0\1\u0120\2\0"+
    "\1\321\15\0\1\u0121\11\0\1\u0122\24\0\1\u0123\2\0"+
    "\1\u0123\1\0\1\u0123\3\0\1\u0123\4\0\1\u0123\6\0"+
    "\2\111\1\u0120\2\0\1\322\15\111\1\323\1\212\10\111"+
    "\1\324\24\111\1\325\2\111\1\325\1\111\1\325\3\111"+
    "\1\325\4\111\1\325\10\111\3\0\17\111\1\212\40\111"+
    "\1\u0124\4\111\1\u0125\16\111\1\u0120\2\0\1\u0126\15\111"+
    "\1\323\1\212\10\111\1\324\24\111\1\325\2\111\1\325"+
    "\1\111\1\325\3\111\1\325\4\111\1\325\6\111\2\213"+
    "\3\214\17\213\1\u0127\62\213\24\214\1\u0128\62\214\2\330"+
    "\3\331\12\330\1\u0129\4\330\1\u012a\62\330\17\331\1\u012b"+
    "\67\331\2\330\3\331\12\330\1\u0129\4\330\1\u012c\62\330"+
    "\2\u012d\1\u012e\2\u012f\1\u0130\11\u012d\1\u0131\3\u012d\1\u0132"+
    "\1\u0133\10\u012d\1\u0134\24\u012d\1\u0135\2\u012d\1\u0135\1\u012d"+
    "\1\u0135\3\u012d\1\u0135\4\u012d\1\u0135\6\u012d\2\214\1\u0136"+
    "\2\214\1\334\11\214\1\327\3\214\1\u0137\11\214\1\u0138"+
    "\24\214\1\u0139\2\214\1\u0139\1\214\1\u0139\3\214\1\u0139"+
    "\4\214\1\u0139\6\214\2\213\1\u0136\2\214\1\335\11\213"+
    "\1\326\3\213\1\336\1\216\10\213\1\337\24\213\1\340"+
    "\2\213\1\340\1\213\1\340\3\213\1\340\4\213\1\340"+
    "\10\213\3\214\12\213\1\326\4\213\1\216\40\213\1\u013a"+
    "\4\213\1\u013b\16\213\1\u0136\2\214\1\u013c\11\213\1\326"+
    "\3\213\1\336\1\216\10\213\1\337\24\213\1\340\2\213"+
    "\1\340\1\213\1\340\3\213\1\340\4\213\1\340\6\213"+
    "\11\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\20\33\1\u013d\10\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\2\33\1\u013e\26\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\11\33\1\u013f\17\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\7\33\1\u0140\21\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\21\33\1\u0141\7\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\22\33\1\u0142\6\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\10\33\1\u0143\20\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\23\33\1\u0144\5\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\6\33\1\u0145\22\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\12\33\1\u0146\16\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\20\33\1\u0147\10\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\20\33\1\u0148\10\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\20\33\1\u0149\10\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\4\33\1\u014a\24\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\12\33\1\u014b\16\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\22\33\1\u014c\6\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\1\u014d\30\33\15\0\1\33\13\0\5\33\1\u014e"+
    "\1\33\7\0\1\33\4\0\1\33\1\0\31\33\15\0"+
    "\1\33\13\0\2\33\1\u014f\4\33\7\0\1\33\4\0"+
    "\1\33\1\0\31\33\15\0\1\33\13\0\4\33\1\u0150"+
    "\2\33\7\0\1\33\4\0\1\33\1\0\31\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\20\33\1\u0151\10\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\21\33\1\u0152\7\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\20\33\1\u0153\10\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\3\33\1\u0154\25\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\1\u0155\30\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\4\33\1\u0156\24\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\10\33"+
    "\1\u0157\20\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\10\33\1\u0158\20\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\20\33"+
    "\1\u0159\10\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\22\33\1\u015a\6\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\1\u015b"+
    "\30\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\u015c\1\0\31\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\u015d\24\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\10\33\1\u015e\20\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\14\33\1\u015f\14\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\2\33\1\u0160\26\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\2\33\1\u0161\26\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\25\33\1\u0162\3\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\20\33\1\u0163\10\33\15\0"+
    "\1\33\13\0\1\33\1\u0164\1\33\1\u0165\1\33\1\u0166"+
    "\1\u0167\7\0\1\33\4\0\1\33\1\0\31\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\6\33\1\u0168\22\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\7\33\1\u0169\21\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\14\33\1\u016a\14\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\20\33\1\u016b\10\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\6\33\1\u016c\22\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\23\33\1\u016d\5\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\4\33\1\u016e\24\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\3\33\1\u016f\25\33\4\0"+
    "\7\205\1\u0170\77\205\5\0\1\u0120\15\0\1\u0121\11\0"+
    "\1\u0122\136\0\1\u0171\4\0\1\u0172\16\0\1\u0120\2\0"+
    "\1\u0120\15\0\1\u0121\11\0\1\u0122\24\0\1\u0123\2\0"+
    "\1\u0123\1\0\1\u0123\3\0\1\u0123\4\0\1\u0123\6\0"+
    "\2\111\3\0\17\111\1\212\25\111\1\u0173\36\111\3\0"+
    "\17\111\1\212\31\111\1\u0174\32\111\3\0\1\u0126\15\111"+
    "\1\323\1\212\10\111\1\324\51\111\2\330\3\331\12\330"+
    "\1\332\4\330\1\u0175\64\330\1\u0176\2\331\1\u0177\11\330"+
    "\1\u0129\3\330\1\u0178\1\u012a\10\330\1\u0179\24\330\1\u017a"+
    "\2\330\1\u017a\1\330\1\u017a\3\330\1\u017a\4\330\1\u017a"+
    "\6\330\17\331\1\u017b\4\331\1\u017c\62\331\2\u012d\3\u012f"+
    "\12\u012d\1\u0131\4\u012d\1\u0133\62\u012d\2\u012f\1\u017d\2\u012f"+
    "\1\u012e\11\u012f\1\u017e\3\u012f\1\u017f\11\u012f\1\u0180\24\u012f"+
    "\1\u0181\2\u012f\1\u0181\1\u012f\1\u0181\3\u012f\1\u0181\4\u012f"+
    "\1\u0181\25\u012f\1\u017e\67\u012f\2\u012d\1\u017d\2\u012f\1\u0130"+
    "\11\u012d\1\u0131\3\u012d\1\u0132\1\u0133\10\u012d\1\u0134\24\u012d"+
    "\1\u0135\2\u012d\1\u0135\1\u012d\1\u0135\3\u012d\1\u0135\4\u012d"+
    "\1\u0135\10\u012d\3\u012f\12\u012d\1\u0131\4\u012d\1\u0175\64\u012d"+
    "\3\u012f\12\u012d\1\u0131\4\u012d\1\u0133\40\u012d\1\u0182\4\u012d"+
    "\1\u0183\16\u012d\1\u017d\2\u012f\1\u0184\11\u012d\1\u0131\3\u012d"+
    "\1\u0132\1\u0133\10\u012d\1\u0134\24\u012d\1\u0135\2\u012d\1\u0135"+
    "\1\u012d\1\u0135\3\u012d\1\u0135\4\u012d\1\u0135\6\u012d\5\214"+
    "\1\u0136\11\214\1\327\3\214\1\u0137\11\214\1\u0138\70\214"+
    "\1\327\45\214\1\u0185\4\214\1\u0186\16\214\1\u0136\2\214"+
    "\1\u0136\11\214\1\327\3\214\1\u0137\11\214\1\u0138\24\214"+
    "\1\u0139\2\214\1\u0139\1\214\1\u0139\3\214\1\u0139\4\214"+
    "\1\u0139\6\214\2\213\3\214\12\213\1\326\4\213\1\216"+
    "\25\213\1\u0187\36\213\3\214\12\213\1\326\4\213\1\216"+
    "\31\213\1\u0188\32\213\3\214\1\u013c\11\213\1\326\3\213"+
    "\1\336\1\216\10\213\1\337\51\213\11\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\1\u0189\30\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\20\33\1\u018a\10\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\14\33\1\u018b\14\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\12\33\1\u018c\16\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\1\u018d\30\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\4\33\1\u018e\24\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\u018f\24\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\3\33\1\u0190\25\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\14\33\1\u0191\14\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\12\33\1\u0192\16\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\2\33\1\u0193\26\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\5\33\1\u0194\6\33\1\u0195\14\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\16\33\1\u0196"+
    "\12\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\10\33\1\u0197\20\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\22\33\1\u0198"+
    "\6\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\2\33\1\u0199\26\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\2\33\1\u019a"+
    "\26\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\20\33\1\u019b\10\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\14\33\1\u019c"+
    "\14\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\12\33\1\u019d\16\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\22\33\1\u019e"+
    "\6\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\u019f\1\0\31\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\2\33\1\u01a0\26\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\6\33\1\u01a1\22\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\22\33\1\u01a2\6\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\7\33\1\u01a3\21\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\21\33\1\u01a4\7\33\15\0"+
    "\1\33\13\0\5\33\1\u01a5\1\33\7\0\1\33\4\0"+
    "\1\33\1\0\31\33\15\0\1\33\13\0\2\33\1\u01a6"+
    "\4\33\7\0\1\33\4\0\1\33\1\0\31\33\15\0"+
    "\1\33\13\0\4\33\1\u01a7\2\33\7\0\1\33\4\0"+
    "\1\33\1\0\31\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\1\u01a8\30\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\4\33"+
    "\1\u01a9\24\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\22\33\1\u01aa\6\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\1\u01ab"+
    "\30\33\56\0\1\u01ac\112\0\1\u01ad\30\0\2\111\3\0"+
    "\17\111\1\212\47\111\1\u01ae\14\111\3\0\17\111\1\212"+
    "\43\111\1\u01af\16\111\2\331\1\u01b0\2\331\1\u0176\11\331"+
    "\1\u012b\3\331\1\u01b1\11\331\1\u01b2\24\331\1\u01b3\2\331"+
    "\1\u01b3\1\331\1\u01b3\3\331\1\u01b3\4\331\1\u01b3\6\331"+
    "\2\330\1\u01b0\2\331\1\u0177\11\330\1\u0129\3\330\1\u0178"+
    "\1\u012a\10\330\1\u0179\24\330\1\u017a\2\330\1\u017a\1\330"+
    "\1\u017a\3\330\1\u017a\4\330\1\u017a\10\330\3\331\12\330"+
    "\1\u0129\4\330\1\u012a\40\330\1\u01b4\4\330\1\u01b5\16\330"+
    "\1\u01b0\2\331\1\u01b6\11\330\1\u0129\3\330\1\u0178\1\u012a"+
    "\10\330\1\u0179\24\330\1\u017a\2\330\1\u017a\1\330\1\u017a"+
    "\3\330\1\u017a\4\330\1\u017a\6\330\17\331\1\u012b\4\331"+
    "\1\u01b7\62\331\5\u012f\1\u017d\11\u012f\1\u017e\3\u012f\1\u017f"+
    "\11\u012f\1\u0180\70\u012f\1\u017e\4\u012f\1\u017c\101\u012f\1\u017e"+
    "\45\u012f\1\u01b8\4\u012f\1\u01b9\16\u012f\1\u017d\2\u012f\1\u017d"+
    "\11\u012f\1\u017e\3\u012f\1\u017f\11\u012f\1\u0180\24\u012f\1\u0181"+
    "\2\u012f\1\u0181\1\u012f\1\u0181\3\u012f\1\u0181\4\u012f\1\u0181"+
    "\6\u012f\2\u012d\3\u012f\12\u012d\1\u0131\4\u012d\1\u0133\25\u012d"+
    "\1\u01ba\36\u012d\3\u012f\12\u012d\1\u0131\4\u012d\1\u0133\31\u012d"+
    "\1\u01bb\32\u012d\3\u012f\1\u0184\11\u012d\1\u0131\3\u012d\1\u0132"+
    "\1\u0133\10\u012d\1\u0134\51\u012d\17\214\1\327\32\214\1\u01bc"+
    "\53\214\1\327\36\214\1\u01bd\30\214\2\213\3\214\12\213"+
    "\1\326\4\213\1\216\47\213\1\u01be\14\213\3\214\12\213"+
    "\1\326\4\213\1\216\43\213\1\u01bf\16\213\11\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\2\33"+
    "\1\u01c0\26\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\23\33\1\u01c1\5\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\23\33"+
    "\1\u01c2\5\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\22\33\1\u01c3\6\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\22\33"+
    "\1\u01c4\6\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\21\33\1\u01c5\7\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\15\33"+
    "\1\u01c6\13\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\27\33\1\u01c7\1\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\7\33"+
    "\1\u01c8\21\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\1\u01c9\30\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\1\u01ca\30\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\1\u01cb\30\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\3\33\1\u01cc\25\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\4\33\1\u01cd\24\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\22\33\1\u01ce\6\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\4\33\1\u01cf\24\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\22\33\1\u01d0\6\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\20\33\1\u01d1\10\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\3\33\1\u01d2\25\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\12\33\1\u01d3\16\33\100\0\1\u01d4\102\0\1\u01d5\16\0"+
    "\2\111\3\0\17\111\1\212\27\111\1\u01d6\34\111\3\0"+
    "\17\111\1\212\37\111\1\u01d7\22\111\5\331\1\u01b0\11\331"+
    "\1\u012b\3\331\1\u01b1\11\331\1\u01b2\70\331\1\u012b\45\331"+
    "\1\u01d8\4\331\1\u01d9\16\331\1\u01b0\2\331\1\u01b0\11\331"+
    "\1\u012b\3\331\1\u01b1\11\331\1\u01b2\24\331\1\u01b3\2\331"+
    "\1\u01b3\1\331\1\u01b3\3\331\1\u01b3\4\331\1\u01b3\6\331"+
    "\2\330\3\331\12\330\1\u0129\4\330\1\u012a\25\330\1\u01da"+
    "\36\330\3\331\12\330\1\u0129\4\330\1\u012a\31\330\1\u01db"+
    "\32\330\3\331\1\u01b6\11\330\1\u0129\3\330\1\u0178\1\u012a"+
    "\10\330\1\u0179\51\330\17\u012f\1\u017e\32\u012f\1\u01dc\53\u012f"+
    "\1\u017e\36\u012f\1\u01dd\30\u012f\2\u012d\3\u012f\12\u012d\1\u0131"+
    "\4\u012d\1\u0133\47\u012d\1\u01de\14\u012d\3\u012f\12\u012d\1\u0131"+
    "\4\u012d\1\u0133\43\u012d\1\u01df\16\u012d\17\214\1\327\54\214"+
    "\1\u01e0\31\214\1\327\50\214\1\u01e1\16\214\2\213\3\214"+
    "\12\213\1\326\4\213\1\216\27\213\1\u01e2\34\213\3\214"+
    "\12\213\1\326\4\213\1\216\37\213\1\u01e3\22\213\11\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\22\33\1\u01e4\6\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\2\33\1\u01e5\26\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\4\33\1\u01e6\24\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\u01e7\24\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\13\33\1\u01e8\15\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\2\33\1\u01e9\26\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\12\33\1\u01ea\16\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\2\33\1\u01eb\26\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\4\33\1\u01ec\24\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\u01ed\24\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\21\33\1\u01ee\7\33\60\0\1\u01ef\116\0\1\u01f0\22\0"+
    "\2\111\3\0\17\111\1\212\34\111\1\324\27\111\3\0"+
    "\17\111\1\212\25\111\1\u01f1\34\111\17\331\1\u012b\32\331"+
    "\1\u01f2\53\331\1\u012b\36\331\1\u01f3\30\331\2\330\3\331"+
    "\12\330\1\u0129\4\330\1\u012a\47\330\1\u01f4\14\330\3\331"+
    "\12\330\1\u0129\4\330\1\u012a\43\330\1\u01f5\16\330\17\u012f"+
    "\1\u017e\54\u012f\1\u01f6\31\u012f\1\u017e\50\u012f\1\u01f7\16\u012f"+
    "\2\u012d\3\u012f\12\u012d\1\u0131\4\u012d\1\u0133\27\u012d\1\u01f8"+
    "\34\u012d\3\u012f\12\u012d\1\u0131\4\u012d\1\u0133\37\u012d\1\u01f9"+
    "\22\u012d\17\214\1\327\34\214\1\u01fa\51\214\1\327\44\214"+
    "\1\u01fb\22\214\2\213\3\214\12\213\1\326\4\213\1\216"+
    "\34\213\1\337\27\213\3\214\12\213\1\326\4\213\1\216"+
    "\25\213\1\u01fc\34\213\11\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\22\33\1\u01fd\6\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\1\u01fe\30\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\4\33\1\u01ff\24\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\4\33"+
    "\1\u0200\24\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\3\33\1\u0201\25\33\65\0\1\u0122"+
    "\77\0\1\u0202\34\0\2\111\3\0\17\111\1\212\27\111"+
    "\1\u0203\32\111\17\331\1\u012b\54\331\1\u0204\31\331\1\u012b"+
    "\50\331\1\u0205\16\331\2\330\3\331\12\330\1\u0129\4\330"+
    "\1\u012a\27\330\1\u0206\34\330\3\331\12\330\1\u0129\4\330"+
    "\1\u012a\37\330\1\u0207\22\330\17\u012f\1\u017e\34\u012f\1\u0208"+
    "\51\u012f\1\u017e\44\u012f\1\u0209\22\u012f\2\u012d\3\u012f\12\u012d"+
    "\1\u0131\4\u012d\1\u0133\34\u012d\1\u0134\27\u012d\3\u012f\12\u012d"+
    "\1\u0131\4\u012d\1\u0133\25\u012d\1\u020a\34\u012d\17\214\1\327"+
    "\41\214\1\u0138\44\214\1\327\32\214\1\u020b\34\214\2\213"+
    "\3\214\12\213\1\326\4\213\1\216\27\213\1\u020c\32\213"+
    "\11\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\10\33\1\u020d\20\33\60\0\1\u020e\32\0\2\111"+
    "\3\0\17\111\1\212\31\111\1\u020f\30\111\17\331\1\u012b"+
    "\34\331\1\u0210\51\331\1\u012b\44\331\1\u0211\22\331\2\330"+
    "\3\331\12\330\1\u0129\4\330\1\u012a\34\330\1\u0179\27\330"+
    "\3\331\12\330\1\u0129\4\330\1\u012a\25\330\1\u0212\34\330"+
    "\17\u012f\1\u017e\41\u012f\1\u0180\44\u012f\1\u017e\32\u012f\1\u0213"+
    "\34\u012f\2\u012d\3\u012f\12\u012d\1\u0131\4\u012d\1\u0133\27\u012d"+
    "\1\u0214\32\u012d\17\214\1\327\34\214\1\u0215\32\214\2\213"+
    "\3\214\12\213\1\326\4\213\1\216\31\213\1\u0216\30\213"+
    "\11\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\14\33\1\u0217\14\33\62\0\1\u0218\30\0\2\111"+
    "\3\0\17\111\1\212\23\111\1\u0219\36\111\17\331\1\u012b"+
    "\41\331\1\u01b2\44\331\1\u012b\32\331\1\u021a\34\331\2\330"+
    "\3\331\12\330\1\u0129\4\330\1\u012a\27\330\1\u021b\32\330"+
    "\17\u012f\1\u017e\34\u012f\1\u021c\32\u012f\2\u012d\3\u012f\12\u012d"+
    "\1\u0131\4\u012d\1\u0133\31\u012d\1\u021d\30\u012d\17\214\1\327"+
    "\36\214\1\u021e\30\214\2\213\3\214\12\213\1\326\4\213"+
    "\1\216\23\213\1\u021f\36\213\50\0\1\u0220\36\0\2\111"+
    "\3\0\17\111\1\212\31\111\1\u0221\30\111\17\331\1\u012b"+
    "\34\331\1\u0222\32\331\2\330\3\331\12\330\1\u0129\4\330"+
    "\1\u012a\31\330\1\u0223\30\330\17\u012f\1\u017e\36\u012f\1\u0224"+
    "\30\u012f\2\u012d\3\u012f\12\u012d\1\u0131\4\u012d\1\u0133\23\u012d"+
    "\1\u0225\36\u012d\17\214\1\327\30\214\1\u0226\36\214\2\213"+
    "\3\214\12\213\1\326\4\213\1\216\31\213\1\u0227\30\213"+
    "\56\0\1\u0228\30\0\2\111\3\0\17\111\1\212\51\111"+
    "\1\u0229\10\111\17\331\1\u012b\36\331\1\u022a\30\331\2\330"+
    "\3\331\12\330\1\u0129\4\330\1\u012a\23\330\1\u022b\36\330"+
    "\17\u012f\1\u017e\30\u012f\1\u022c\36\u012f\2\u012d\3\u012f\12\u012d"+
    "\1\u0131\4\u012d\1\u0133\31\u012d\1\u022d\30\u012d\17\214\1\327"+
    "\36\214\1\u022e\30\214\2\213\3\214\12\213\1\326\4\213"+
    "\1\216\51\213\1\u022f\10\213\76\0\1\u0230\10\0\2\111"+
    "\3\0\17\111\1\212\25\111\1\u0231\34\111\17\331\1\u012b"+
    "\30\331\1\u0232\36\331\2\330\3\331\12\330\1\u0129\4\330"+
    "\1\u012a\31\330\1\u0233\30\330\17\u012f\1\u017e\36\u012f\1\u0234"+
    "\30\u012f\2\u012d\3\u012f\12\u012d\1\u0131\4\u012d\1\u0133\51\u012d"+
    "\1\u0235\10\u012d\17\214\1\327\56\214\1\u0236\10\214\2\213"+
    "\3\214\12\213\1\326\4\213\1\216\25\213\1\u0237\34\213"+
    "\52\0\1\u0238\34\0\2\111\3\0\17\111\1\212\37\111"+
    "\1\324\22\111\17\331\1\u012b\36\331\1\u0239\30\331\2\330"+
    "\3\331\12\330\1\u0129\4\330\1\u012a\51\330\1\u023a\10\330"+
    "\17\u012f\1\u017e\56\u012f\1\u023b\10\u012f\2\u012d\3\u012f\12\u012d"+
    "\1\u0131\4\u012d\1\u0133\25\u012d\1\u023c\34\u012d\17\214\1\327"+
    "\32\214\1\u023d\34\214\2\213\3\214\12\213\1\326\4\213"+
    "\1\216\37\213\1\337\22\213\64\0\1\u0122\22\0\17\331"+
    "\1\u012b\56\331\1\u023e\10\331\2\330\3\331\12\330\1\u0129"+
    "\4\330\1\u012a\25\330\1\u023f\34\330\17\u012f\1\u017e\32\u012f"+
    "\1\u0240\34\u012f\2\u012d\3\u012f\12\u012d\1\u0131\4\u012d\1\u0133"+
    "\37\u012d\1\u0134\22\u012d\17\214\1\327\44\214\1\u0138\22\214"+
    "\17\331\1\u012b\32\331\1\u0241\34\331\2\330\3\331\12\330"+
    "\1\u0129\4\330\1\u012a\37\330\1\u0179\22\330\17\u012f\1\u017e"+
    "\44\u012f\1\u0180\22\u012f\17\331\1\u012b\44\331\1\u01b2\22\331";

  private static int [] zzUnpacktrans() {
    int [] result = new int[32234];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\3\1\2\11\2\1\1\11"+
    "\4\1\2\11\3\1\1\11\2\1\5\11\22\1\1\11"+
    "\1\1\3\11\1\0\1\1\3\0\2\11\1\0\1\11"+
    "\1\0\6\11\3\0\1\1\1\11\1\1\3\11\61\1"+
    "\3\11\4\0\1\11\5\0\75\1\3\0\1\11\1\1"+
    "\3\0\1\1\6\0\1\1\3\0\1\1\1\0\76\1"+
    "\3\0\1\11\4\0\1\1\1\11\3\0\1\1\7\0"+
    "\1\1\3\0\1\1\4\0\63\1\1\11\4\0\1\1"+
    "\3\0\1\1\2\0\1\11\3\0\1\1\10\0\43\1"+
    "\6\0\1\1\4\0\1\1\10\0\24\1\20\0\13\1"+
    "\16\0\5\1\13\0\1\1\1\0\1\1\6\0\3\1"+
    "\4\0\2\1\4\0\2\1\5\0\1\1\27\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[577];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ValaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 138: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 139: break;
          case 3:
            { return ValaTypes.EXCLAMATION;
            }
          // fall through
          case 140: break;
          case 4:
            { return ValaTypes.POUND;
            }
          // fall through
          case 141: break;
          case 5:
            { return ValaTypes.DOLLAR;
            }
          // fall through
          case 142: break;
          case 6:
            { return ValaTypes.MODULO;
            }
          // fall through
          case 143: break;
          case 7:
            { return ValaTypes.AND;
            }
          // fall through
          case 144: break;
          case 8:
            { return ValaTypes.LPAREN;
            }
          // fall through
          case 145: break;
          case 9:
            { return ValaTypes.RPAREN;
            }
          // fall through
          case 146: break;
          case 10:
            { return ValaTypes.STAR;
            }
          // fall through
          case 147: break;
          case 11:
            { return ValaTypes.PLUS;
            }
          // fall through
          case 148: break;
          case 12:
            { return ValaTypes.COMMA;
            }
          // fall through
          case 149: break;
          case 13:
            { return ValaTypes.MINUS;
            }
          // fall through
          case 150: break;
          case 14:
            { return ValaTypes.DOT;
            }
          // fall through
          case 151: break;
          case 15:
            { return ValaTypes.FORWARD_SLASH;
            }
          // fall through
          case 152: break;
          case 16:
            { return ValaTypes.INTEGER_LITERAL;
            }
          // fall through
          case 153: break;
          case 17:
            { return ValaTypes.COLON;
            }
          // fall through
          case 154: break;
          case 18:
            { return ValaTypes.SEMICOLON;
            }
          // fall through
          case 155: break;
          case 19:
            { return ValaTypes.LESS_THAN;
            }
          // fall through
          case 156: break;
          case 20:
            { return ValaTypes.EQUALS;
            }
          // fall through
          case 157: break;
          case 21:
            { return ValaTypes.GREATER_THAN;
            }
          // fall through
          case 158: break;
          case 22:
            { return ValaTypes.QUESTION_MARK;
            }
          // fall through
          case 159: break;
          case 23:
            { return ValaTypes.AT;
            }
          // fall through
          case 160: break;
          case 24:
            { return ValaTypes.IDENTIFIER;
            }
          // fall through
          case 161: break;
          case 25:
            { return ValaTypes.LBRACKET;
            }
          // fall through
          case 162: break;
          case 26:
            { return ValaTypes.BACKSLASH;
            }
          // fall through
          case 163: break;
          case 27:
            { return ValaTypes.RBRACKET;
            }
          // fall through
          case 164: break;
          case 28:
            { return ValaTypes.CARET;
            }
          // fall through
          case 165: break;
          case 29:
            { return ValaTypes.BACKTICK;
            }
          // fall through
          case 166: break;
          case 30:
            { return ValaTypes.LBRACE;
            }
          // fall through
          case 167: break;
          case 31:
            { return ValaTypes.PIPE;
            }
          // fall through
          case 168: break;
          case 32:
            { return ValaTypes.RBRACE;
            }
          // fall through
          case 169: break;
          case 33:
            { return ValaTypes.TILDE;
            }
          // fall through
          case 170: break;
          case 34:
            { return ValaTypes.NOT_EQUALS;
            }
          // fall through
          case 171: break;
          case 35:
            { return ValaTypes.STRING_LITERAL;
            }
          // fall through
          case 172: break;
          case 36:
            { return ValaTypes.MODULO_EQUALS;
            }
          // fall through
          case 173: break;
          case 37:
            { return ValaTypes.AND_AND;
            }
          // fall through
          case 174: break;
          case 38:
            { return ValaTypes.CHAR_LITERAL;
            }
          // fall through
          case 175: break;
          case 39:
            { return ValaTypes.MULTIPLY_EQUALS;
            }
          // fall through
          case 176: break;
          case 40:
            { return ValaTypes.INCREMENT;
            }
          // fall through
          case 177: break;
          case 41:
            { return ValaTypes.PLUS_EQUALS;
            }
          // fall through
          case 178: break;
          case 42:
            { return ValaTypes.DECREMENT;
            }
          // fall through
          case 179: break;
          case 43:
            { return ValaTypes.MINUS_EQUALS;
            }
          // fall through
          case 180: break;
          case 44:
            { return ValaTypes.ARROW;
            }
          // fall through
          case 181: break;
          case 45:
            { return ValaTypes.COMMENT;
            }
          // fall through
          case 182: break;
          case 46:
            { return ValaTypes.DIVIDE_EQUALS;
            }
          // fall through
          case 183: break;
          case 47:
            { return ValaTypes.DECIMAL_LITERAL;
            }
          // fall through
          case 184: break;
          case 48:
            { return ValaTypes.LESS_THAN_EQUALS;
            }
          // fall through
          case 185: break;
          case 49:
            { return ValaTypes.EQUALS_EQUALS;
            }
          // fall through
          case 186: break;
          case 50:
            { return ValaTypes.GREATER_THAN_EQUALS;
            }
          // fall through
          case 187: break;
          case 51:
            { return ValaTypes.DO;
            }
          // fall through
          case 188: break;
          case 52:
            { return ValaTypes.IF;
            }
          // fall through
          case 189: break;
          case 53:
            { return ValaTypes.IN;
            }
          // fall through
          case 190: break;
          case 54:
            { return ValaTypes.PIPE_EQUALS;
            }
          // fall through
          case 191: break;
          case 55:
            { return ValaTypes.OR_OR;
            }
          // fall through
          case 192: break;
          case 56:
            { return ValaTypes.DOT_DOT_DOT;
            }
          // fall through
          case 193: break;
          case 57:
            { return ValaTypes.FOR;
            }
          // fall through
          case 194: break;
          case 58:
            { return ValaTypes.INT;
            }
          // fall through
          case 195: break;
          case 59:
            { return ValaTypes.NEW;
            }
          // fall through
          case 196: break;
          case 60:
            { return ValaTypes.OUT;
            }
          // fall through
          case 197: break;
          case 61:
            { return ValaTypes.REF;
            }
          // fall through
          case 198: break;
          case 62:
            { return ValaTypes.TRY;
            }
          // fall through
          case 199: break;
          case 63:
            { return ValaTypes.VAR;
            }
          // fall through
          case 200: break;
          case 64:
            { return ValaTypes.PREPROCESSOR_DIRECTIVE;
            }
          // fall through
          case 201: break;
          case 65:
            { return ValaTypes.REGULAR_EXPRESSION;
            }
          // fall through
          case 202: break;
          case 66:
            { return ValaTypes.BLOCK_COMMENT;
            }
          // fall through
          case 203: break;
          case 67:
            { return ValaTypes.BASE;
            }
          // fall through
          case 204: break;
          case 68:
            { return ValaTypes.BOOL;
            }
          // fall through
          case 205: break;
          case 69:
            { return ValaTypes.CASE;
            }
          // fall through
          case 206: break;
          case 70:
            { return ValaTypes.CHAR;
            }
          // fall through
          case 207: break;
          case 71:
            { return ValaTypes.ELSE;
            }
          // fall through
          case 208: break;
          case 72:
            { return ValaTypes.ENUM;
            }
          // fall through
          case 209: break;
          case 73:
            { return ValaTypes.INT8;
            }
          // fall through
          case 210: break;
          case 74:
            { return ValaTypes.LOCK;
            }
          // fall through
          case 211: break;
          case 75:
            { return ValaTypes.LONG;
            }
          // fall through
          case 212: break;
          case 76:
            { return ValaTypes.NULL;
            }
          // fall through
          case 213: break;
          case 77:
            { return ValaTypes.THIS;
            }
          // fall through
          case 214: break;
          case 78:
            { return ValaTypes.TRUE;
            }
          // fall through
          case 215: break;
          case 79:
            { return ValaTypes.UINT;
            }
          // fall through
          case 216: break;
          case 80:
            { return ValaTypes.VOID;
            }
          // fall through
          case 217: break;
          case 81:
            { return ValaTypes.WEAK;
            }
          // fall through
          case 218: break;
          case 82:
            { return ValaTypes.DOC_COMMENT;
            }
          // fall through
          case 219: break;
          case 83:
            { return ValaTypes.ASYNC;
            }
          // fall through
          case 220: break;
          case 84:
            { return ValaTypes.BREAK;
            }
          // fall through
          case 221: break;
          case 85:
            { return ValaTypes.CATCH;
            }
          // fall through
          case 222: break;
          case 86:
            { return ValaTypes.CLASS;
            }
          // fall through
          case 223: break;
          case 87:
            { return ValaTypes.CONST;
            }
          // fall through
          case 224: break;
          case 88:
            { return ValaTypes.FALSE;
            }
          // fall through
          case 225: break;
          case 89:
            { return ValaTypes.FLOAT;
            }
          // fall through
          case 226: break;
          case 90:
            { return ValaTypes.INT16;
            }
          // fall through
          case 227: break;
          case 91:
            { return ValaTypes.INT32;
            }
          // fall through
          case 228: break;
          case 92:
            { return ValaTypes.INT64;
            }
          // fall through
          case 229: break;
          case 93:
            { return ValaTypes.OWNED;
            }
          // fall through
          case 230: break;
          case 94:
            { return ValaTypes.SHORT;
            }
          // fall through
          case 231: break;
          case 95:
            { return ValaTypes.THROW;
            }
          // fall through
          case 232: break;
          case 96:
            { return ValaTypes.UCHAR;
            }
          // fall through
          case 233: break;
          case 97:
            { return ValaTypes.UINT8;
            }
          // fall through
          case 234: break;
          case 98:
            { return ValaTypes.ULONG;
            }
          // fall through
          case 235: break;
          case 99:
            { return ValaTypes.USING;
            }
          // fall through
          case 236: break;
          case 100:
            { return ValaTypes.WHILE;
            }
          // fall through
          case 237: break;
          case 101:
            { return ValaTypes.YIELD;
            }
          // fall through
          case 238: break;
          case 102:
            { return ValaTypes.TRIPLE_QUOTE_STRING;
            }
          // fall through
          case 239: break;
          case 103:
            { return ValaTypes.DOUBLE;
            }
          // fall through
          case 240: break;
          case 104:
            { return ValaTypes.EXTERN;
            }
          // fall through
          case 241: break;
          case 105:
            { return ValaTypes.PUBLIC;
            }
          // fall through
          case 242: break;
          case 106:
            { return ValaTypes.RETURN;
            }
          // fall through
          case 243: break;
          case 107:
            { return ValaTypes.SIGNAL;
            }
          // fall through
          case 244: break;
          case 108:
            { return ValaTypes.SIZE_T;
            }
          // fall through
          case 245: break;
          case 109:
            { return ValaTypes.STATIC;
            }
          // fall through
          case 246: break;
          case 110:
            { return ValaTypes.STRING;
            }
          // fall through
          case 247: break;
          case 111:
            { return ValaTypes.STRUCT;
            }
          // fall through
          case 248: break;
          case 112:
            { return ValaTypes.SWITCH;
            }
          // fall through
          case 249: break;
          case 113:
            { return ValaTypes.THROWS;
            }
          // fall through
          case 250: break;
          case 114:
            { return ValaTypes.UINT16;
            }
          // fall through
          case 251: break;
          case 115:
            { return ValaTypes.UINT32;
            }
          // fall through
          case 252: break;
          case 116:
            { return ValaTypes.UINT64;
            }
          // fall through
          case 253: break;
          case 117:
            { return ValaTypes.USHORT;
            }
          // fall through
          case 254: break;
          case 118:
            { return ValaTypes.DEFAULT;
            }
          // fall through
          case 255: break;
          case 119:
            { return ValaTypes.ENSURES;
            }
          // fall through
          case 256: break;
          case 120:
            { return ValaTypes.FINALLY;
            }
          // fall through
          case 257: break;
          case 121:
            { return ValaTypes.FOREACH;
            }
          // fall through
          case 258: break;
          case 122:
            { return ValaTypes.PRIVATE;
            }
          // fall through
          case 259: break;
          case 123:
            { return ValaTypes.SSIZE_T;
            }
          // fall through
          case 260: break;
          case 124:
            { return ValaTypes.UNICHAR;
            }
          // fall through
          case 261: break;
          case 125:
            { return ValaTypes.UNOWNED;
            }
          // fall through
          case 262: break;
          case 126:
            { return ValaTypes.VIRTUAL;
            }
          // fall through
          case 263: break;
          case 127:
            { return ValaTypes.ABSTRACT;
            }
          // fall through
          case 264: break;
          case 128:
            { return ValaTypes.CONTINUE;
            }
          // fall through
          case 265: break;
          case 129:
            { return ValaTypes.DELEGATE;
            }
          // fall through
          case 266: break;
          case 130:
            { return ValaTypes.INTERNAL;
            }
          // fall through
          case 267: break;
          case 131:
            { return ValaTypes.OVERRIDE;
            }
          // fall through
          case 268: break;
          case 132:
            { return ValaTypes.REQUIRES;
            }
          // fall through
          case 269: break;
          case 133:
            { return ValaTypes.CONSTRUCT;
            }
          // fall through
          case 270: break;
          case 134:
            { return ValaTypes.INTERFACE;
            }
          // fall through
          case 271: break;
          case 135:
            { return ValaTypes.NAMESPACE;
            }
          // fall through
          case 272: break;
          case 136:
            { return ValaTypes.PROTECTED;
            }
          // fall through
          case 273: break;
          case 137:
            { return ValaTypes.ERRORDOMAIN;
            }
          // fall through
          case 274: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
