// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Vala.flex

package com.tbusk.vala_plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tbusk.vala_plugin.psi.ValaTypes;
import com.intellij.psi.TokenType;


class ValaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\20\1\25\1\20\1\26\1\20\1\0"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\32\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\0\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\35\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\35\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\35\1\70\1\35\1\71"+
    "\1\72\1\73\1\74\6\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\20\25\1\31\1\32\1\33\1\34\1\35"+
    "\1\0\1\36\1\0\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\0\1\47\1\50\1\16\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\17\25\1\57\1\60"+
    "\23\25\1\61\1\62\2\0\1\63\1\64\17\25\1\60"+
    "\1\65\15\25\1\66\7\25\1\67\2\25\3\0\1\70"+
    "\1\25\1\71\1\25\1\72\1\25\1\73\4\25\1\74"+
    "\1\75\7\25\1\76\1\25\1\77\1\25\1\100\12\25"+
    "\1\101\1\25\1\102\6\25\1\103\1\70\1\104\1\25"+
    "\1\105\1\106\1\107\2\25\1\110\1\25\1\111\1\25"+
    "\1\112\1\113\1\114\7\25\1\115\4\25\1\116\3\25"+
    "\1\117\1\120\3\25\1\121\3\25\1\122\10\25\1\123"+
    "\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133"+
    "\2\25\1\134\2\25\1\135\1\60\4\25\1\136\1\25"+
    "\1\137\1\140\1\141\1\142\1\25\1\143\1\25\1\144"+
    "\1\25\1\145\1\146\1\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\75"+
    "\0\75\0\u01ab\0\u01e8\0\75\0\u0225\0\75\0\u0262\0\u029f"+
    "\0\75\0\u02dc\0\u0319\0\u0356\0\75\0\75\0\u0393\0\75"+
    "\0\75\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726"+
    "\0\u0763\0\u07a0\0\75\0\u07dd\0\75\0\75\0\75\0\364"+
    "\0\75\0\u081a\0\75\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\75\0\u0857\0\u0894\0\75\0\u08d1\0\u090e\0\75"+
    "\0\75\0\75\0\u094b\0\75\0\u0988\0\u09c5\0\u0a02\0\u0a3f"+
    "\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27"+
    "\0\u0c64\0\u0ca1\0\u0cde\0\u0393\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2"+
    "\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2"+
    "\0\75\0\75\0\u11df\0\u121c\0\75\0\75\0\u1259\0\u1296"+
    "\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e"+
    "\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666"+
    "\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e"+
    "\0\u188b\0\u18c8\0\u1905\0\u1942\0\u0393\0\u197f\0\u19bc\0\u19f9"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u0393\0\u1b2a\0\u1b67\0\u1ba4"+
    "\0\u1be1\0\u1c1e\0\u1be1\0\u1c5b\0\u0393\0\u1c98\0\u0393\0\u1cd5"+
    "\0\u0393\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u0393\0\u0393\0\u1e06"+
    "\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u0393\0\u1fb1"+
    "\0\u0393\0\u1fee\0\u0393\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f"+
    "\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u0393\0\u228d\0\u22ca"+
    "\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438\0\u0393\0\75"+
    "\0\75\0\u2475\0\u0393\0\u0393\0\u0393\0\u24b2\0\u24ef\0\u0393"+
    "\0\u252c\0\u0393\0\u2569\0\u0393\0\u0393\0\u0393\0\u25a6\0\u25e3"+
    "\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u0393\0\u2751\0\u278e"+
    "\0\u27cb\0\u2808\0\u0393\0\u2845\0\u2882\0\u28bf\0\u0393\0\u0393"+
    "\0\u28fc\0\u2939\0\u2976\0\u0393\0\u29b3\0\u29f0\0\u2a2d\0\u0393"+
    "\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15"+
    "\0\u0393\0\u0393\0\u0393\0\u0393\0\u0393\0\u0393\0\u0393\0\u0393"+
    "\0\u0393\0\u2c52\0\u2c8f\0\u0393\0\u2ccc\0\u2d09\0\u0393\0\u0393"+
    "\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd\0\u0393\0\u2e3a\0\u0393\0\u0393"+
    "\0\u0393\0\u0393\0\u2e77\0\u0393\0\u2eb4\0\u0393\0\u2ef1\0\u0393"+
    "\0\u0393\0\u0393";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\7\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\2\1\31\1\32\1\2\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\2\27\1\41\1\27\1\42\1\27\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\2\27"+
    "\1\53\1\54\1\55\1\56\76\0\2\3\123\0\1\57"+
    "\43\0\5\60\1\61\31\60\1\62\35\60\31\0\1\63"+
    "\52\0\1\64\21\0\1\65\74\0\1\66\56\0\1\67"+
    "\15\0\1\70\60\0\1\71\13\0\1\72\55\0\1\73"+
    "\4\0\1\74\11\0\1\75\61\0\1\76\1\0\7\20"+
    "\76\0\1\77\1\100\74\0\1\101\74\0\1\102\1\103"+
    "\62\0\7\27\6\0\1\27\4\0\27\27\35\0\1\104"+
    "\63\0\7\27\6\0\1\27\4\0\2\27\1\105\24\27"+
    "\24\0\7\27\6\0\1\27\4\0\16\27\1\106\1\27"+
    "\1\107\6\27\24\0\7\27\6\0\1\27\4\0\1\27"+
    "\1\110\6\27\1\111\2\27\1\112\2\27\1\113\10\27"+
    "\24\0\7\27\6\0\1\27\4\0\5\27\1\114\10\27"+
    "\1\115\10\27\24\0\7\27\6\0\1\27\4\0\13\27"+
    "\1\116\1\27\1\117\11\27\24\0\7\27\6\0\1\27"+
    "\4\0\1\27\1\120\7\27\1\121\1\27\1\122\2\27"+
    "\1\123\10\27\24\0\7\27\6\0\1\27\4\0\6\27"+
    "\1\124\6\27\1\125\11\27\24\0\7\27\6\0\1\27"+
    "\4\0\16\27\1\126\10\27\24\0\7\27\6\0\1\27"+
    "\4\0\1\27\1\127\21\27\1\130\3\27\24\0\7\27"+
    "\6\0\1\27\4\0\24\27\1\131\2\27\24\0\7\27"+
    "\6\0\1\27\4\0\20\27\1\132\2\27\1\133\3\27"+
    "\24\0\7\27\6\0\1\27\4\0\5\27\1\134\21\27"+
    "\24\0\7\27\6\0\1\27\4\0\10\27\1\135\11\27"+
    "\1\136\2\27\1\137\1\27\24\0\7\27\6\0\1\27"+
    "\4\0\20\27\1\140\6\27\24\0\7\27\6\0\1\27"+
    "\4\0\3\27\1\141\5\27\1\142\1\27\1\143\1\27"+
    "\1\144\3\27\1\145\5\27\24\0\7\27\6\0\1\27"+
    "\4\0\1\27\1\146\7\27\1\147\4\27\1\150\10\27"+
    "\35\0\1\151\40\0\1\152\2\0\2\60\2\0\71\60"+
    "\12\153\1\154\62\153\2\74\1\0\72\74\20\0\7\76"+
    "\77\0\1\155\74\0\1\156\63\0\7\27\6\0\1\27"+
    "\4\0\21\27\1\157\5\27\24\0\7\27\6\0\1\27"+
    "\4\0\16\27\1\160\10\27\24\0\7\27\6\0\1\27"+
    "\4\0\5\27\1\161\21\27\24\0\7\27\6\0\1\27"+
    "\4\0\21\27\1\162\1\163\4\27\24\0\7\27\6\0"+
    "\1\27\4\0\1\27\1\164\25\27\24\0\7\27\6\0"+
    "\1\27\4\0\1\27\1\165\25\27\24\0\7\27\6\0"+
    "\1\27\4\0\15\27\1\166\11\27\24\0\7\27\6\0"+
    "\1\27\4\0\6\27\1\167\20\27\24\0\7\27\6\0"+
    "\1\27\4\0\23\27\1\170\3\27\24\0\7\27\6\0"+
    "\1\27\4\0\21\27\1\171\5\27\24\0\7\27\6\0"+
    "\1\27\4\0\23\27\1\172\3\27\24\0\7\27\6\0"+
    "\1\27\4\0\13\27\1\173\13\27\24\0\7\27\6\0"+
    "\1\27\4\0\15\27\1\174\11\27\24\0\7\27\6\0"+
    "\1\27\4\0\16\27\1\175\10\27\24\0\7\27\6\0"+
    "\1\27\4\0\20\27\1\176\6\27\24\0\7\27\6\0"+
    "\1\27\4\0\22\27\1\177\4\27\24\0\7\27\6\0"+
    "\1\27\4\0\15\27\1\200\11\27\24\0\7\27\6\0"+
    "\1\27\4\0\14\27\1\201\12\27\24\0\7\27\6\0"+
    "\1\27\4\0\13\27\1\202\13\27\24\0\7\27\6\0"+
    "\1\27\4\0\5\27\1\203\21\27\24\0\7\27\6\0"+
    "\1\27\4\0\11\27\1\204\4\27\1\205\10\27\24\0"+
    "\7\27\6\0\1\27\4\0\2\27\1\206\24\27\24\0"+
    "\7\27\6\0\1\27\4\0\22\27\1\207\4\27\24\0"+
    "\7\27\6\0\1\27\4\0\16\27\1\210\10\27\24\0"+
    "\7\27\6\0\1\27\4\0\1\27\1\211\16\27\1\212"+
    "\6\27\24\0\7\27\6\0\1\27\4\0\11\27\1\213"+
    "\15\27\24\0\7\27\6\0\1\27\4\0\23\27\1\214"+
    "\2\27\1\215\24\0\7\27\6\0\1\27\4\0\10\27"+
    "\1\216\16\27\24\0\7\27\6\0\1\27\4\0\15\27"+
    "\1\217\11\27\24\0\7\27\6\0\1\27\4\0\16\27"+
    "\1\220\10\27\24\0\7\27\6\0\1\27\4\0\11\27"+
    "\1\221\4\27\1\222\10\27\24\0\7\27\6\0\1\27"+
    "\4\0\10\27\1\223\1\224\15\27\24\0\7\27\6\0"+
    "\1\27\4\0\20\27\1\225\6\27\24\0\7\27\6\0"+
    "\1\27\4\0\20\27\1\226\6\27\24\0\7\27\6\0"+
    "\1\27\4\0\11\27\1\227\15\27\4\0\12\153\1\230"+
    "\62\153\12\231\1\232\4\231\1\233\55\231\20\0\7\27"+
    "\6\0\1\27\4\0\22\27\1\234\4\27\24\0\7\27"+
    "\6\0\1\27\4\0\13\27\1\235\13\27\24\0\7\27"+
    "\6\0\1\27\4\0\1\27\1\236\25\27\24\0\7\27"+
    "\6\0\1\27\4\0\5\27\1\237\21\27\24\0\7\27"+
    "\6\0\1\27\4\0\3\27\1\240\23\27\24\0\7\27"+
    "\6\0\1\27\4\0\20\27\1\241\6\27\24\0\7\27"+
    "\6\0\1\27\4\0\21\27\1\242\5\27\24\0\7\27"+
    "\6\0\1\27\4\0\21\27\1\243\5\27\24\0\7\27"+
    "\6\0\1\27\4\0\1\27\1\244\25\27\24\0\7\27"+
    "\6\0\1\27\4\0\2\27\1\245\24\27\24\0\7\27"+
    "\6\0\1\27\4\0\5\27\1\246\21\27\24\0\7\27"+
    "\6\0\1\27\4\0\14\27\1\247\12\27\24\0\7\27"+
    "\6\0\1\27\4\0\21\27\1\250\5\27\24\0\7\27"+
    "\6\0\1\27\4\0\1\27\1\251\25\27\24\0\7\27"+
    "\6\0\1\27\4\0\1\27\1\252\25\27\24\0\7\27"+
    "\6\0\1\27\4\0\5\27\1\253\21\27\24\0\1\27"+
    "\1\254\1\27\1\255\1\27\1\256\1\257\6\0\1\27"+
    "\4\0\5\27\1\260\21\27\24\0\7\27\6\0\1\27"+
    "\4\0\7\27\1\261\17\27\24\0\7\27\6\0\1\27"+
    "\4\0\5\27\1\262\21\27\24\0\7\27\6\0\1\27"+
    "\4\0\13\27\1\263\13\27\24\0\7\27\6\0\1\27"+
    "\4\0\20\27\1\264\6\27\24\0\7\27\6\0\1\27"+
    "\4\0\24\27\1\265\2\27\24\0\7\27\6\0\1\27"+
    "\4\0\22\27\1\266\4\27\24\0\7\27\6\0\1\27"+
    "\4\0\13\27\1\267\13\27\24\0\7\27\6\0\1\27"+
    "\4\0\23\27\1\270\3\27\24\0\7\27\6\0\1\27"+
    "\4\0\20\27\1\271\6\27\24\0\7\27\6\0\1\27"+
    "\4\0\22\27\1\272\4\27\24\0\7\27\6\0\1\27"+
    "\4\0\11\27\1\273\11\27\1\274\3\27\24\0\7\27"+
    "\6\0\1\27\4\0\22\27\1\275\4\27\24\0\7\27"+
    "\6\0\1\27\4\0\5\27\1\276\21\27\24\0\7\27"+
    "\6\0\1\27\4\0\1\27\1\277\25\27\24\0\7\27"+
    "\6\0\1\27\4\0\22\27\1\300\4\27\24\0\7\27"+
    "\6\0\1\27\4\0\15\27\1\301\11\27\24\0\7\27"+
    "\6\0\1\27\4\0\3\27\1\302\23\27\24\0\7\27"+
    "\6\0\1\27\4\0\25\27\1\303\1\27\24\0\7\27"+
    "\6\0\1\27\4\0\16\27\1\304\10\27\24\0\7\27"+
    "\6\0\1\27\4\0\15\27\1\305\11\27\24\0\7\27"+
    "\6\0\1\27\4\0\22\27\1\306\4\27\24\0\7\27"+
    "\6\0\1\27\4\0\4\27\1\307\22\27\4\0\12\153"+
    "\1\230\4\153\1\310\55\153\12\231\1\232\74\231\1\232"+
    "\4\231\1\311\55\231\20\0\7\27\6\0\1\27\4\0"+
    "\20\27\1\312\6\27\24\0\7\27\6\0\1\27\4\0"+
    "\12\27\1\313\14\27\24\0\7\27\6\0\1\27\4\0"+
    "\10\27\1\215\16\27\24\0\7\27\6\0\1\27\4\0"+
    "\21\27\1\314\5\27\24\0\7\27\6\0\1\27\4\0"+
    "\22\27\1\315\4\27\24\0\7\27\6\0\1\27\4\0"+
    "\23\27\1\316\3\27\24\0\7\27\6\0\1\27\4\0"+
    "\13\27\1\317\13\27\24\0\7\27\6\0\1\27\4\0"+
    "\5\27\1\320\21\27\24\0\7\27\6\0\1\27\4\0"+
    "\13\27\1\321\13\27\24\0\7\27\6\0\1\27\4\0"+
    "\22\27\1\322\4\27\24\0\7\27\6\0\1\27\4\0"+
    "\1\27\1\323\25\27\24\0\5\27\1\324\1\27\6\0"+
    "\1\27\4\0\27\27\24\0\2\27\1\325\4\27\6\0"+
    "\1\27\4\0\27\27\24\0\4\27\1\326\2\27\6\0"+
    "\1\27\4\0\27\27\24\0\7\27\6\0\1\27\4\0"+
    "\20\27\1\327\6\27\24\0\7\27\6\0\1\27\4\0"+
    "\21\27\1\330\5\27\24\0\7\27\6\0\1\27\4\0"+
    "\20\27\1\331\6\27\24\0\7\27\6\0\1\27\4\0"+
    "\1\27\1\332\25\27\24\0\7\27\6\0\1\27\4\0"+
    "\5\27\1\333\21\27\24\0\7\27\6\0\1\27\4\0"+
    "\11\27\1\334\15\27\24\0\7\27\6\0\1\27\4\0"+
    "\20\27\1\335\6\27\24\0\7\27\6\0\1\27\4\0"+
    "\22\27\1\336\4\27\24\0\7\27\6\0\1\27\4\0"+
    "\11\27\1\337\15\27\24\0\7\27\6\0\1\27\4\0"+
    "\15\27\1\340\11\27\24\0\7\27\6\0\1\27\4\0"+
    "\3\27\1\341\23\27\24\0\7\27\6\0\1\27\4\0"+
    "\3\27\1\342\23\27\24\0\7\27\6\0\1\27\4\0"+
    "\20\27\1\343\6\27\24\0\1\27\1\344\1\27\1\345"+
    "\1\27\1\346\1\347\6\0\1\27\4\0\27\27\24\0"+
    "\7\27\6\0\1\27\4\0\7\27\1\350\17\27\24\0"+
    "\7\27\6\0\1\27\4\0\10\27\1\351\16\27\24\0"+
    "\7\27\6\0\1\27\4\0\15\27\1\352\11\27\24\0"+
    "\7\27\6\0\1\27\4\0\20\27\1\353\6\27\24\0"+
    "\7\27\6\0\1\27\4\0\7\27\1\354\17\27\24\0"+
    "\7\27\6\0\1\27\4\0\23\27\1\355\3\27\24\0"+
    "\7\27\6\0\1\27\4\0\1\27\1\356\25\27\24\0"+
    "\7\27\6\0\1\27\4\0\13\27\1\357\13\27\24\0"+
    "\7\27\6\0\1\27\4\0\5\27\1\360\21\27\24\0"+
    "\7\27\6\0\1\27\4\0\13\27\1\361\13\27\24\0"+
    "\7\27\6\0\1\27\4\0\3\27\1\362\23\27\24\0"+
    "\7\27\6\0\1\27\4\0\6\27\1\363\6\27\1\364"+
    "\11\27\24\0\7\27\6\0\1\27\4\0\17\27\1\365"+
    "\7\27\24\0\7\27\6\0\1\27\4\0\11\27\1\366"+
    "\15\27\24\0\7\27\6\0\1\27\4\0\22\27\1\367"+
    "\4\27\24\0\7\27\6\0\1\27\4\0\3\27\1\370"+
    "\23\27\24\0\7\27\6\0\1\27\4\0\3\27\1\371"+
    "\23\27\24\0\7\27\6\0\1\27\4\0\15\27\1\372"+
    "\11\27\24\0\7\27\6\0\1\27\4\0\3\27\1\373"+
    "\23\27\24\0\7\27\6\0\1\27\4\0\7\27\1\374"+
    "\17\27\24\0\7\27\6\0\1\27\4\0\22\27\1\375"+
    "\4\27\24\0\7\27\6\0\1\27\4\0\10\27\1\376"+
    "\16\27\24\0\5\27\1\377\1\27\6\0\1\27\4\0"+
    "\27\27\24\0\2\27\1\u0100\4\27\6\0\1\27\4\0"+
    "\27\27\24\0\4\27\1\u0101\2\27\6\0\1\27\4\0"+
    "\27\27\24\0\7\27\6\0\1\27\4\0\1\27\1\u0102"+
    "\25\27\24\0\7\27\6\0\1\27\4\0\5\27\1\u0103"+
    "\21\27\24\0\7\27\6\0\1\27\4\0\22\27\1\u0104"+
    "\4\27\24\0\7\27\6\0\1\27\4\0\1\27\1\u0105"+
    "\25\27\24\0\7\27\6\0\1\27\4\0\3\27\1\u0106"+
    "\23\27\24\0\7\27\6\0\1\27\4\0\22\27\1\u0107"+
    "\4\27\24\0\7\27\6\0\1\27\4\0\26\27\1\215"+
    "\24\0\7\27\6\0\1\27\4\0\10\27\1\u0108\16\27"+
    "\24\0\7\27\6\0\1\27\4\0\1\27\1\u0109\25\27"+
    "\24\0\7\27\6\0\1\27\4\0\1\27\1\u010a\25\27"+
    "\24\0\7\27\6\0\1\27\4\0\1\27\1\u010b\25\27"+
    "\24\0\7\27\6\0\1\27\4\0\4\27\1\u010c\22\27"+
    "\24\0\7\27\6\0\1\27\4\0\5\27\1\u010d\21\27"+
    "\24\0\7\27\6\0\1\27\4\0\22\27\1\u010e\4\27"+
    "\24\0\7\27\6\0\1\27\4\0\20\27\1\u010f\6\27"+
    "\24\0\7\27\6\0\1\27\4\0\4\27\1\u0110\22\27"+
    "\24\0\7\27\6\0\1\27\4\0\13\27\1\u0111\13\27"+
    "\24\0\7\27\6\0\1\27\4\0\22\27\1\u0112\4\27"+
    "\24\0\7\27\6\0\1\27\4\0\3\27\1\u0113\23\27"+
    "\24\0\7\27\6\0\1\27\4\0\13\27\1\u0114\13\27"+
    "\24\0\7\27\6\0\1\27\4\0\3\27\1\u0115\23\27"+
    "\24\0\7\27\6\0\1\27\4\0\5\27\1\u0116\21\27"+
    "\24\0\7\27\6\0\1\27\4\0\5\27\1\u0117\21\27"+
    "\24\0\7\27\6\0\1\27\4\0\5\27\1\u0118\21\27"+
    "\24\0\7\27\6\0\1\27\4\0\5\27\1\u0119\21\27"+
    "\24\0\7\27\6\0\1\27\4\0\4\27\1\u011a\22\27"+
    "\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12078];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\2\11\2\1\1\11\1\1\1\11"+
    "\2\1\1\11\3\1\2\11\1\1\2\11\21\1\1\11"+
    "\1\1\3\11\1\0\1\11\1\0\10\11\1\0\1\1"+
    "\1\11\2\1\3\11\1\1\1\11\44\1\2\11\2\0"+
    "\2\11\51\1\3\0\55\1\2\11\121\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ValaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 104: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 105: break;
          case 3:
            { return ValaTypes.NOT;
            }
          // fall through
          case 106: break;
          case 4:
            { return ValaTypes.MODULO;
            }
          // fall through
          case 107: break;
          case 5:
            { return ValaTypes.REFERENCE;
            }
          // fall through
          case 108: break;
          case 6:
            { return ValaTypes.LPAREN;
            }
          // fall through
          case 109: break;
          case 7:
            { return ValaTypes.RPAREN;
            }
          // fall through
          case 110: break;
          case 8:
            { return ValaTypes.POINTER;
            }
          // fall through
          case 111: break;
          case 9:
            { return ValaTypes.PLUS;
            }
          // fall through
          case 112: break;
          case 10:
            { return ValaTypes.COMMA;
            }
          // fall through
          case 113: break;
          case 11:
            { return ValaTypes.MINUS;
            }
          // fall through
          case 114: break;
          case 12:
            { return ValaTypes.DOT;
            }
          // fall through
          case 115: break;
          case 13:
            { return ValaTypes.DIVIDE;
            }
          // fall through
          case 116: break;
          case 14:
            { return ValaTypes.NUMBER;
            }
          // fall through
          case 117: break;
          case 15:
            { return ValaTypes.SEMICOLON;
            }
          // fall through
          case 118: break;
          case 16:
            { return ValaTypes.LESS_THAN;
            }
          // fall through
          case 119: break;
          case 17:
            { return ValaTypes.EQUALS;
            }
          // fall through
          case 120: break;
          case 18:
            { return ValaTypes.GREATER_THAN;
            }
          // fall through
          case 121: break;
          case 19:
            { return ValaTypes.QUESTION_MARK;
            }
          // fall through
          case 122: break;
          case 20:
            { return ValaTypes.AT;
            }
          // fall through
          case 123: break;
          case 21:
            { return ValaTypes.IDENTIFIER;
            }
          // fall through
          case 124: break;
          case 22:
            { return ValaTypes.LBRACKET;
            }
          // fall through
          case 125: break;
          case 23:
            { return ValaTypes.RBRACKET;
            }
          // fall through
          case 126: break;
          case 24:
            { return ValaTypes.BITWISE_XOR;
            }
          // fall through
          case 127: break;
          case 25:
            { return ValaTypes.LBRACE;
            }
          // fall through
          case 128: break;
          case 26:
            { return ValaTypes.BITWISE_OR;
            }
          // fall through
          case 129: break;
          case 27:
            { return ValaTypes.RBRACE;
            }
          // fall through
          case 130: break;
          case 28:
            { return ValaTypes.BITWISE_NOT;
            }
          // fall through
          case 131: break;
          case 29:
            { return ValaTypes.NOT_EQUALS;
            }
          // fall through
          case 132: break;
          case 30:
            { return ValaTypes.STRING_LITERAL;
            }
          // fall through
          case 133: break;
          case 31:
            { return ValaTypes.MODULO_EQUALS;
            }
          // fall through
          case 134: break;
          case 32:
            { return ValaTypes.AND;
            }
          // fall through
          case 135: break;
          case 33:
            { return ValaTypes.BITWISE_AND_EQUALS;
            }
          // fall through
          case 136: break;
          case 34:
            { return ValaTypes.MULTIPLY_EQUALS;
            }
          // fall through
          case 137: break;
          case 35:
            { return ValaTypes.INCREMENT;
            }
          // fall through
          case 138: break;
          case 36:
            { return ValaTypes.PLUS_EQUALS;
            }
          // fall through
          case 139: break;
          case 37:
            { return ValaTypes.DECREMENT;
            }
          // fall through
          case 140: break;
          case 38:
            { return ValaTypes.MINUS_EQUALS;
            }
          // fall through
          case 141: break;
          case 39:
            { return ValaTypes.COMMENT;
            }
          // fall through
          case 142: break;
          case 40:
            { return ValaTypes.DIVIDE_EQUALS;
            }
          // fall through
          case 143: break;
          case 41:
            { return ValaTypes.BITWISE_SHIFT_LEFT;
            }
          // fall through
          case 144: break;
          case 42:
            { return ValaTypes.LESS_THAN_EQUALS;
            }
          // fall through
          case 145: break;
          case 43:
            { return ValaTypes.DOUBLE_EQUALS;
            }
          // fall through
          case 146: break;
          case 44:
            { return ValaTypes.GREATER_THAN_EQUALS;
            }
          // fall through
          case 147: break;
          case 45:
            { return ValaTypes.BITWISE_SHIFT_RIGHT;
            }
          // fall through
          case 148: break;
          case 46:
            { return ValaTypes.BITWISE_XOR_EQUALS;
            }
          // fall through
          case 149: break;
          case 47:
            { return ValaTypes.IF_STATEMENT;
            }
          // fall through
          case 150: break;
          case 48:
            { return ValaTypes.FOR_STATEMENT;
            }
          // fall through
          case 151: break;
          case 49:
            { return ValaTypes.BITWISE_OR_EQUALS;
            }
          // fall through
          case 152: break;
          case 50:
            { return ValaTypes.OR;
            }
          // fall through
          case 153: break;
          case 51:
            { return ValaTypes.BITWISE_SHIFT_LEFT_EQUALS;
            }
          // fall through
          case 154: break;
          case 52:
            { return ValaTypes.BITWISE_SHIFT_RIGHT_EQUALS;
            }
          // fall through
          case 155: break;
          case 53:
            { return ValaTypes.INT;
            }
          // fall through
          case 156: break;
          case 54:
            { return ValaTypes.TRY_STATEMENT;
            }
          // fall through
          case 157: break;
          case 55:
            { return ValaTypes.VAR;
            }
          // fall through
          case 158: break;
          case 56:
            { return ValaTypes.BLOCK_COMMENT;
            }
          // fall through
          case 159: break;
          case 57:
            { return ValaTypes.BOOL;
            }
          // fall through
          case 160: break;
          case 58:
            { return ValaTypes.CASE_STATEMENT;
            }
          // fall through
          case 161: break;
          case 59:
            { return ValaTypes.CHAR;
            }
          // fall through
          case 162: break;
          case 60:
            { return ValaTypes.ELSE;
            }
          // fall through
          case 163: break;
          case 61:
            { return ValaTypes.ENUM_DECLARATION;
            }
          // fall through
          case 164: break;
          case 62:
            { return ValaTypes.INT8;
            }
          // fall through
          case 165: break;
          case 63:
            { return ValaTypes.LONG;
            }
          // fall through
          case 166: break;
          case 64:
            { return ValaTypes.NULL;
            }
          // fall through
          case 167: break;
          case 65:
            { return ValaTypes.TRUE;
            }
          // fall through
          case 168: break;
          case 66:
            { return ValaTypes.UINT;
            }
          // fall through
          case 169: break;
          case 67:
            { return ValaTypes.VOID;
            }
          // fall through
          case 170: break;
          case 68:
            { return ValaTypes.DOC_COMMENT;
            }
          // fall through
          case 171: break;
          case 69:
            { return ValaTypes.BREAK_STATEMENT;
            }
          // fall through
          case 172: break;
          case 70:
            { return ValaTypes.CLASS_DECLARATION;
            }
          // fall through
          case 173: break;
          case 71:
            { return ValaTypes.CONST;
            }
          // fall through
          case 174: break;
          case 72:
            { return ValaTypes.FALSE;
            }
          // fall through
          case 175: break;
          case 73:
            { return ValaTypes.FLOAT;
            }
          // fall through
          case 176: break;
          case 74:
            { return ValaTypes.INT16;
            }
          // fall through
          case 177: break;
          case 75:
            { return ValaTypes.INT32;
            }
          // fall through
          case 178: break;
          case 76:
            { return ValaTypes.INT64;
            }
          // fall through
          case 179: break;
          case 77:
            { return ValaTypes.SHORT;
            }
          // fall through
          case 180: break;
          case 78:
            { return ValaTypes.UCHAR;
            }
          // fall through
          case 181: break;
          case 79:
            { return ValaTypes.UINT8;
            }
          // fall through
          case 182: break;
          case 80:
            { return ValaTypes.ULONG;
            }
          // fall through
          case 183: break;
          case 81:
            { return ValaTypes.USING_STATEMENT;
            }
          // fall through
          case 184: break;
          case 82:
            { return ValaTypes.DOUBLE;
            }
          // fall through
          case 185: break;
          case 83:
            { return ValaTypes.PUBLIC;
            }
          // fall through
          case 186: break;
          case 84:
            { return ValaTypes.RETURN_STATEMENT;
            }
          // fall through
          case 187: break;
          case 85:
            { return ValaTypes.STATIC;
            }
          // fall through
          case 188: break;
          case 86:
            { return ValaTypes.STRING;
            }
          // fall through
          case 189: break;
          case 87:
            { return ValaTypes.STRUCT_DECLARATION;
            }
          // fall through
          case 190: break;
          case 88:
            { return ValaTypes.SWITCH_STATEMENT;
            }
          // fall through
          case 191: break;
          case 89:
            { return ValaTypes.UINT16;
            }
          // fall through
          case 192: break;
          case 90:
            { return ValaTypes.UINT32;
            }
          // fall through
          case 193: break;
          case 91:
            { return ValaTypes.UINT64;
            }
          // fall through
          case 194: break;
          case 92:
            { return ValaTypes.USHORT;
            }
          // fall through
          case 195: break;
          case 93:
            { return ValaTypes.DEFAULT_STATEMENT;
            }
          // fall through
          case 196: break;
          case 94:
            { return ValaTypes.PRIVATE;
            }
          // fall through
          case 197: break;
          case 95:
            { return ValaTypes.UNICHAR;
            }
          // fall through
          case 198: break;
          case 96:
            { return ValaTypes.UNOWNED;
            }
          // fall through
          case 199: break;
          case 97:
            { return ValaTypes.VIRTUAL;
            }
          // fall through
          case 200: break;
          case 98:
            { return ValaTypes.ABSTRACT;
            }
          // fall through
          case 201: break;
          case 99:
            { return ValaTypes.INTERNAL;
            }
          // fall through
          case 202: break;
          case 100:
            { return ValaTypes.OVERRIDE;
            }
          // fall through
          case 203: break;
          case 101:
            { return ValaTypes.INTERFACE_DECLARATION;
            }
          // fall through
          case 204: break;
          case 102:
            { return ValaTypes.NAMESPACE_STATEMENT;
            }
          // fall through
          case 205: break;
          case 103:
            { return ValaTypes.PROTECTED;
            }
          // fall through
          case 206: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
