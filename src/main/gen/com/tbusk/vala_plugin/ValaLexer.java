// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Vala.flex

package com.tbusk.vala_plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tbusk.vala_plugin.psi.ValaTypes;
import com.intellij.psi.TokenType;
import com.tbusk.vala_plugin.ValaTokenSets;
import com.tbusk.vala_plugin.psi.ValaTokenType;

/**
 * Lexer generator used is JFlex.
 * Documentation can be found at: https://jflex.de/manual.html
 */

public class ValaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\23\1\30\1\23\1\31\1\23"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\32\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\6\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\23\30\1\37\1\40\1\41\1\42\1\43\1\0"+
    "\1\44\1\0\1\45\1\46\1\0\1\47\1\0\1\50"+
    "\1\51\1\52\1\53\1\54\2\0\1\55\1\56\1\0"+
    "\1\57\1\60\1\61\1\62\1\63\1\30\1\64\10\30"+
    "\1\65\10\30\1\66\1\67\1\70\34\30\1\71\1\72"+
    "\2\0\1\72\1\0\24\30\1\73\1\74\3\30\1\75"+
    "\1\30\1\76\5\30\1\77\14\30\1\100\7\30\1\101"+
    "\5\30\3\0\1\102\3\0\2\30\1\103\1\104\1\30"+
    "\1\105\1\30\1\106\5\30\1\107\1\30\1\110\11\30"+
    "\1\111\1\30\1\112\1\113\1\30\1\114\17\30\1\115"+
    "\1\30\1\116\1\30\1\117\6\30\1\120\1\121\2\30"+
    "\1\102\1\0\1\72\1\122\3\0\1\30\1\123\1\124"+
    "\1\125\1\126\1\127\6\30\1\130\1\30\1\131\1\30"+
    "\1\132\1\133\1\134\3\30\1\135\5\30\1\136\7\30"+
    "\1\137\1\140\3\30\1\141\1\142\3\30\1\143\1\30"+
    "\1\144\1\145\1\122\1\0\4\30\1\146\2\30\1\147"+
    "\10\30\1\150\1\30\1\151\1\152\1\153\1\30\1\154"+
    "\1\155\1\156\1\157\1\160\1\161\1\162\1\163\2\30"+
    "\1\164\1\30\1\0\3\30\1\165\1\166\1\30\1\167"+
    "\1\170\4\30\1\171\2\30\1\172\1\173\1\174\1\175"+
    "\1\176\1\30\1\177\2\30\1\200\1\30\1\201\1\30"+
    "\1\202\1\203\1\30\1\204\1\205\1\206\1\30\1\207";

  private static int [] zzUnpackAction() {
    int [] result = new int[394];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\106\0\106\0\u015e"+
    "\0\u01a4\0\u01ea\0\106\0\106\0\u0230\0\u0276\0\106\0\u02bc"+
    "\0\106\0\u0302\0\u0348\0\106\0\106\0\u038e\0\u03d4\0\u041a"+
    "\0\106\0\u0460\0\u04a6\0\106\0\106\0\106\0\106\0\u04a6"+
    "\0\106\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690"+
    "\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0"+
    "\0\u0906\0\u094c\0\u0992\0\u09d8\0\106\0\u0a1e\0\106\0\106"+
    "\0\106\0\u0118\0\106\0\u0a64\0\106\0\106\0\u01ea\0\106"+
    "\0\u0aaa\0\106\0\106\0\106\0\106\0\106\0\u0af0\0\u0b36"+
    "\0\u0b7c\0\u0af0\0\u0bc2\0\u0c08\0\106\0\106\0\106\0\u04a6"+
    "\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38"+
    "\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068"+
    "\0\u10ae\0\u10f4\0\u113a\0\u0690\0\u1180\0\u0690\0\u11c6\0\u120c"+
    "\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c"+
    "\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c"+
    "\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c"+
    "\0\u18e2\0\u1928\0\106\0\106\0\u196e\0\u19b4\0\u19fa\0\u1a40"+
    "\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70"+
    "\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0"+
    "\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0"+
    "\0\u2116\0\u0690\0\u215c\0\u0690\0\u21a2\0\u21e8\0\u222e\0\u2274"+
    "\0\u22ba\0\u0690\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e"+
    "\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u0690\0\u2648"+
    "\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u0690\0\u2832"+
    "\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u2a62"+
    "\0\u2aa8\0\u19fa\0\u2aee\0\u2b34\0\u2b7a\0\u0690\0\u0690\0\u2bc0"+
    "\0\u0690\0\u2c06\0\u0690\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64"+
    "\0\u0690\0\u2daa\0\u0690\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08"+
    "\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u0690\0\u3066\0\u0690\0\u0690"+
    "\0\u30ac\0\u0690\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250"+
    "\0\u3296\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480"+
    "\0\u34c6\0\u0690\0\u350c\0\u0690\0\u3552\0\u3598\0\u35de\0\u3624"+
    "\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u0690\0\u0690\0\u3782\0\u37c8"+
    "\0\106\0\u380e\0\u3854\0\u19fa\0\u2a62\0\u389a\0\u3854\0\u38e0"+
    "\0\u0690\0\u0690\0\u0690\0\u0690\0\u3926\0\u396c\0\u39b2\0\u39f8"+
    "\0\u3a3e\0\u3a84\0\u3aca\0\u0690\0\u3b10\0\u0690\0\u3b56\0\u0690"+
    "\0\u0690\0\u0690\0\u3b9c\0\u3be2\0\u3c28\0\u0690\0\u3c6e\0\u3cb4"+
    "\0\u3cfa\0\u3d40\0\u3d86\0\u0690\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e"+
    "\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u0690\0\u3ffc\0\u4042\0\u4088"+
    "\0\u0690\0\u0690\0\u40ce\0\u4114\0\u415a\0\u0690\0\u41a0\0\u0690"+
    "\0\u0690\0\106\0\u41e6\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u0690"+
    "\0\u4344\0\u438a\0\u0690\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u44e8"+
    "\0\u452e\0\u4574\0\u45ba\0\u0690\0\u4600\0\u0690\0\u0690\0\u0690"+
    "\0\u4646\0\u0690\0\u0690\0\u0690\0\u0690\0\u0690\0\u0690\0\u0690"+
    "\0\u0690\0\u468c\0\u46d2\0\u0690\0\u4718\0\u475e\0\u47a4\0\u47ea"+
    "\0\u4830\0\u0690\0\u0690\0\u4876\0\u0690\0\u0690\0\u48bc\0\u4902"+
    "\0\u4948\0\u498e\0\u0690\0\u49d4\0\u4a1a\0\u0690\0\u0690\0\u0690"+
    "\0\u0690\0\u0690\0\u4a60\0\u0690\0\u4aa6\0\u4aec\0\u0690\0\u4b32"+
    "\0\u0690\0\u4b78\0\u0690\0\u0690\0\u4bbe\0\u0690\0\u0690\0\u0690"+
    "\0\u4c04\0\u0690";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[394];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\7\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\2\50"+
    "\1\51\2\50\1\52\1\50\1\53\1\54\1\55\1\50"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\50\1\64"+
    "\1\50\1\65\1\66\1\67\1\70\107\0\2\3\140\0"+
    "\1\71\50\0\5\72\1\73\35\72\1\74\42\72\35\0"+
    "\1\75\61\0\1\76\74\0\12\77\1\100\30\77\1\101"+
    "\42\77\35\0\1\102\66\0\1\103\16\0\1\104\70\0"+
    "\1\105\2\0\7\23\3\0\1\106\50\0\15\107\1\110"+
    "\4\107\1\111\12\107\1\112\5\107\1\113\42\107\21\0"+
    "\1\114\1\0\7\23\111\0\1\115\105\0\1\116\105\0"+
    "\1\117\55\0\1\72\107\0\1\50\13\0\7\120\7\0"+
    "\1\120\4\0\1\120\1\0\32\50\13\0\1\50\13\0"+
    "\7\50\7\0\1\50\4\0\1\50\1\0\1\50\1\121"+
    "\20\50\1\122\7\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\1\123\15\50\1\124\2\50"+
    "\1\125\10\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\1\126\6\50\1\127\3\50\1\130"+
    "\2\50\1\131\13\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\4\50\1\132\11\50\1\133"+
    "\13\50\13\0\1\50\13\0\7\50\7\0\1\50\4\0"+
    "\1\50\1\0\13\50\1\134\1\50\1\135\3\50\1\136"+
    "\5\50\1\137\2\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\1\140\7\50\1\141\2\50"+
    "\1\142\2\50\1\143\13\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\32\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\5\50"+
    "\1\144\7\50\1\145\4\50\1\146\7\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\16\50"+
    "\1\147\13\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\1\150\3\50\1\151\17\50\1\152"+
    "\5\50\13\0\1\50\13\0\7\50\7\0\1\50\4\0"+
    "\1\50\1\0\24\50\1\153\1\154\1\155\3\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\21\50\1\156\2\50\1\157\5\50\13\0\1\50\13\0"+
    "\7\50\7\0\1\50\4\0\1\50\1\0\4\50\1\160"+
    "\25\50\13\0\1\50\13\0\7\50\7\0\1\50\4\0"+
    "\1\50\1\0\7\50\1\161\1\162\11\50\1\163\1\164"+
    "\2\50\1\165\3\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\7\50\1\166\11\50\1\167"+
    "\10\50\13\0\1\50\13\0\7\50\7\0\1\50\4\0"+
    "\1\50\1\0\2\50\1\170\5\50\1\171\2\50\1\172"+
    "\1\50\1\173\4\50\1\174\7\50\13\0\1\50\13\0"+
    "\7\50\7\0\1\50\4\0\1\50\1\0\1\175\7\50"+
    "\1\176\5\50\1\177\13\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\4\50\1\200\2\50"+
    "\1\201\22\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\10\50\1\202\21\50\107\0\1\203"+
    "\2\0\2\72\2\0\102\72\2\77\2\0\102\77\22\107"+
    "\1\204\20\107\1\113\42\107\15\205\1\206\4\205\1\207"+
    "\20\205\1\210\42\205\2\111\1\0\103\111\2\107\2\0"+
    "\102\107\23\0\7\114\63\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\22\50\1\211\7\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\30\50\1\212\1\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\22\50\1\213\7\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\16\50\1\214\13\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\4\50\1\215\25\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\22\50\1\216\1\217\6\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\1\220\31\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\1\221\31\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\15\50\1\222\14\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\5\50"+
    "\1\223\24\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\24\50\1\224\5\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\22\50"+
    "\1\225\7\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\22\50\1\226\1\50\1\227\5\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\21\50\1\230\10\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\23\50\1\231\6\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\13\50\1\232\16\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\15\50\1\233\14\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\16\50\1\234\13\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\21\50\1\235\10\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\23\50\1\236\6\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\2\50\1\237\12\50"+
    "\1\240\14\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\14\50\1\241\15\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\26\50"+
    "\1\242\3\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\13\50\1\243\16\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\23\50"+
    "\1\244\6\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\4\50\1\245\25\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\15\50"+
    "\1\246\14\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\10\50\1\247\5\50\1\250\13\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\1\50\1\251\30\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\5\50\1\252\12\50"+
    "\1\253\2\50\1\254\6\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\16\50\1\255\13\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\6\50\1\256\22\50\1\257\13\0\1\50\13\0"+
    "\7\50\7\0\1\50\4\0\1\50\1\0\10\50\1\260"+
    "\21\50\13\0\1\50\13\0\7\50\7\0\1\50\4\0"+
    "\1\50\1\0\1\261\20\50\1\262\10\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\10\50"+
    "\1\263\21\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\10\50\1\264\10\50\1\265\10\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\24\50\1\266\3\50\1\267\1\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\7\50"+
    "\1\270\22\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\15\50\1\271\14\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\16\50"+
    "\1\272\13\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\10\50\1\273\5\50\1\274\13\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\7\50\1\275\1\276\21\50\13\0\1\50\13\0"+
    "\7\50\7\0\1\50\4\0\1\50\1\0\21\50\1\277"+
    "\10\50\13\0\1\50\13\0\7\50\7\0\1\50\4\0"+
    "\1\50\1\0\21\50\1\300\10\50\13\0\1\50\13\0"+
    "\7\50\7\0\1\50\4\0\1\50\1\0\10\50\1\301"+
    "\21\50\13\0\1\50\13\0\7\50\7\0\1\50\4\0"+
    "\1\50\1\0\1\302\31\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\10\50\1\303\21\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\4\50\1\304\25\50\4\0\15\205\1\305\4\205"+
    "\1\207\20\205\1\210\42\205\15\306\1\307\4\306\1\310"+
    "\20\306\1\311\42\306\15\312\1\313\70\312\2\205\2\312"+
    "\11\205\1\305\70\205\7\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\23\50\1\314\6\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\15\50\1\315\14\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\4\50\1\316\25\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\13\50\1\317\16\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\1\320\31\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\4\50"+
    "\1\321\25\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\2\50\1\322\27\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\21\50"+
    "\1\323\10\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\22\50\1\324\7\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\22\50"+
    "\1\325\1\326\6\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\1\327\31\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\1\50"+
    "\1\330\30\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\4\50\1\331\25\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\24\50"+
    "\1\332\5\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\14\50\1\333\15\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\16\50"+
    "\1\334\13\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\4\50\1\335\25\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\22\50"+
    "\1\336\7\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\1\337\31\50\13\0\1\50\13\0"+
    "\7\50\7\0\1\50\4\0\1\50\1\0\1\340\31\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\4\50\1\341\25\50\13\0\1\50\13\0\1\50"+
    "\1\342\1\50\1\343\1\50\1\344\1\345\7\0\1\50"+
    "\4\0\1\50\1\0\4\50\1\346\25\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\12\50"+
    "\1\347\17\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\6\50\1\350\23\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\4\50"+
    "\1\351\25\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\13\50\1\352\16\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\21\50"+
    "\1\353\10\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\4\50\1\354\25\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\25\50"+
    "\1\355\4\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\23\50\1\356\6\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\13\50"+
    "\1\357\16\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\24\50\1\360\5\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\24\50"+
    "\1\361\5\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\21\50\1\362\10\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\15\50"+
    "\1\363\14\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\4\50\1\364\25\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\31\50"+
    "\1\365\13\0\1\50\13\0\7\50\7\0\1\50\4\0"+
    "\1\50\1\0\23\50\1\366\6\50\13\0\1\50\13\0"+
    "\7\50\7\0\1\50\4\0\1\50\1\0\10\50\1\367"+
    "\13\50\1\370\5\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\23\50\1\371\6\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\22\50\1\372\7\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\16\50\1\373\13\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\4\50\1\374\25\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\1\375\31\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\23\50"+
    "\1\376\6\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\15\50\1\377\14\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\2\50"+
    "\1\u0100\27\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\26\50\1\u0101\3\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\16\50"+
    "\1\u0102\13\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\15\50\1\u0103\14\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\23\50"+
    "\1\u0104\6\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\3\50\1\u0105\26\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\12\50"+
    "\1\u0106\17\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\13\50\1\u0107\16\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\13\50"+
    "\1\u0108\16\50\4\0\22\205\1\u0109\20\205\1\210\42\205"+
    "\15\306\1\u010a\4\306\1\u010b\20\306\1\311\57\306\1\u010a"+
    "\4\306\1\u010c\20\306\1\311\42\306\15\u010d\1\u010e\70\u010d"+
    "\2\306\2\u010f\11\306\1\u010a\70\306\22\312\1\u0109\63\312"+
    "\7\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\21\50\1\u0110\10\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\2\50\1\u0111\27\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\12\50\1\u0112\17\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\7\50\1\u0113\22\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\22\50\1\u0114\7\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\23\50\1\u0115\6\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\10\50\1\u0116\21\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\24\50\1\u0117\5\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\13\50\1\u0118\16\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\21\50\1\u0119\10\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\21\50\1\u011a\10\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\21\50\1\u011b\10\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\4\50\1\u011c\25\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\13\50\1\u011d\16\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\23\50\1\u011e\6\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\1\u011f\31\50\13\0"+
    "\1\50\13\0\5\50\1\u0120\1\50\7\0\1\50\4\0"+
    "\1\50\1\0\32\50\13\0\1\50\13\0\2\50\1\u0121"+
    "\4\50\7\0\1\50\4\0\1\50\1\0\32\50\13\0"+
    "\1\50\13\0\4\50\1\u0122\2\50\7\0\1\50\4\0"+
    "\1\50\1\0\32\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\21\50\1\u0123\10\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\22\50\1\u0124\7\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\21\50\1\u0125\10\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\3\50\1\u0126\26\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\1\u0127\31\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\4\50"+
    "\1\u0128\25\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\10\50\1\u0129\21\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\10\50"+
    "\1\u012a\21\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\21\50\1\u012b\10\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\23\50"+
    "\1\u012c\6\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\1\u012d\31\50\13\0\1\50\13\0"+
    "\7\50\7\0\1\50\4\0\1\u012e\1\0\32\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\4\50\1\u012f\25\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\10\50\1\u0130\21\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\15\50\1\u0131\14\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\2\50\1\u0132\27\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\2\50\1\u0133\27\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\26\50\1\u0134\3\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\21\50\1\u0135\10\50\13\0\1\50\13\0\1\50\1\u0136"+
    "\1\50\1\u0137\1\50\1\u0138\1\u0139\7\0\1\50\4\0"+
    "\1\50\1\0\32\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\6\50\1\u013a\23\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\7\50\1\u013b\22\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\15\50\1\u013c\14\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\21\50\1\u013d\10\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\6\50\1\u013e\23\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\24\50\1\u013f\5\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\4\50\1\u0140\25\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\3\50\1\u0141\26\50\4\0\15\306\1\307\4\306\1\u0142"+
    "\20\306\1\311\42\306\15\u010f\1\u0143\70\u010f\15\u010d\1\u010e"+
    "\4\u010d\1\u0142\63\u010d\7\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\1\u0144\31\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\21\50"+
    "\1\u0145\10\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\15\50\1\u0146\14\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\13\50"+
    "\1\u0147\16\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\4\50\1\u0148\25\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\4\50"+
    "\1\u0149\25\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\3\50\1\u014a\26\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\15\50"+
    "\1\u014b\14\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\13\50\1\u014c\16\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\2\50"+
    "\1\u014d\27\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\5\50\1\u014e\7\50\1\u014f\14\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\17\50\1\u0150\12\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\10\50\1\u0151\21\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\23\50\1\u0152\6\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\2\50\1\u0153\27\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\2\50\1\u0154\27\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\21\50\1\u0155\10\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\15\50\1\u0156\14\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\13\50\1\u0157\16\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\23\50\1\u0158\6\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\u0159\1\0\32\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\2\50"+
    "\1\u015a\27\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\6\50\1\u015b\23\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\23\50"+
    "\1\u015c\6\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\7\50\1\u015d\22\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\22\50"+
    "\1\u015e\7\50\13\0\1\50\13\0\5\50\1\u015f\1\50"+
    "\7\0\1\50\4\0\1\50\1\0\32\50\13\0\1\50"+
    "\13\0\2\50\1\u0160\4\50\7\0\1\50\4\0\1\50"+
    "\1\0\32\50\13\0\1\50\13\0\4\50\1\u0161\2\50"+
    "\7\0\1\50\4\0\1\50\1\0\32\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\1\u0162"+
    "\31\50\13\0\1\50\13\0\7\50\7\0\1\50\4\0"+
    "\1\50\1\0\4\50\1\u0163\25\50\13\0\1\50\13\0"+
    "\7\50\7\0\1\50\4\0\1\50\1\0\23\50\1\u0164"+
    "\6\50\13\0\1\50\13\0\7\50\7\0\1\50\4\0"+
    "\1\50\1\0\1\u0165\31\50\4\0\15\u010f\1\u0166\4\u010f"+
    "\1\u0142\63\u010f\7\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\2\50\1\u0167\27\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\24\50"+
    "\1\u0168\5\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\24\50\1\u0169\5\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\23\50"+
    "\1\u016a\6\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\22\50\1\u016b\7\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\16\50"+
    "\1\u016c\13\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\30\50\1\u016d\1\50\13\0\1\50"+
    "\13\0\7\50\7\0\1\50\4\0\1\50\1\0\7\50"+
    "\1\u016e\22\50\13\0\1\50\13\0\7\50\7\0\1\50"+
    "\4\0\1\50\1\0\1\u016f\31\50\13\0\1\50\13\0"+
    "\7\50\7\0\1\50\4\0\1\50\1\0\1\u0170\31\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\1\u0171\31\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\3\50\1\u0172\26\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\4\50\1\u0173\25\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\23\50\1\u0174\6\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\4\50\1\u0175\25\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\23\50\1\u0176\6\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\21\50\1\u0177\10\50\13\0\1\50\13\0\7\50\7\0"+
    "\1\50\4\0\1\50\1\0\3\50\1\u0178\26\50\13\0"+
    "\1\50\13\0\7\50\7\0\1\50\4\0\1\50\1\0"+
    "\13\50\1\u0179\16\50\4\0\15\u010f\1\u0143\4\u010f\1\u010c"+
    "\63\u010f\7\0\1\50\13\0\7\50\7\0\1\50\4\0"+
    "\1\50\1\0\23\50\1\u017a\6\50\13\0\1\50\13\0"+
    "\7\50\7\0\1\50\4\0\1\50\1\0\2\50\1\u017b"+
    "\27\50\13\0\1\50\13\0\7\50\7\0\1\50\4\0"+
    "\1\50\1\0\4\50\1\u017c\25\50\13\0\1\50\13\0"+
    "\7\50\7\0\1\50\4\0\1\50\1\0\14\50\1\u017d"+
    "\15\50\13\0\1\50\13\0\7\50\7\0\1\50\4\0"+
    "\1\50\1\0\2\50\1\u017e\27\50\13\0\1\50\13\0"+
    "\7\50\7\0\1\50\4\0\1\50\1\0\13\50\1\u017f"+
    "\16\50\13\0\1\50\13\0\7\50\7\0\1\50\4\0"+
    "\1\50\1\0\2\50\1\u0180\27\50\13\0\1\50\13\0"+
    "\7\50\7\0\1\50\4\0\1\50\1\0\4\50\1\u0181"+
    "\25\50\13\0\1\50\13\0\7\50\7\0\1\50\4\0"+
    "\1\50\1\0\4\50\1\u0182\25\50\13\0\1\50\13\0"+
    "\7\50\7\0\1\50\4\0\1\50\1\0\22\50\1\u0183"+
    "\7\50\13\0\1\50\13\0\7\50\7\0\1\50\4\0"+
    "\1\50\1\0\23\50\1\u0184\6\50\13\0\1\50\13\0"+
    "\7\50\7\0\1\50\4\0\1\50\1\0\1\u0185\31\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\4\50\1\u0186\25\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\4\50\1\u0187\25\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\3\50\1\u0188\26\50\13\0\1\50\13\0\7\50"+
    "\7\0\1\50\4\0\1\50\1\0\10\50\1\u0189\21\50"+
    "\13\0\1\50\13\0\7\50\7\0\1\50\4\0\1\50"+
    "\1\0\15\50\1\u018a\14\50\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19530];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\3\1\2\11\2\1\1\11"+
    "\1\1\1\11\2\1\2\11\3\1\1\11\2\1\4\11"+
    "\1\1\1\11\23\1\1\11\1\1\3\11\1\0\1\11"+
    "\1\0\2\11\1\0\1\11\1\0\5\11\2\0\2\1"+
    "\1\0\1\1\3\11\63\1\2\11\2\0\1\1\1\0"+
    "\74\1\3\0\1\1\3\0\75\1\1\11\1\0\2\1"+
    "\3\0\62\1\1\11\1\0\42\1\1\0\44\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[394];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ValaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 136: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 137: break;
          case 3:
            { return ValaTypes.EXCLAMATION;
            }
          // fall through
          case 138: break;
          case 4:
            { return ValaTypes.POUND;
            }
          // fall through
          case 139: break;
          case 5:
            { return ValaTypes.DOLLAR;
            }
          // fall through
          case 140: break;
          case 6:
            { return ValaTypes.MODULO;
            }
          // fall through
          case 141: break;
          case 7:
            { return ValaTypes.AND;
            }
          // fall through
          case 142: break;
          case 8:
            { return ValaTypes.LPAREN;
            }
          // fall through
          case 143: break;
          case 9:
            { return ValaTypes.RPAREN;
            }
          // fall through
          case 144: break;
          case 10:
            { return ValaTypes.STAR;
            }
          // fall through
          case 145: break;
          case 11:
            { return ValaTypes.PLUS;
            }
          // fall through
          case 146: break;
          case 12:
            { return ValaTypes.COMMA;
            }
          // fall through
          case 147: break;
          case 13:
            { return ValaTypes.MINUS;
            }
          // fall through
          case 148: break;
          case 14:
            { return ValaTypes.DOT;
            }
          // fall through
          case 149: break;
          case 15:
            { return ValaTypes.FORWARD_SLASH;
            }
          // fall through
          case 150: break;
          case 16:
            { return ValaTypes.INTEGER_LITERAL;
            }
          // fall through
          case 151: break;
          case 17:
            { return ValaTypes.COLON;
            }
          // fall through
          case 152: break;
          case 18:
            { return ValaTypes.SEMICOLON;
            }
          // fall through
          case 153: break;
          case 19:
            { return ValaTypes.LESS_THAN;
            }
          // fall through
          case 154: break;
          case 20:
            { return ValaTypes.EQUALS;
            }
          // fall through
          case 155: break;
          case 21:
            { return ValaTypes.GREATER_THAN;
            }
          // fall through
          case 156: break;
          case 22:
            { return ValaTypes.QUESTION_MARK;
            }
          // fall through
          case 157: break;
          case 23:
            { return ValaTypes.AT;
            }
          // fall through
          case 158: break;
          case 24:
            { return ValaTypes.IDENTIFIER;
            }
          // fall through
          case 159: break;
          case 25:
            { return ValaTypes.LBRACKET;
            }
          // fall through
          case 160: break;
          case 26:
            { return ValaTypes.BACKSLASH;
            }
          // fall through
          case 161: break;
          case 27:
            { return ValaTypes.RBRACKET;
            }
          // fall through
          case 162: break;
          case 28:
            { return ValaTypes.CARET;
            }
          // fall through
          case 163: break;
          case 29:
            { return ValaTypes.UNDERSCORE;
            }
          // fall through
          case 164: break;
          case 30:
            { return ValaTypes.BACKTICK;
            }
          // fall through
          case 165: break;
          case 31:
            { return ValaTypes.LBRACE;
            }
          // fall through
          case 166: break;
          case 32:
            { return ValaTypes.PIPE;
            }
          // fall through
          case 167: break;
          case 33:
            { return ValaTypes.RBRACE;
            }
          // fall through
          case 168: break;
          case 34:
            { return ValaTypes.TILDE;
            }
          // fall through
          case 169: break;
          case 35:
            { return ValaTypes.NOT_EQUALS;
            }
          // fall through
          case 170: break;
          case 36:
            { return ValaTypes.STRING_LITERAL;
            }
          // fall through
          case 171: break;
          case 37:
            { return ValaTypes.MODULO_EQUALS;
            }
          // fall through
          case 172: break;
          case 38:
            { return ValaTypes.AND_AND;
            }
          // fall through
          case 173: break;
          case 39:
            { return ValaTypes.CHAR_LITERAL;
            }
          // fall through
          case 174: break;
          case 40:
            { return ValaTypes.MULTIPLY_EQUALS;
            }
          // fall through
          case 175: break;
          case 41:
            { return ValaTypes.INCREMENT;
            }
          // fall through
          case 176: break;
          case 42:
            { return ValaTypes.PLUS_EQUALS;
            }
          // fall through
          case 177: break;
          case 43:
            { return ValaTypes.DECREMENT;
            }
          // fall through
          case 178: break;
          case 44:
            { return ValaTypes.MINUS_EQUALS;
            }
          // fall through
          case 179: break;
          case 45:
            { return ValaTypes.COMMENT;
            }
          // fall through
          case 180: break;
          case 46:
            { return ValaTypes.DIVIDE_EQUALS;
            }
          // fall through
          case 181: break;
          case 47:
            { return ValaTypes.DECIMAL_LITERAL;
            }
          // fall through
          case 182: break;
          case 48:
            { return ValaTypes.LESS_THAN_EQUALS;
            }
          // fall through
          case 183: break;
          case 49:
            { return ValaTypes.EQUALS_EQUALS;
            }
          // fall through
          case 184: break;
          case 50:
            { return ValaTypes.GREATER_THAN_EQUALS;
            }
          // fall through
          case 185: break;
          case 51:
            { return ValaTypes.CONSTANT;
            }
          // fall through
          case 186: break;
          case 52:
            { return ValaTypes.AS;
            }
          // fall through
          case 187: break;
          case 53:
            { return ValaTypes.DO;
            }
          // fall through
          case 188: break;
          case 54:
            { return ValaTypes.IF;
            }
          // fall through
          case 189: break;
          case 55:
            { return ValaTypes.IN;
            }
          // fall through
          case 190: break;
          case 56:
            { return ValaTypes.IS;
            }
          // fall through
          case 191: break;
          case 57:
            { return ValaTypes.OR_OR;
            }
          // fall through
          case 192: break;
          case 58:
            { return ValaTypes.REGULAR_EXPRESSION;
            }
          // fall through
          case 193: break;
          case 59:
            { return ValaTypes.FOR;
            }
          // fall through
          case 194: break;
          case 60:
            { return ValaTypes.INT;
            }
          // fall through
          case 195: break;
          case 61:
            { return ValaTypes.NEW;
            }
          // fall through
          case 196: break;
          case 62:
            { return ValaTypes.OUT;
            }
          // fall through
          case 197: break;
          case 63:
            { return ValaTypes.REF;
            }
          // fall through
          case 198: break;
          case 64:
            { return ValaTypes.TRY;
            }
          // fall through
          case 199: break;
          case 65:
            { return ValaTypes.VAR;
            }
          // fall through
          case 200: break;
          case 66:
            { return ValaTypes.BLOCK_COMMENT;
            }
          // fall through
          case 201: break;
          case 67:
            { return ValaTypes.BASE;
            }
          // fall through
          case 202: break;
          case 68:
            { return ValaTypes.BOOL;
            }
          // fall through
          case 203: break;
          case 69:
            { return ValaTypes.CASE;
            }
          // fall through
          case 204: break;
          case 70:
            { return ValaTypes.CHAR;
            }
          // fall through
          case 205: break;
          case 71:
            { return ValaTypes.ELSE;
            }
          // fall through
          case 206: break;
          case 72:
            { return ValaTypes.ENUM;
            }
          // fall through
          case 207: break;
          case 73:
            { return ValaTypes.INT8;
            }
          // fall through
          case 208: break;
          case 74:
            { return ValaTypes.LOCK;
            }
          // fall through
          case 209: break;
          case 75:
            { return ValaTypes.LONG;
            }
          // fall through
          case 210: break;
          case 76:
            { return ValaTypes.NULL;
            }
          // fall through
          case 211: break;
          case 77:
            { return ValaTypes.THIS;
            }
          // fall through
          case 212: break;
          case 78:
            { return ValaTypes.TRUE;
            }
          // fall through
          case 213: break;
          case 79:
            { return ValaTypes.UINT;
            }
          // fall through
          case 214: break;
          case 80:
            { return ValaTypes.VOID;
            }
          // fall through
          case 215: break;
          case 81:
            { return ValaTypes.WEAK;
            }
          // fall through
          case 216: break;
          case 82:
            { return ValaTypes.DOC_COMMENT;
            }
          // fall through
          case 217: break;
          case 83:
            { return ValaTypes.ASYNC;
            }
          // fall through
          case 218: break;
          case 84:
            { return ValaTypes.BREAK;
            }
          // fall through
          case 219: break;
          case 85:
            { return ValaTypes.CATCH;
            }
          // fall through
          case 220: break;
          case 86:
            { return ValaTypes.CLASS;
            }
          // fall through
          case 221: break;
          case 87:
            { return ValaTypes.CONST;
            }
          // fall through
          case 222: break;
          case 88:
            { return ValaTypes.FALSE;
            }
          // fall through
          case 223: break;
          case 89:
            { return ValaTypes.FLOAT;
            }
          // fall through
          case 224: break;
          case 90:
            { return ValaTypes.INT16;
            }
          // fall through
          case 225: break;
          case 91:
            { return ValaTypes.INT32;
            }
          // fall through
          case 226: break;
          case 92:
            { return ValaTypes.INT64;
            }
          // fall through
          case 227: break;
          case 93:
            { return ValaTypes.OWNED;
            }
          // fall through
          case 228: break;
          case 94:
            { return ValaTypes.SHORT;
            }
          // fall through
          case 229: break;
          case 95:
            { return ValaTypes.THROW;
            }
          // fall through
          case 230: break;
          case 96:
            { return ValaTypes.UCHAR;
            }
          // fall through
          case 231: break;
          case 97:
            { return ValaTypes.UINT8;
            }
          // fall through
          case 232: break;
          case 98:
            { return ValaTypes.ULONG;
            }
          // fall through
          case 233: break;
          case 99:
            { return ValaTypes.USING;
            }
          // fall through
          case 234: break;
          case 100:
            { return ValaTypes.WHILE;
            }
          // fall through
          case 235: break;
          case 101:
            { return ValaTypes.YIELD;
            }
          // fall through
          case 236: break;
          case 102:
            { return ValaTypes.DOUBLE;
            }
          // fall through
          case 237: break;
          case 103:
            { return ValaTypes.EXTERN;
            }
          // fall through
          case 238: break;
          case 104:
            { return ValaTypes.PUBLIC;
            }
          // fall through
          case 239: break;
          case 105:
            { return ValaTypes.RETURN;
            }
          // fall through
          case 240: break;
          case 106:
            { return ValaTypes.SIGNAL;
            }
          // fall through
          case 241: break;
          case 107:
            { return ValaTypes.SIZE_T;
            }
          // fall through
          case 242: break;
          case 108:
            { return ValaTypes.STATIC;
            }
          // fall through
          case 243: break;
          case 109:
            { return ValaTypes.STRING;
            }
          // fall through
          case 244: break;
          case 110:
            { return ValaTypes.STRUCT;
            }
          // fall through
          case 245: break;
          case 111:
            { return ValaTypes.SWITCH;
            }
          // fall through
          case 246: break;
          case 112:
            { return ValaTypes.THROWS;
            }
          // fall through
          case 247: break;
          case 113:
            { return ValaTypes.UINT16;
            }
          // fall through
          case 248: break;
          case 114:
            { return ValaTypes.UINT32;
            }
          // fall through
          case 249: break;
          case 115:
            { return ValaTypes.UINT64;
            }
          // fall through
          case 250: break;
          case 116:
            { return ValaTypes.USHORT;
            }
          // fall through
          case 251: break;
          case 117:
            { return ValaTypes.DEFAULT;
            }
          // fall through
          case 252: break;
          case 118:
            { return ValaTypes.ENSURES;
            }
          // fall through
          case 253: break;
          case 119:
            { return ValaTypes.FINALLY;
            }
          // fall through
          case 254: break;
          case 120:
            { return ValaTypes.FOREACH;
            }
          // fall through
          case 255: break;
          case 121:
            { return ValaTypes.PRIVATE;
            }
          // fall through
          case 256: break;
          case 122:
            { return ValaTypes.SSIZE_T;
            }
          // fall through
          case 257: break;
          case 123:
            { return ValaTypes.UNICHAR;
            }
          // fall through
          case 258: break;
          case 124:
            { return ValaTypes.UNOWNED;
            }
          // fall through
          case 259: break;
          case 125:
            { return ValaTypes.VIRTUAL;
            }
          // fall through
          case 260: break;
          case 126:
            { return ValaTypes.ABSTRACT;
            }
          // fall through
          case 261: break;
          case 127:
            { return ValaTypes.CONTINUE;
            }
          // fall through
          case 262: break;
          case 128:
            { return ValaTypes.INTERNAL;
            }
          // fall through
          case 263: break;
          case 129:
            { return ValaTypes.OVERRIDE;
            }
          // fall through
          case 264: break;
          case 130:
            { return ValaTypes.REQUIRES;
            }
          // fall through
          case 265: break;
          case 131:
            { return ValaTypes.CONSTRUCT;
            }
          // fall through
          case 266: break;
          case 132:
            { return ValaTypes.INTERFACE;
            }
          // fall through
          case 267: break;
          case 133:
            { return ValaTypes.NAMESPACE;
            }
          // fall through
          case 268: break;
          case 134:
            { return ValaTypes.PROTECTED;
            }
          // fall through
          case 269: break;
          case 135:
            { return ValaTypes.ERRORDOMAIN;
            }
          // fall through
          case 270: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
