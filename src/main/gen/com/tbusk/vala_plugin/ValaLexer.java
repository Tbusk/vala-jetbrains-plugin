// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Vala.flex

package com.tbusk.vala_plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.tbusk.vala_plugin.psi.ValaTypes.*;
import com.intellij.psi.TokenType;import com.tbusk.vala_plugin.psi.ValaTypes;


class ValaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\20\1\25\1\20\1\26\1\20\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\32\36\1\37"+
    "\1\40\1\41\1\0\1\42\1\0\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\2\36\1\54"+
    "\1\55\1\56\1\57\1\60\1\36\1\61\1\62\1\63"+
    "\1\64\1\65\4\36\1\66\1\67\1\70\7\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\13\25\1\30\1\1\1\31\1\32\1\0"+
    "\1\33\1\0\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\0\1\43\1\44\1\15\1\45\1\46\1\47"+
    "\25\25\1\50\2\0\7\25\1\51\17\25\3\0\1\52"+
    "\1\53\1\54\10\25\1\55\1\25\1\56\1\25\1\57"+
    "\5\25\1\60\1\25\1\61\4\25\1\52\1\0\1\62"+
    "\2\0\1\63\1\64\1\25\1\65\1\66\1\67\1\70"+
    "\1\71\5\25\1\72\1\25\1\73\3\25\1\74\1\75"+
    "\2\25\1\76\1\62\1\77\4\25\1\100\1\101\1\102"+
    "\1\103\1\104\1\25\1\105\2\25\1\106\1\25\1\107"+
    "\3\25\1\110\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\71"+
    "\0\71\0\u018f\0\u01c8\0\71\0\u0201\0\71\0\u023a\0\u0273"+
    "\0\71\0\71\0\u02ac\0\u02e5\0\u031e\0\71\0\71\0\u0357"+
    "\0\71\0\71\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\71\0\u0603\0\71"+
    "\0\71\0\344\0\71\0\u063c\0\71\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\u0675\0\u06ae\0\71\0\u06e7\0\71"+
    "\0\71\0\71\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d"+
    "\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05"+
    "\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\71"+
    "\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c"+
    "\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24"+
    "\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec"+
    "\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u0357\0\u0357\0\u1242"+
    "\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u0357"+
    "\0\u140a\0\u0357\0\u1443\0\u0357\0\u147c\0\u14b5\0\u14ee\0\u1527"+
    "\0\u1560\0\u0357\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6"+
    "\0\71\0\u16ef\0\u0bcd\0\u1209\0\u1728\0\u0357\0\u0357\0\u1761"+
    "\0\u0357\0\u0357\0\u0357\0\u0357\0\u0357\0\u179a\0\u17d3\0\u180c"+
    "\0\u1845\0\u187e\0\u0357\0\u18b7\0\u0357\0\u18f0\0\u1929\0\u1962"+
    "\0\u0357\0\u0357\0\u199b\0\u19d4\0\u0357\0\71\0\u0357\0\u1a0d"+
    "\0\u1a46\0\u1a7f\0\u1ab8\0\u0357\0\u0357\0\u0357\0\u0357\0\u0357"+
    "\0\u1af1\0\u0357\0\u1b2a\0\u1b63\0\u0357\0\u1b9c\0\u0357\0\u1bd5"+
    "\0\u1c0e\0\u1c47\0\u0357\0\u0357\0\u0357";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\7\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\2\1\32\1\2\1\30\1\33\1\34\1\35"+
    "\1\30\1\36\2\30\1\37\1\40\1\30\1\41\1\30"+
    "\1\42\1\30\1\43\1\44\1\45\1\30\1\46\1\47"+
    "\1\50\72\0\2\3\120\0\1\51\36\0\5\52\1\53"+
    "\32\52\1\54\30\52\32\0\1\55\45\0\1\56\113\0"+
    "\1\57\51\0\1\60\16\0\1\61\53\0\1\62\14\0"+
    "\1\63\50\0\1\64\4\0\1\65\12\0\1\66\54\0"+
    "\1\67\1\0\7\20\74\0\1\70\70\0\1\71\70\0"+
    "\1\72\56\0\7\30\7\0\1\30\3\0\24\30\23\0"+
    "\7\30\7\0\1\30\3\0\15\30\1\73\6\30\23\0"+
    "\7\30\7\0\1\30\3\0\10\30\1\74\1\30\1\75"+
    "\2\30\1\76\6\30\23\0\7\30\7\0\1\30\3\0"+
    "\15\30\1\77\6\30\23\0\7\30\7\0\1\30\3\0"+
    "\1\30\1\100\10\30\1\101\11\30\23\0\7\30\7\0"+
    "\1\30\3\0\14\30\1\102\7\30\23\0\7\30\7\0"+
    "\1\30\3\0\15\30\1\103\6\30\23\0\7\30\7\0"+
    "\1\30\3\0\1\30\1\104\20\30\1\105\1\30\23\0"+
    "\7\30\7\0\1\30\3\0\17\30\1\106\2\30\1\107"+
    "\1\30\23\0\7\30\7\0\1\30\3\0\10\30\1\110"+
    "\10\30\1\111\2\30\23\0\7\30\7\0\1\30\3\0"+
    "\17\30\1\112\4\30\23\0\7\30\7\0\1\30\3\0"+
    "\3\30\1\113\5\30\1\114\1\115\1\30\1\116\3\30"+
    "\1\117\3\30\72\0\1\120\1\0\2\52\2\0\65\52"+
    "\12\121\1\122\56\121\2\65\1\0\66\65\20\0\7\67"+
    "\62\0\7\30\7\0\1\30\3\0\15\30\1\123\6\30"+
    "\23\0\7\30\7\0\1\30\3\0\1\30\1\124\22\30"+
    "\23\0\7\30\7\0\1\30\3\0\1\30\1\125\22\30"+
    "\23\0\7\30\7\0\1\30\3\0\14\30\1\126\7\30"+
    "\23\0\7\30\7\0\1\30\3\0\22\30\1\127\1\30"+
    "\23\0\7\30\7\0\1\30\3\0\12\30\1\130\11\30"+
    "\23\0\7\30\7\0\1\30\3\0\15\30\1\131\6\30"+
    "\23\0\7\30\7\0\1\30\3\0\21\30\1\132\2\30"+
    "\23\0\7\30\7\0\1\30\3\0\14\30\1\133\7\30"+
    "\23\0\7\30\7\0\1\30\3\0\13\30\1\134\10\30"+
    "\23\0\7\30\7\0\1\30\3\0\12\30\1\135\11\30"+
    "\23\0\7\30\7\0\1\30\3\0\11\30\1\136\3\30"+
    "\1\137\6\30\23\0\7\30\7\0\1\30\3\0\2\30"+
    "\1\140\21\30\23\0\7\30\7\0\1\30\3\0\15\30"+
    "\1\141\6\30\23\0\7\30\7\0\1\30\3\0\17\30"+
    "\1\142\4\30\23\0\7\30\7\0\1\30\3\0\22\30"+
    "\1\143\1\30\23\0\7\30\7\0\1\30\3\0\10\30"+
    "\1\144\13\30\23\0\7\30\7\0\1\30\3\0\14\30"+
    "\1\145\7\30\23\0\7\30\7\0\1\30\3\0\15\30"+
    "\1\146\6\30\23\0\7\30\7\0\1\30\3\0\11\30"+
    "\1\147\12\30\23\0\7\30\7\0\1\30\3\0\10\30"+
    "\1\150\1\151\12\30\3\0\12\121\1\152\56\121\12\153"+
    "\1\154\4\153\1\155\51\153\20\0\7\30\7\0\1\30"+
    "\3\0\12\30\1\156\11\30\23\0\7\30\7\0\1\30"+
    "\3\0\17\30\1\157\4\30\23\0\7\30\7\0\1\30"+
    "\3\0\20\30\1\160\3\30\23\0\7\30\7\0\1\30"+
    "\3\0\20\30\1\161\3\30\23\0\7\30\7\0\1\30"+
    "\3\0\2\30\1\162\21\30\23\0\7\30\7\0\1\30"+
    "\3\0\20\30\1\163\3\30\23\0\7\30\7\0\1\30"+
    "\3\0\1\30\1\164\22\30\23\0\1\30\1\165\1\30"+
    "\1\166\1\30\1\167\1\170\7\0\1\30\3\0\5\30"+
    "\1\171\16\30\23\0\7\30\7\0\1\30\3\0\7\30"+
    "\1\172\14\30\23\0\7\30\7\0\1\30\3\0\5\30"+
    "\1\173\16\30\23\0\7\30\7\0\1\30\3\0\12\30"+
    "\1\174\11\30\23\0\7\30\7\0\1\30\3\0\23\30"+
    "\1\175\23\0\7\30\7\0\1\30\3\0\21\30\1\176"+
    "\2\30\23\0\7\30\7\0\1\30\3\0\12\30\1\177"+
    "\11\30\23\0\7\30\7\0\1\30\3\0\17\30\1\200"+
    "\4\30\23\0\7\30\7\0\1\30\3\0\11\30\1\201"+
    "\12\30\23\0\7\30\7\0\1\30\3\0\5\30\1\202"+
    "\16\30\23\0\7\30\7\0\1\30\3\0\1\30\1\203"+
    "\22\30\23\0\7\30\7\0\1\30\3\0\21\30\1\204"+
    "\2\30\23\0\7\30\7\0\1\30\3\0\14\30\1\205"+
    "\7\30\23\0\7\30\7\0\1\30\3\0\3\30\1\206"+
    "\20\30\23\0\7\30\7\0\1\30\3\0\15\30\1\207"+
    "\6\30\23\0\7\30\7\0\1\30\3\0\14\30\1\210"+
    "\7\30\3\0\17\121\1\211\51\121\12\153\1\212\70\153"+
    "\1\212\4\153\1\213\51\153\12\214\1\215\56\214\20\0"+
    "\7\30\7\0\1\30\3\0\20\30\1\216\3\30\23\0"+
    "\7\30\7\0\1\30\3\0\21\30\1\217\2\30\23\0"+
    "\7\30\7\0\1\30\3\0\12\30\1\220\11\30\23\0"+
    "\7\30\7\0\1\30\3\0\5\30\1\221\16\30\23\0"+
    "\7\30\7\0\1\30\3\0\21\30\1\222\2\30\23\0"+
    "\5\30\1\223\1\30\7\0\1\30\3\0\24\30\23\0"+
    "\2\30\1\224\4\30\7\0\1\30\3\0\24\30\23\0"+
    "\4\30\1\225\2\30\7\0\1\30\3\0\24\30\23\0"+
    "\7\30\7\0\1\30\3\0\17\30\1\226\4\30\23\0"+
    "\7\30\7\0\1\30\3\0\20\30\1\227\3\30\23\0"+
    "\7\30\7\0\1\30\3\0\1\30\1\230\22\30\23\0"+
    "\7\30\7\0\1\30\3\0\5\30\1\231\16\30\23\0"+
    "\7\30\7\0\1\30\3\0\11\30\1\232\12\30\23\0"+
    "\7\30\7\0\1\30\3\0\21\30\1\233\2\30\23\0"+
    "\7\30\7\0\1\30\3\0\14\30\1\234\7\30\23\0"+
    "\7\30\7\0\1\30\3\0\17\30\1\235\4\30\23\0"+
    "\1\30\1\236\1\30\1\237\1\30\1\240\1\241\7\0"+
    "\1\30\3\0\24\30\23\0\7\30\7\0\1\30\3\0"+
    "\7\30\1\242\14\30\23\0\7\30\7\0\1\30\3\0"+
    "\10\30\1\243\13\30\23\0\7\30\7\0\1\30\3\0"+
    "\17\30\1\244\4\30\23\0\7\30\7\0\1\30\3\0"+
    "\7\30\1\245\14\30\3\0\12\153\1\154\4\153\1\246"+
    "\51\153\12\214\1\215\4\214\1\246\51\214\20\0\7\30"+
    "\7\0\1\30\3\0\5\30\1\247\16\30\23\0\7\30"+
    "\7\0\1\30\3\0\6\30\1\250\15\30\23\0\7\30"+
    "\7\0\1\30\3\0\16\30\1\251\5\30\23\0\7\30"+
    "\7\0\1\30\3\0\21\30\1\252\2\30\23\0\7\30"+
    "\7\0\1\30\3\0\3\30\1\253\20\30\23\0\7\30"+
    "\7\0\1\30\3\0\3\30\1\254\20\30\23\0\7\30"+
    "\7\0\1\30\3\0\7\30\1\255\14\30\23\0\5\30"+
    "\1\256\1\30\7\0\1\30\3\0\24\30\23\0\2\30"+
    "\1\257\4\30\7\0\1\30\3\0\24\30\23\0\4\30"+
    "\1\260\2\30\7\0\1\30\3\0\24\30\23\0\7\30"+
    "\7\0\1\30\3\0\1\30\1\261\22\30\23\0\7\30"+
    "\7\0\1\30\3\0\21\30\1\262\2\30\23\0\7\30"+
    "\7\0\1\30\3\0\1\30\1\263\22\30\23\0\7\30"+
    "\7\0\1\30\3\0\1\30\1\264\22\30\23\0\7\30"+
    "\7\0\1\30\3\0\5\30\1\265\16\30\23\0\7\30"+
    "\7\0\1\30\3\0\21\30\1\266\2\30\23\0\7\30"+
    "\7\0\1\30\3\0\17\30\1\267\4\30\23\0\7\30"+
    "\7\0\1\30\3\0\3\30\1\270\20\30\23\0\7\30"+
    "\7\0\1\30\3\0\3\30\1\271\20\30\23\0\7\30"+
    "\7\0\1\30\3\0\5\30\1\272\16\30\23\0\7\30"+
    "\7\0\1\30\3\0\5\30\1\273\16\30\23\0\7\30"+
    "\7\0\1\30\3\0\5\30\1\274\16\30\23\0\7\30"+
    "\7\0\1\30\3\0\4\30\1\275\17\30\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7296];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\2\11\2\1\1\11\1\1\1\11"+
    "\2\1\2\11\3\1\2\11\1\1\2\11\13\1\1\11"+
    "\1\1\2\11\1\0\1\11\1\0\7\11\1\0\1\1"+
    "\1\11\1\1\3\11\25\1\1\11\2\0\27\1\3\0"+
    "\34\1\1\11\1\0\1\1\2\0\30\1\1\11\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ValaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 75: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 76: break;
          case 3:
            { return NOT;
            }
          // fall through
          case 77: break;
          case 4:
            { return MODULO;
            }
          // fall through
          case 78: break;
          case 5:
            { return LPAREN;
            }
          // fall through
          case 79: break;
          case 6:
            { return RPAREN;
            }
          // fall through
          case 80: break;
          case 7:
            { return STAR;
            }
          // fall through
          case 81: break;
          case 8:
            { return PLUS;
            }
          // fall through
          case 82: break;
          case 9:
            { return COMMA;
            }
          // fall through
          case 83: break;
          case 10:
            { return MINUS;
            }
          // fall through
          case 84: break;
          case 11:
            { return DOT;
            }
          // fall through
          case 85: break;
          case 12:
            { return DIVIDE;
            }
          // fall through
          case 86: break;
          case 13:
            { return NUMBER;
            }
          // fall through
          case 87: break;
          case 14:
            { return COLON;
            }
          // fall through
          case 88: break;
          case 15:
            { return SEMICOLON;
            }
          // fall through
          case 89: break;
          case 16:
            { return LESS_THAN;
            }
          // fall through
          case 90: break;
          case 17:
            { return EQUALS;
            }
          // fall through
          case 91: break;
          case 18:
            { return GREATER_THAN;
            }
          // fall through
          case 92: break;
          case 19:
            { return QUESTION_MARK;
            }
          // fall through
          case 93: break;
          case 20:
            { return AT;
            }
          // fall through
          case 94: break;
          case 21:
            { return IDENTIFIER;
            }
          // fall through
          case 95: break;
          case 22:
            { return LBRACKET;
            }
          // fall through
          case 96: break;
          case 23:
            { return RBRACKET;
            }
          // fall through
          case 97: break;
          case 24:
            { return LBRACE;
            }
          // fall through
          case 98: break;
          case 25:
            { return RBRACE;
            }
          // fall through
          case 99: break;
          case 26:
            { return NOT_EQUALS;
            }
          // fall through
          case 100: break;
          case 27:
            { return STRING_LITERAL;
            }
          // fall through
          case 101: break;
          case 28:
            { return MODULO_EQUALS;
            }
          // fall through
          case 102: break;
          case 29:
            { return AND;
            }
          // fall through
          case 103: break;
          case 30:
            { return MULTIPLY_EQUALS;
            }
          // fall through
          case 104: break;
          case 31:
            { return INCREMENT;
            }
          // fall through
          case 105: break;
          case 32:
            { return PLUS_EQUALS;
            }
          // fall through
          case 106: break;
          case 33:
            { return DECREMENT;
            }
          // fall through
          case 107: break;
          case 34:
            { return MINUS_EQUALS;
            }
          // fall through
          case 108: break;
          case 35:
            { return COMMENT;
            }
          // fall through
          case 109: break;
          case 36:
            { return DIVIDE_EQUALS;
            }
          // fall through
          case 110: break;
          case 37:
            { return LESS_THAN_EQUALS;
            }
          // fall through
          case 111: break;
          case 38:
            { return EQUALS_EQUALS;
            }
          // fall through
          case 112: break;
          case 39:
            { return GREATER_THAN_EQUALS;
            }
          // fall through
          case 113: break;
          case 40:
            { return OR;
            }
          // fall through
          case 114: break;
          case 41:
            { return INT;
            }
          // fall through
          case 115: break;
          case 42:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 116: break;
          case 43:
            { return BOOL;
            }
          // fall through
          case 117: break;
          case 44:
            { return CHAR;
            }
          // fall through
          case 118: break;
          case 45:
            { return INT8;
            }
          // fall through
          case 119: break;
          case 46:
            { return LONG;
            }
          // fall through
          case 120: break;
          case 47:
            { return NULL;
            }
          // fall through
          case 121: break;
          case 48:
            { return TRUE;
            }
          // fall through
          case 122: break;
          case 49:
            { return UINT;
            }
          // fall through
          case 123: break;
          case 50:
            { return DOC_COMMENT;
            }
          // fall through
          case 124: break;
          case 51:
            { return CLASS;
            }
          // fall through
          case 125: break;
          case 52:
            { return CONST;
            }
          // fall through
          case 126: break;
          case 53:
            { return FALSE;
            }
          // fall through
          case 127: break;
          case 54:
            { return FLOAT;
            }
          // fall through
          case 128: break;
          case 55:
            { return INT16;
            }
          // fall through
          case 129: break;
          case 56:
            { return INT32;
            }
          // fall through
          case 130: break;
          case 57:
            { return INT64;
            }
          // fall through
          case 131: break;
          case 58:
            { return SHORT;
            }
          // fall through
          case 132: break;
          case 59:
            { return UCHAR;
            }
          // fall through
          case 133: break;
          case 60:
            { return UINT8;
            }
          // fall through
          case 134: break;
          case 61:
            { return ULONG;
            }
          // fall through
          case 135: break;
          case 62:
            { return USING;
            }
          // fall through
          case 136: break;
          case 63:
            { return DOUBLE;
            }
          // fall through
          case 137: break;
          case 64:
            { return PUBLIC;
            }
          // fall through
          case 138: break;
          case 65:
            { return STRING;
            }
          // fall through
          case 139: break;
          case 66:
            { return UINT16;
            }
          // fall through
          case 140: break;
          case 67:
            { return UINT32;
            }
          // fall through
          case 141: break;
          case 68:
            { return UINT64;
            }
          // fall through
          case 142: break;
          case 69:
            { return USHORT;
            }
          // fall through
          case 143: break;
          case 70:
            { return PRIVATE;
            }
          // fall through
          case 144: break;
          case 71:
            { return UNICHAR;
            }
          // fall through
          case 145: break;
          case 72:
            { return INTERFACE;
            }
          // fall through
          case 146: break;
          case 73:
            { return ENUM;
            }
          // fall through
          case 147: break;
          case 74:
            { return PROTECTED;
            }
          // fall through
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
