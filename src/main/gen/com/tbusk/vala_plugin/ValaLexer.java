// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Vala.flex

package com.tbusk.vala_plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tbusk.vala_plugin.psi.ValaTypes;
import com.intellij.psi.TokenType;
import com.tbusk.vala_plugin.psi.ValaTypes;


class ValaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\21\1\26\1\21\1\27\1\21\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\32\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\0\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\37\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\37\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\37\1\72\1\37\1\73"+
    "\1\74\1\75\1\76\6\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\22\26\1\33\1\34"+
    "\1\35\1\36\1\0\1\37\1\0\1\5\1\0\1\40"+
    "\2\0\1\41\1\16\11\26\1\42\5\26\1\43\1\44"+
    "\30\26\2\0\17\26\1\45\1\46\2\26\1\47\15\26"+
    "\1\50\7\26\1\51\4\26\3\0\1\52\2\26\1\53"+
    "\1\26\1\54\1\26\1\55\5\26\1\56\1\57\6\26"+
    "\1\60\1\26\1\61\1\26\1\62\14\26\1\63\1\26"+
    "\1\64\6\26\1\65\2\26\1\52\1\0\1\66\2\0"+
    "\1\26\1\67\1\70\1\71\1\72\1\73\3\26\1\74"+
    "\1\75\1\26\1\76\1\77\1\100\3\26\1\101\4\26"+
    "\1\102\4\26\1\103\1\104\3\26\1\105\1\106\3\26"+
    "\1\107\1\26\1\110\1\111\1\66\4\26\1\112\6\26"+
    "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\2\26\1\124\4\26\1\125\1\126\3\26\1\127"+
    "\1\26\1\130\1\131\1\132\1\133\1\26\1\134\2\26"+
    "\1\135\1\26\1\136\1\137\1\140\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\77\0\275\0\77\0\374\0\u013b"+
    "\0\77\0\77\0\77\0\77\0\77\0\77\0\77\0\u017a"+
    "\0\u01b9\0\77\0\77\0\77\0\77\0\77\0\77\0\77"+
    "\0\u01f8\0\77\0\77\0\77\0\77\0\u0237\0\u0276\0\u02b5"+
    "\0\u02f4\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad"+
    "\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\77"+
    "\0\77\0\77\0\77\0\275\0\77\0\u06a5\0\77\0\u013b"+
    "\0\77\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e"+
    "\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56"+
    "\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u01f8\0\u0b91\0\u0bd0\0\u0c0f"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07"+
    "\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff"+
    "\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7"+
    "\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef"+
    "\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7"+
    "\0\u1626\0\u1665\0\u16a4\0\u01f8\0\u16e3\0\u1722\0\u1761\0\u17a0"+
    "\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998"+
    "\0\u19d7\0\u01f8\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51"+
    "\0\u1b90\0\u01f8\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a"+
    "\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u01f8\0\u1e45\0\u01f8\0\u1e84"+
    "\0\u01f8\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u01f8\0\u01f8"+
    "\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u01f8\0\u2178"+
    "\0\u01f8\0\u21b7\0\u01f8\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2"+
    "\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u01f8"+
    "\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3"+
    "\0\u01f8\0\u26e2\0\u2721\0\77\0\u2760\0\u11b8\0\u1d88\0\u279f"+
    "\0\u27de\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u281d\0\u285c\0\u289b"+
    "\0\u28da\0\u01f8\0\u01f8\0\u2919\0\u01f8\0\u01f8\0\u01f8\0\u2958"+
    "\0\u2997\0\u29d6\0\u01f8\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u01f8"+
    "\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u01f8\0\u01f8\0\u2c0d\0\u2c4c"+
    "\0\u2c8b\0\u01f8\0\u01f8\0\u2cca\0\u2d09\0\u2d48\0\u01f8\0\u2d87"+
    "\0\u01f8\0\u01f8\0\77\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u01f8"+
    "\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u01f8\0\u01f8"+
    "\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u303c"+
    "\0\u307b\0\u01f8\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u01f8\0\u01f8"+
    "\0\u31b6\0\u31f5\0\u3234\0\u01f8\0\u3273\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u01f8\0\u32b2\0\u01f8\0\u32f1\0\u3330\0\u01f8\0\u336f\0\u01f8"+
    "\0\u01f8\0\u01f8\0\u01f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\7\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\2\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\2\31\1\44\1\31\1\45"+
    "\1\31\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\100\0"+
    "\2\3\74\0\5\64\1\65\33\64\1\66\35\64\7\0"+
    "\1\67\67\0\10\70\1\71\30\70\1\72\35\70\13\0"+
    "\1\73\4\0\1\74\75\0\1\75\1\0\7\21\70\0"+
    "\7\31\7\0\1\31\4\0\27\31\25\0\7\31\7\0"+
    "\1\31\4\0\2\31\1\76\16\31\1\77\5\31\25\0"+
    "\7\31\7\0\1\31\4\0\16\31\1\100\1\31\1\101"+
    "\6\31\25\0\7\31\7\0\1\31\4\0\1\31\1\102"+
    "\6\31\1\103\2\31\1\104\2\31\1\105\10\31\25\0"+
    "\7\31\7\0\1\31\4\0\5\31\1\106\10\31\1\107"+
    "\10\31\25\0\7\31\7\0\1\31\4\0\13\31\1\110"+
    "\1\31\1\111\11\31\25\0\7\31\7\0\1\31\4\0"+
    "\1\31\1\112\11\31\1\113\2\31\1\114\10\31\25\0"+
    "\7\31\7\0\1\31\4\0\6\31\1\115\6\31\1\116"+
    "\11\31\25\0\7\31\7\0\1\31\4\0\16\31\1\117"+
    "\10\31\25\0\7\31\7\0\1\31\4\0\1\31\1\120"+
    "\3\31\1\121\15\31\1\122\3\31\25\0\7\31\7\0"+
    "\1\31\4\0\24\31\1\123\1\124\1\31\25\0\7\31"+
    "\7\0\1\31\4\0\20\31\1\125\2\31\1\126\3\31"+
    "\25\0\7\31\7\0\1\31\4\0\5\31\1\127\21\31"+
    "\25\0\7\31\7\0\1\31\4\0\10\31\1\130\11\31"+
    "\1\131\2\31\1\132\1\31\25\0\7\31\7\0\1\31"+
    "\4\0\10\31\1\133\7\31\1\134\6\31\25\0\7\31"+
    "\7\0\1\31\4\0\3\31\1\135\5\31\1\136\1\31"+
    "\1\137\1\31\1\140\3\31\1\141\5\31\25\0\7\31"+
    "\7\0\1\31\4\0\1\31\1\142\7\31\1\143\4\31"+
    "\1\144\10\31\25\0\7\31\7\0\1\31\4\0\10\31"+
    "\1\145\16\31\25\0\7\31\7\0\1\31\4\0\11\31"+
    "\1\146\15\31\4\0\2\64\2\0\73\64\2\70\2\0"+
    "\73\70\13\147\1\150\63\147\2\74\1\0\74\74\21\0"+
    "\7\75\70\0\7\31\7\0\1\31\4\0\21\31\1\151"+
    "\5\31\25\0\7\31\7\0\1\31\4\0\26\31\1\152"+
    "\25\0\7\31\7\0\1\31\4\0\16\31\1\153\10\31"+
    "\25\0\7\31\7\0\1\31\4\0\5\31\1\154\21\31"+
    "\25\0\7\31\7\0\1\31\4\0\21\31\1\155\1\156"+
    "\4\31\25\0\7\31\7\0\1\31\4\0\1\31\1\157"+
    "\25\31\25\0\7\31\7\0\1\31\4\0\1\31\1\160"+
    "\25\31\25\0\7\31\7\0\1\31\4\0\15\31\1\161"+
    "\11\31\25\0\7\31\7\0\1\31\4\0\6\31\1\162"+
    "\20\31\25\0\7\31\7\0\1\31\4\0\23\31\1\163"+
    "\3\31\25\0\7\31\7\0\1\31\4\0\21\31\1\164"+
    "\5\31\25\0\7\31\7\0\1\31\4\0\23\31\1\165"+
    "\3\31\25\0\7\31\7\0\1\31\4\0\13\31\1\166"+
    "\13\31\25\0\7\31\7\0\1\31\4\0\16\31\1\167"+
    "\10\31\25\0\7\31\7\0\1\31\4\0\20\31\1\170"+
    "\6\31\25\0\7\31\7\0\1\31\4\0\22\31\1\171"+
    "\4\31\25\0\7\31\7\0\1\31\4\0\15\31\1\172"+
    "\11\31\25\0\7\31\7\0\1\31\4\0\14\31\1\173"+
    "\12\31\25\0\7\31\7\0\1\31\4\0\25\31\1\174"+
    "\1\31\25\0\7\31\7\0\1\31\4\0\13\31\1\175"+
    "\13\31\25\0\7\31\7\0\1\31\4\0\5\31\1\176"+
    "\21\31\25\0\7\31\7\0\1\31\4\0\15\31\1\177"+
    "\11\31\25\0\7\31\7\0\1\31\4\0\11\31\1\200"+
    "\4\31\1\201\10\31\25\0\7\31\7\0\1\31\4\0"+
    "\2\31\1\202\24\31\25\0\7\31\7\0\1\31\4\0"+
    "\22\31\1\203\4\31\25\0\7\31\7\0\1\31\4\0"+
    "\16\31\1\204\10\31\25\0\7\31\7\0\1\31\4\0"+
    "\1\31\1\205\16\31\1\206\6\31\25\0\7\31\7\0"+
    "\1\31\4\0\11\31\1\207\15\31\25\0\7\31\7\0"+
    "\1\31\4\0\20\31\1\210\6\31\25\0\7\31\7\0"+
    "\1\31\4\0\23\31\1\211\2\31\1\212\25\0\7\31"+
    "\7\0\1\31\4\0\10\31\1\213\16\31\25\0\7\31"+
    "\7\0\1\31\4\0\15\31\1\214\11\31\25\0\7\31"+
    "\7\0\1\31\4\0\16\31\1\215\10\31\25\0\7\31"+
    "\7\0\1\31\4\0\11\31\1\216\4\31\1\217\10\31"+
    "\25\0\7\31\7\0\1\31\4\0\10\31\1\220\1\221"+
    "\15\31\25\0\7\31\7\0\1\31\4\0\20\31\1\222"+
    "\6\31\25\0\7\31\7\0\1\31\4\0\20\31\1\223"+
    "\6\31\25\0\7\31\7\0\1\31\4\0\11\31\1\224"+
    "\15\31\25\0\7\31\7\0\1\31\4\0\11\31\1\225"+
    "\15\31\25\0\7\31\7\0\1\31\4\0\5\31\1\226"+
    "\21\31\4\0\13\147\1\227\63\147\13\230\1\231\4\230"+
    "\1\232\56\230\21\0\7\31\7\0\1\31\4\0\22\31"+
    "\1\233\4\31\25\0\7\31\7\0\1\31\4\0\15\31"+
    "\1\234\11\31\25\0\7\31\7\0\1\31\4\0\13\31"+
    "\1\235\13\31\25\0\7\31\7\0\1\31\4\0\1\31"+
    "\1\236\25\31\25\0\7\31\7\0\1\31\4\0\5\31"+
    "\1\237\21\31\25\0\7\31\7\0\1\31\4\0\3\31"+
    "\1\240\23\31\25\0\7\31\7\0\1\31\4\0\20\31"+
    "\1\241\6\31\25\0\7\31\7\0\1\31\4\0\21\31"+
    "\1\242\5\31\25\0\7\31\7\0\1\31\4\0\21\31"+
    "\1\243\1\244\4\31\25\0\7\31\7\0\1\31\4\0"+
    "\1\31\1\245\25\31\25\0\7\31\7\0\1\31\4\0"+
    "\2\31\1\246\24\31\25\0\7\31\7\0\1\31\4\0"+
    "\5\31\1\247\21\31\25\0\7\31\7\0\1\31\4\0"+
    "\14\31\1\250\12\31\25\0\7\31\7\0\1\31\4\0"+
    "\21\31\1\251\5\31\25\0\7\31\7\0\1\31\4\0"+
    "\1\31\1\252\25\31\25\0\7\31\7\0\1\31\4\0"+
    "\5\31\1\253\21\31\25\0\1\31\1\254\1\31\1\255"+
    "\1\31\1\256\1\257\7\0\1\31\4\0\5\31\1\260"+
    "\21\31\25\0\7\31\7\0\1\31\4\0\7\31\1\261"+
    "\17\31\25\0\7\31\7\0\1\31\4\0\5\31\1\262"+
    "\21\31\25\0\7\31\7\0\1\31\4\0\13\31\1\263"+
    "\13\31\25\0\7\31\7\0\1\31\4\0\20\31\1\264"+
    "\6\31\25\0\7\31\7\0\1\31\4\0\5\31\1\265"+
    "\21\31\25\0\7\31\7\0\1\31\4\0\24\31\1\266"+
    "\2\31\25\0\7\31\7\0\1\31\4\0\22\31\1\267"+
    "\4\31\25\0\7\31\7\0\1\31\4\0\13\31\1\270"+
    "\13\31\25\0\7\31\7\0\1\31\4\0\23\31\1\271"+
    "\3\31\25\0\7\31\7\0\1\31\4\0\20\31\1\272"+
    "\6\31\25\0\7\31\7\0\1\31\4\0\22\31\1\273"+
    "\4\31\25\0\7\31\7\0\1\31\4\0\11\31\1\274"+
    "\11\31\1\275\3\31\25\0\7\31\7\0\1\31\4\0"+
    "\22\31\1\276\4\31\25\0\7\31\7\0\1\31\4\0"+
    "\16\31\1\277\10\31\25\0\7\31\7\0\1\31\4\0"+
    "\5\31\1\300\21\31\25\0\7\31\7\0\1\31\4\0"+
    "\1\31\1\301\25\31\25\0\7\31\7\0\1\31\4\0"+
    "\22\31\1\302\4\31\25\0\7\31\7\0\1\31\4\0"+
    "\15\31\1\303\11\31\25\0\7\31\7\0\1\31\4\0"+
    "\3\31\1\304\23\31\25\0\7\31\7\0\1\31\4\0"+
    "\25\31\1\305\1\31\25\0\7\31\7\0\1\31\4\0"+
    "\16\31\1\306\10\31\25\0\7\31\7\0\1\31\4\0"+
    "\15\31\1\307\11\31\25\0\7\31\7\0\1\31\4\0"+
    "\22\31\1\310\4\31\25\0\7\31\7\0\1\31\4\0"+
    "\4\31\1\311\22\31\25\0\7\31\7\0\1\31\4\0"+
    "\13\31\1\312\13\31\25\0\7\31\7\0\1\31\4\0"+
    "\13\31\1\313\13\31\4\0\20\147\1\314\56\147\13\230"+
    "\1\315\76\230\1\315\4\230\1\316\56\230\13\317\1\320"+
    "\63\317\21\0\7\31\7\0\1\31\4\0\20\31\1\321"+
    "\6\31\25\0\7\31\7\0\1\31\4\0\3\31\1\322"+
    "\23\31\25\0\7\31\7\0\1\31\4\0\12\31\1\323"+
    "\14\31\25\0\7\31\7\0\1\31\4\0\10\31\1\324"+
    "\16\31\25\0\7\31\7\0\1\31\4\0\21\31\1\325"+
    "\5\31\25\0\7\31\7\0\1\31\4\0\22\31\1\326"+
    "\4\31\25\0\7\31\7\0\1\31\4\0\11\31\1\327"+
    "\15\31\25\0\7\31\7\0\1\31\4\0\23\31\1\330"+
    "\3\31\25\0\7\31\7\0\1\31\4\0\13\31\1\331"+
    "\13\31\25\0\7\31\7\0\1\31\4\0\5\31\1\332"+
    "\21\31\25\0\7\31\7\0\1\31\4\0\22\31\1\333"+
    "\4\31\25\0\7\31\7\0\1\31\4\0\1\31\1\334"+
    "\25\31\25\0\5\31\1\335\1\31\7\0\1\31\4\0"+
    "\27\31\25\0\2\31\1\336\4\31\7\0\1\31\4\0"+
    "\27\31\25\0\4\31\1\337\2\31\7\0\1\31\4\0"+
    "\27\31\25\0\7\31\7\0\1\31\4\0\20\31\1\340"+
    "\6\31\25\0\7\31\7\0\1\31\4\0\21\31\1\341"+
    "\5\31\25\0\7\31\7\0\1\31\4\0\20\31\1\342"+
    "\6\31\25\0\7\31\7\0\1\31\4\0\4\31\1\343"+
    "\22\31\25\0\7\31\7\0\1\31\4\0\1\31\1\344"+
    "\25\31\25\0\7\31\7\0\1\31\4\0\5\31\1\345"+
    "\21\31\25\0\7\31\7\0\1\31\4\0\11\31\1\346"+
    "\15\31\25\0\7\31\7\0\1\31\4\0\20\31\1\347"+
    "\6\31\25\0\7\31\7\0\1\31\4\0\22\31\1\350"+
    "\4\31\25\0\7\31\7\0\1\31\4\0\11\31\1\351"+
    "\15\31\25\0\7\31\7\0\1\31\4\0\15\31\1\352"+
    "\11\31\25\0\7\31\7\0\1\31\4\0\3\31\1\353"+
    "\23\31\25\0\7\31\7\0\1\31\4\0\3\31\1\354"+
    "\23\31\25\0\7\31\7\0\1\31\4\0\25\31\1\355"+
    "\1\31\25\0\7\31\7\0\1\31\4\0\20\31\1\356"+
    "\6\31\25\0\1\31\1\357\1\31\1\360\1\31\1\361"+
    "\1\362\7\0\1\31\4\0\27\31\25\0\7\31\7\0"+
    "\1\31\4\0\7\31\1\363\17\31\25\0\7\31\7\0"+
    "\1\31\4\0\10\31\1\364\16\31\25\0\7\31\7\0"+
    "\1\31\4\0\15\31\1\365\11\31\25\0\7\31\7\0"+
    "\1\31\4\0\20\31\1\366\6\31\25\0\7\31\7\0"+
    "\1\31\4\0\7\31\1\367\17\31\25\0\7\31\7\0"+
    "\1\31\4\0\23\31\1\370\3\31\25\0\7\31\7\0"+
    "\1\31\4\0\5\31\1\371\21\31\25\0\7\31\7\0"+
    "\1\31\4\0\4\31\1\372\22\31\4\0\13\230\1\231"+
    "\4\230\1\373\56\230\13\317\1\320\4\317\1\373\56\317"+
    "\21\0\7\31\7\0\1\31\4\0\1\31\1\374\25\31"+
    "\25\0\7\31\7\0\1\31\4\0\20\31\1\375\6\31"+
    "\25\0\7\31\7\0\1\31\4\0\15\31\1\376\11\31"+
    "\25\0\7\31\7\0\1\31\4\0\13\31\1\377\13\31"+
    "\25\0\7\31\7\0\1\31\4\0\5\31\1\u0100\21\31"+
    "\25\0\7\31\7\0\1\31\4\0\3\31\1\u0101\23\31"+
    "\25\0\7\31\7\0\1\31\4\0\6\31\1\u0102\20\31"+
    "\25\0\7\31\7\0\1\31\4\0\17\31\1\u0103\7\31"+
    "\25\0\7\31\7\0\1\31\4\0\11\31\1\u0104\15\31"+
    "\25\0\7\31\7\0\1\31\4\0\22\31\1\u0105\4\31"+
    "\25\0\7\31\7\0\1\31\4\0\3\31\1\u0106\23\31"+
    "\25\0\7\31\7\0\1\31\4\0\3\31\1\u0107\23\31"+
    "\25\0\7\31\7\0\1\31\4\0\15\31\1\u0108\11\31"+
    "\25\0\7\31\7\0\1\31\4\0\3\31\1\u0109\23\31"+
    "\25\0\7\31\7\0\1\31\4\0\7\31\1\u010a\17\31"+
    "\25\0\7\31\7\0\1\31\4\0\22\31\1\u010b\4\31"+
    "\25\0\7\31\7\0\1\31\4\0\10\31\1\u010c\16\31"+
    "\25\0\5\31\1\u010d\1\31\7\0\1\31\4\0\27\31"+
    "\25\0\2\31\1\u010e\4\31\7\0\1\31\4\0\27\31"+
    "\25\0\4\31\1\u010f\2\31\7\0\1\31\4\0\27\31"+
    "\25\0\7\31\7\0\1\31\4\0\1\31\1\u0110\25\31"+
    "\25\0\7\31\7\0\1\31\4\0\5\31\1\u0111\21\31"+
    "\25\0\7\31\7\0\1\31\4\0\22\31\1\u0112\4\31"+
    "\25\0\7\31\7\0\1\31\4\0\1\31\1\u0113\25\31"+
    "\25\0\7\31\7\0\1\31\4\0\3\31\1\u0114\23\31"+
    "\25\0\7\31\7\0\1\31\4\0\23\31\1\u0115\3\31"+
    "\25\0\7\31\7\0\1\31\4\0\23\31\1\u0116\3\31"+
    "\25\0\7\31\7\0\1\31\4\0\22\31\1\u0117\4\31"+
    "\25\0\7\31\7\0\1\31\4\0\10\31\1\u0118\16\31"+
    "\25\0\7\31\7\0\1\31\4\0\1\31\1\u0119\25\31"+
    "\25\0\7\31\7\0\1\31\4\0\1\31\1\u011a\25\31"+
    "\25\0\7\31\7\0\1\31\4\0\4\31\1\u011b\22\31"+
    "\25\0\7\31\7\0\1\31\4\0\5\31\1\u011c\21\31"+
    "\25\0\7\31\7\0\1\31\4\0\22\31\1\u011d\4\31"+
    "\25\0\7\31\7\0\1\31\4\0\20\31\1\u011e\6\31"+
    "\25\0\7\31\7\0\1\31\4\0\4\31\1\u011f\22\31"+
    "\25\0\7\31\7\0\1\31\4\0\13\31\1\u0120\13\31"+
    "\25\0\7\31\7\0\1\31\4\0\22\31\1\u0121\4\31"+
    "\25\0\7\31\7\0\1\31\4\0\3\31\1\u0122\23\31"+
    "\25\0\7\31\7\0\1\31\4\0\5\31\1\u0123\21\31"+
    "\25\0\7\31\7\0\1\31\4\0\3\31\1\u0124\23\31"+
    "\25\0\7\31\7\0\1\31\4\0\3\31\1\u0125\23\31"+
    "\25\0\7\31\7\0\1\31\4\0\5\31\1\u0126\21\31"+
    "\25\0\7\31\7\0\1\31\4\0\5\31\1\u0127\21\31"+
    "\25\0\7\31\7\0\1\31\4\0\22\31\1\u0128\4\31"+
    "\25\0\7\31\7\0\1\31\4\0\5\31\1\u0129\21\31"+
    "\25\0\7\31\7\0\1\31\4\0\5\31\1\u012a\21\31"+
    "\25\0\7\31\7\0\1\31\4\0\4\31\1\u012b\22\31"+
    "\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13230];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\2\1\7\11"+
    "\2\1\7\11\1\1\4\11\22\1\4\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\53\1\2\0\56\1"+
    "\3\0\62\1\1\11\1\0\1\1\2\0\52\1\1\11"+
    "\60\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ValaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 98: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 99: break;
          case 3:
            { return ValaTypes.EXCLAMATION;
            }
          // fall through
          case 100: break;
          case 4:
            { return ValaTypes.PERCENT;
            }
          // fall through
          case 101: break;
          case 5:
            { return ValaTypes.AND;
            }
          // fall through
          case 102: break;
          case 6:
            { return ValaTypes.LPAREN;
            }
          // fall through
          case 103: break;
          case 7:
            { return ValaTypes.RPAREN;
            }
          // fall through
          case 104: break;
          case 8:
            { return ValaTypes.STAR;
            }
          // fall through
          case 105: break;
          case 9:
            { return ValaTypes.PLUS;
            }
          // fall through
          case 106: break;
          case 10:
            { return ValaTypes.COMMA;
            }
          // fall through
          case 107: break;
          case 11:
            { return ValaTypes.MINUS;
            }
          // fall through
          case 108: break;
          case 12:
            { return ValaTypes.DOT;
            }
          // fall through
          case 109: break;
          case 13:
            { return ValaTypes.FORWARD_SLASH;
            }
          // fall through
          case 110: break;
          case 14:
            { return ValaTypes.NUMBER;
            }
          // fall through
          case 111: break;
          case 15:
            { return ValaTypes.COLON;
            }
          // fall through
          case 112: break;
          case 16:
            { return ValaTypes.SEMICOLON;
            }
          // fall through
          case 113: break;
          case 17:
            { return ValaTypes.LESS_THAN;
            }
          // fall through
          case 114: break;
          case 18:
            { return ValaTypes.EQUALS;
            }
          // fall through
          case 115: break;
          case 19:
            { return ValaTypes.GREATER_THAN;
            }
          // fall through
          case 116: break;
          case 20:
            { return ValaTypes.QUESTION_MARK;
            }
          // fall through
          case 117: break;
          case 21:
            { return ValaTypes.AT;
            }
          // fall through
          case 118: break;
          case 22:
            { return ValaTypes.IDENTIFIER;
            }
          // fall through
          case 119: break;
          case 23:
            { return ValaTypes.LBRACKET;
            }
          // fall through
          case 120: break;
          case 24:
            { return ValaTypes.RBRACKET;
            }
          // fall through
          case 121: break;
          case 25:
            { return ValaTypes.CARET;
            }
          // fall through
          case 122: break;
          case 26:
            { return ValaTypes.UNDERSCORE;
            }
          // fall through
          case 123: break;
          case 27:
            { return ValaTypes.LBRACE;
            }
          // fall through
          case 124: break;
          case 28:
            { return ValaTypes.PIPE;
            }
          // fall through
          case 125: break;
          case 29:
            { return ValaTypes.RBRACE;
            }
          // fall through
          case 126: break;
          case 30:
            { return ValaTypes.TILDE;
            }
          // fall through
          case 127: break;
          case 31:
            { return ValaTypes.STRING_LITERAL;
            }
          // fall through
          case 128: break;
          case 32:
            { return ValaTypes.CHAR_LITERAL;
            }
          // fall through
          case 129: break;
          case 33:
            { return ValaTypes.COMMENT;
            }
          // fall through
          case 130: break;
          case 34:
            { return ValaTypes.DO;
            }
          // fall through
          case 131: break;
          case 35:
            { return ValaTypes.IF;
            }
          // fall through
          case 132: break;
          case 36:
            { return ValaTypes.IN;
            }
          // fall through
          case 133: break;
          case 37:
            { return ValaTypes.FOR;
            }
          // fall through
          case 134: break;
          case 38:
            { return ValaTypes.INT;
            }
          // fall through
          case 135: break;
          case 39:
            { return ValaTypes.NEW;
            }
          // fall through
          case 136: break;
          case 40:
            { return ValaTypes.TRY;
            }
          // fall through
          case 137: break;
          case 41:
            { return ValaTypes.VAR;
            }
          // fall through
          case 138: break;
          case 42:
            { return ValaTypes.BLOCK_COMMENT;
            }
          // fall through
          case 139: break;
          case 43:
            { return ValaTypes.BOOL;
            }
          // fall through
          case 140: break;
          case 44:
            { return ValaTypes.CASE;
            }
          // fall through
          case 141: break;
          case 45:
            { return ValaTypes.CHAR;
            }
          // fall through
          case 142: break;
          case 46:
            { return ValaTypes.ELSE;
            }
          // fall through
          case 143: break;
          case 47:
            { return ValaTypes.ENUM;
            }
          // fall through
          case 144: break;
          case 48:
            { return ValaTypes.INT8;
            }
          // fall through
          case 145: break;
          case 49:
            { return ValaTypes.LONG;
            }
          // fall through
          case 146: break;
          case 50:
            { return ValaTypes.NULL;
            }
          // fall through
          case 147: break;
          case 51:
            { return ValaTypes.TRUE;
            }
          // fall through
          case 148: break;
          case 52:
            { return ValaTypes.UINT;
            }
          // fall through
          case 149: break;
          case 53:
            { return ValaTypes.VOID;
            }
          // fall through
          case 150: break;
          case 54:
            { return ValaTypes.DOC_COMMENT;
            }
          // fall through
          case 151: break;
          case 55:
            { return ValaTypes.ASYNC;
            }
          // fall through
          case 152: break;
          case 56:
            { return ValaTypes.BREAK;
            }
          // fall through
          case 153: break;
          case 57:
            { return ValaTypes.CATCH;
            }
          // fall through
          case 154: break;
          case 58:
            { return ValaTypes.CLASS;
            }
          // fall through
          case 155: break;
          case 59:
            { return ValaTypes.CONST;
            }
          // fall through
          case 156: break;
          case 60:
            { return ValaTypes.FALSE;
            }
          // fall through
          case 157: break;
          case 61:
            { return ValaTypes.FLOAT;
            }
          // fall through
          case 158: break;
          case 62:
            { return ValaTypes.INT16;
            }
          // fall through
          case 159: break;
          case 63:
            { return ValaTypes.INT32;
            }
          // fall through
          case 160: break;
          case 64:
            { return ValaTypes.INT64;
            }
          // fall through
          case 161: break;
          case 65:
            { return ValaTypes.OWNED;
            }
          // fall through
          case 162: break;
          case 66:
            { return ValaTypes.SHORT;
            }
          // fall through
          case 163: break;
          case 67:
            { return ValaTypes.THROW;
            }
          // fall through
          case 164: break;
          case 68:
            { return ValaTypes.UCHAR;
            }
          // fall through
          case 165: break;
          case 69:
            { return ValaTypes.UINT8;
            }
          // fall through
          case 166: break;
          case 70:
            { return ValaTypes.ULONG;
            }
          // fall through
          case 167: break;
          case 71:
            { return ValaTypes.USING;
            }
          // fall through
          case 168: break;
          case 72:
            { return ValaTypes.WHILE;
            }
          // fall through
          case 169: break;
          case 73:
            { return ValaTypes.YIELD;
            }
          // fall through
          case 170: break;
          case 74:
            { return ValaTypes.DOUBLE;
            }
          // fall through
          case 171: break;
          case 75:
            { return ValaTypes.PUBLIC;
            }
          // fall through
          case 172: break;
          case 76:
            { return ValaTypes.RETURN;
            }
          // fall through
          case 173: break;
          case 77:
            { return ValaTypes.STATIC;
            }
          // fall through
          case 174: break;
          case 78:
            { return ValaTypes.STRING;
            }
          // fall through
          case 175: break;
          case 79:
            { return ValaTypes.STRUCT;
            }
          // fall through
          case 176: break;
          case 80:
            { return ValaTypes.SWITCH;
            }
          // fall through
          case 177: break;
          case 81:
            { return ValaTypes.UINT16;
            }
          // fall through
          case 178: break;
          case 82:
            { return ValaTypes.UINT32;
            }
          // fall through
          case 179: break;
          case 83:
            { return ValaTypes.UINT64;
            }
          // fall through
          case 180: break;
          case 84:
            { return ValaTypes.USHORT;
            }
          // fall through
          case 181: break;
          case 85:
            { return ValaTypes.DEFAULT;
            }
          // fall through
          case 182: break;
          case 86:
            { return ValaTypes.FOREACH;
            }
          // fall through
          case 183: break;
          case 87:
            { return ValaTypes.PRIVATE;
            }
          // fall through
          case 184: break;
          case 88:
            { return ValaTypes.UNICHAR;
            }
          // fall through
          case 185: break;
          case 89:
            { return ValaTypes.UNOWNED;
            }
          // fall through
          case 186: break;
          case 90:
            { return ValaTypes.VIRTUAL;
            }
          // fall through
          case 187: break;
          case 91:
            { return ValaTypes.ABSTRACT;
            }
          // fall through
          case 188: break;
          case 92:
            { return ValaTypes.CONTINUE;
            }
          // fall through
          case 189: break;
          case 93:
            { return ValaTypes.OVERRIDE;
            }
          // fall through
          case 190: break;
          case 94:
            { return ValaTypes.CONSTRUCT;
            }
          // fall through
          case 191: break;
          case 95:
            { return ValaTypes.INTERFACE;
            }
          // fall through
          case 192: break;
          case 96:
            { return ValaTypes.NAMESPACE;
            }
          // fall through
          case 193: break;
          case 97:
            { return ValaTypes.PROTECTED;
            }
          // fall through
          case 194: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
