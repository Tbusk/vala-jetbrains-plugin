// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Vala.flex

package com.tbusk.vala_plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tbusk.vala_plugin.psi.ValaTypes;
import com.intellij.psi.TokenType;
import com.tbusk.vala_plugin.ValaTokenSets;
import com.tbusk.vala_plugin.psi.ValaTokenType;



import java.util.BitSet;

class ValaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\22\1\27\1\22\1\30\1\22"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\3\40\1\44\4\40\1\45\1\40"+
    "\1\46\6\40\1\47\4\40\1\50\1\51\1\52\1\53"+
    "\1\54\1\0\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\6\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\6\27\1\30\1\31\1\32\1\33\23\27\1\34"+
    "\1\35\1\36\1\37\4\0\1\40\2\0\1\41\2\0"+
    "\1\42\1\17\2\0\4\43\4\27\1\44\10\27\1\45"+
    "\10\27\1\46\1\47\1\50\34\27\5\0\35\27\1\51"+
    "\1\52\3\27\1\53\22\27\1\54\10\27\1\55\5\27"+
    "\4\0\1\56\1\57\1\0\1\27\1\60\6\27\1\61"+
    "\1\62\1\27\1\63\1\27\1\64\6\27\1\65\1\66"+
    "\2\27\1\67\11\27\1\70\1\27\1\71\1\72\1\27"+
    "\1\73\17\27\1\74\1\27\1\75\2\27\1\76\6\27"+
    "\1\77\1\100\2\27\1\56\1\0\1\101\3\0\1\102"+
    "\5\27\1\103\1\104\1\105\1\106\1\107\4\27\1\110"+
    "\3\27\1\111\1\27\1\112\1\27\1\113\1\114\1\115"+
    "\3\27\1\116\5\27\1\117\7\27\1\120\1\27\1\121"+
    "\3\27\1\122\1\123\3\27\1\124\1\27\1\125\1\126"+
    "\1\101\1\27\1\127\2\27\1\130\4\27\1\131\2\27"+
    "\1\132\10\27\1\133\1\27\1\134\1\135\1\136\1\27"+
    "\1\137\1\140\1\141\1\142\1\143\1\144\1\145\1\146"+
    "\1\147\2\27\1\150\1\27\1\151\1\152\3\27\1\153"+
    "\1\27\1\154\1\27\1\155\1\156\4\27\1\157\2\27"+
    "\1\160\1\161\1\162\1\163\1\164\1\27\1\165\1\166"+
    "\2\27\1\167\1\27\1\170\1\27\1\171\1\172\1\27"+
    "\1\173\1\174\1\175\1\27\1\176";

  private static int [] zzUnpackAction() {
    int [] result = new int[427];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\341\0\u0177\0\341"+
    "\0\341\0\341\0\u01c2\0\341\0\341\0\341\0\341\0\341"+
    "\0\341\0\341\0\u020d\0\u0258\0\341\0\341\0\341\0\341"+
    "\0\341\0\341\0\341\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf"+
    "\0\u041a\0\341\0\341\0\341\0\u0465\0\u04b0\0\u04fb\0\u0546"+
    "\0\u0591\0\u05dc\0\u0627\0\u0465\0\u0672\0\u06bd\0\u0708\0\u0753"+
    "\0\u079e\0\u07e9\0\u0834\0\u087f\0\u08ca\0\u0915\0\u0960\0\u09ab"+
    "\0\341\0\341\0\341\0\341\0\u09f6\0\u0a41\0\u0a8c\0\u0177"+
    "\0\341\0\u0ad7\0\u01c2\0\341\0\u0b22\0\u0b6d\0\u0bb8\0\u0c03"+
    "\0\u0c4e\0\u0c99\0\u02a3\0\u0ce4\0\u0d2f\0\u0d7a\0\u0dc5\0\u0e10"+
    "\0\u0e5b\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87\0\u0fd2\0\u101d\0\u1068"+
    "\0\u10b3\0\u10fe\0\u1149\0\u1194\0\u11df\0\u122a\0\u1275\0\u12c0"+
    "\0\u130b\0\u1356\0\u13a1\0\u13ec\0\u0465\0\u1437\0\u0465\0\u1482"+
    "\0\u14cd\0\u1518\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f\0\u16da"+
    "\0\u1725\0\u1770\0\u17bb\0\u1806\0\u1851\0\u189c\0\u18e7\0\u1932"+
    "\0\u197d\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f\0\u1b8a"+
    "\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97\0\u1de2"+
    "\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef\0\u203a"+
    "\0\u2085\0\u20d0\0\u211b\0\u2166\0\u21b1\0\u21fc\0\u2247\0\u2292"+
    "\0\u22dd\0\u2328\0\u2373\0\u23be\0\u2409\0\u2454\0\u249f\0\u24ea"+
    "\0\u2535\0\u2580\0\u25cb\0\u2616\0\u2661\0\u26ac\0\u26f7\0\u2742"+
    "\0\u278d\0\u27d8\0\u0465\0\u2823\0\u286e\0\u28b9\0\u2904\0\u294f"+
    "\0\u299a\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6\0\u2b11\0\u2b5c\0\u2ba7"+
    "\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e\0\u0465\0\u2d69\0\u2db4"+
    "\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u2f2b\0\u2f76\0\u0465\0\u2fc1"+
    "\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u3138\0\u3183\0\u31ce\0\u3219"+
    "\0\u3264\0\341\0\u32af\0\u32fa\0\u0465\0\u3345\0\u3390\0\u33db"+
    "\0\u3426\0\u3471\0\u34bc\0\u0465\0\u0465\0\u3507\0\u0465\0\u3552"+
    "\0\u0465\0\u359d\0\u35e8\0\u3633\0\u367e\0\u36c9\0\u3714\0\u0465"+
    "\0\u0465\0\u375f\0\u37aa\0\u0465\0\u37f5\0\u3840\0\u388b\0\u38d6"+
    "\0\u3921\0\u396c\0\u39b7\0\u3a02\0\u3a4d\0\u0465\0\u3a98\0\u0465"+
    "\0\u0465\0\u3ae3\0\u0465\0\u3b2e\0\u3b79\0\u3bc4\0\u3c0f\0\u3c5a"+
    "\0\u3ca5\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1\0\u3e1c\0\u3e67\0\u3eb2"+
    "\0\u3efd\0\u3f48\0\u0465\0\u3f93\0\u0465\0\u3fde\0\u4029\0\u4074"+
    "\0\u40bf\0\u410a\0\u4155\0\u41a0\0\u41eb\0\u4236\0\u0465\0\u0465"+
    "\0\u4281\0\u42cc\0\341\0\u4317\0\u1d4c\0\u3264\0\u4362\0\u43ad"+
    "\0\u0465\0\u43f8\0\u4443\0\u448e\0\u44d9\0\u4524\0\u0465\0\u0465"+
    "\0\u0465\0\u0465\0\u456f\0\u45ba\0\u4605\0\u4650\0\u469b\0\u0465"+
    "\0\u46e6\0\u4731\0\u477c\0\u0465\0\u47c7\0\u0465\0\u4812\0\u0465"+
    "\0\u0465\0\u0465\0\u485d\0\u48a8\0\u48f3\0\u0465\0\u493e\0\u4989"+
    "\0\u49d4\0\u4a1f\0\u4a6a\0\u0465\0\u4ab5\0\u4b00\0\u4b4b\0\u4b96"+
    "\0\u4be1\0\u4c2c\0\u4c77\0\u4cc2\0\u4d0d\0\u0465\0\u4d58\0\u4da3"+
    "\0\u4dee\0\u0465\0\u0465\0\u4e39\0\u4e84\0\u4ecf\0\u0465\0\u4f1a"+
    "\0\u0465\0\u0465\0\341\0\u4f65\0\u0465\0\u4fb0\0\u4ffb\0\u0465"+
    "\0\u5046\0\u5091\0\u50dc\0\u5127\0\u0465\0\u5172\0\u51bd\0\u0465"+
    "\0\u5208\0\u5253\0\u529e\0\u52e9\0\u5334\0\u537f\0\u53ca\0\u5415"+
    "\0\u0465\0\u5460\0\u0465\0\u0465\0\u0465\0\u54ab\0\u0465\0\u0465"+
    "\0\u0465\0\u0465\0\u0465\0\u0465\0\u0465\0\u0465\0\u0465\0\u54f6"+
    "\0\u5541\0\u0465\0\u558c\0\u0465\0\u0465\0\u55d7\0\u5622\0\u566d"+
    "\0\u0465\0\u56b8\0\u0465\0\u5703\0\u0465\0\u0465\0\u574e\0\u5799"+
    "\0\u57e4\0\u582f\0\u0465\0\u587a\0\u58c5\0\u0465\0\u0465\0\u0465"+
    "\0\u0465\0\u0465\0\u5910\0\u0465\0\u0465\0\u595b\0\u59a6\0\u0465"+
    "\0\u59f1\0\u0465\0\u5a3c\0\u0465\0\u0465\0\u5a87\0\u0465\0\u0465"+
    "\0\u0465\0\u5ad2\0\u0465";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[427];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\7\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\2\34\1\35\1\36\1\37\1\34\1\40\1\41"+
    "\1\42\1\4\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\2\54\1\55\2\54\1\56\1\54"+
    "\1\57\1\60\1\61\1\54\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\54\1\70\1\54\1\71\1\72\1\73"+
    "\1\74\40\0\10\75\4\0\33\75\36\0\1\76\54\0"+
    "\1\77\117\0\2\5\110\0\5\100\1\101\43\100\1\102"+
    "\41\100\11\103\1\104\37\103\1\105\41\103\14\0\1\106"+
    "\4\0\1\107\111\0\1\110\1\0\7\24\63\0\1\111"+
    "\10\0\1\112\7\0\7\113\7\0\10\114\4\0\1\34"+
    "\32\54\5\0\1\111\10\0\1\112\7\0\7\113\7\0"+
    "\2\114\1\115\5\114\4\0\1\34\32\54\5\0\1\111"+
    "\10\0\1\112\7\0\7\113\7\0\1\114\1\116\6\114"+
    "\4\0\1\34\32\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\113\7\0\10\114\4\0\1\34\1\117\31\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\113\7\0\10\114\4\0"+
    "\1\34\1\54\1\120\30\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\113\7\0\10\114\4\0\1\34\4\54\1\121"+
    "\25\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\33\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\2\54\1\122\20\54\1\123"+
    "\7\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\1\54\1\124\15\54\1\125\2\54\1\126"+
    "\10\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\1\54\1\127\6\54\1\130\3\54\1\131"+
    "\2\54\1\132\13\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\5\54\1\133\11\54\1\134"+
    "\13\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\14\54\1\135\1\54\1\136\3\54\1\137"+
    "\5\54\1\140\2\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\1\54\1\141\7\54\1\142"+
    "\2\54\1\143\2\54\1\144\13\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\6\54\1\145"+
    "\7\54\1\146\4\54\1\147\7\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\17\54\1\150"+
    "\13\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\1\54\1\151\3\54\1\152\17\54\1\153"+
    "\5\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\26\54\1\154\1\155\3\54\5\0\1\111"+
    "\10\0\1\112\7\0\7\54\7\0\10\54\4\0\22\54"+
    "\1\156\2\54\1\157\5\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\5\54\1\160\25\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\10\54\1\161\1\162\11\54\1\163\1\164\2\54"+
    "\1\165\3\54\5\0\1\111\10\0\1\112\7\0\7\54"+
    "\7\0\10\54\4\0\10\54\1\166\11\54\1\167\6\54"+
    "\1\170\1\54\5\0\1\111\10\0\1\112\7\0\7\54"+
    "\7\0\10\54\4\0\3\54\1\171\5\54\1\172\2\54"+
    "\1\173\1\54\1\174\4\54\1\175\7\54\5\0\1\111"+
    "\10\0\1\112\7\0\7\54\7\0\10\54\4\0\1\54"+
    "\1\176\7\54\1\177\5\54\1\200\13\54\5\0\1\111"+
    "\10\0\1\112\7\0\7\54\7\0\10\54\4\0\5\54"+
    "\1\201\2\54\1\202\22\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\11\54\1\203\21\54"+
    "\26\0\7\75\7\0\10\75\4\0\33\75\5\0\1\76"+
    "\11\0\1\204\100\0\1\77\33\0\1\205\55\0\2\100"+
    "\2\0\107\100\2\103\2\0\107\103\14\206\1\207\76\206"+
    "\2\107\1\0\110\107\22\0\7\110\63\0\1\111\10\0"+
    "\1\112\100\0\13\112\1\210\77\112\1\0\1\111\10\0"+
    "\1\112\7\0\7\114\7\0\10\114\4\0\1\114\32\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\114\7\0\10\114"+
    "\4\0\1\114\16\54\1\211\13\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\114\7\0\10\114\4\0\1\114\24\54"+
    "\1\212\5\54\5\0\1\111\10\0\1\112\7\0\7\54"+
    "\7\0\10\54\4\0\23\54\1\213\7\54\5\0\1\111"+
    "\10\0\1\112\7\0\7\54\7\0\10\54\4\0\12\54"+
    "\1\214\20\54\5\0\1\111\10\0\1\112\7\0\7\54"+
    "\7\0\10\54\4\0\22\54\1\215\10\54\5\0\1\111"+
    "\10\0\1\112\7\0\7\54\7\0\10\54\4\0\23\54"+
    "\1\216\7\54\5\0\1\111\10\0\1\112\7\0\7\54"+
    "\7\0\10\54\4\0\23\54\1\217\5\54\1\220\1\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\23\54\1\221\7\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\17\54\1\222\13\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\5\54\1\223\25\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\23\54\1\224\1\225"+
    "\6\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\1\54\1\226\31\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\1\54\1\227"+
    "\31\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\16\54\1\230\14\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\6\54\1\231"+
    "\5\54\1\232\16\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\25\54\1\233\5\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\11\54\1\234\11\54\1\235\7\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\4\54\1\236"+
    "\16\54\1\237\1\54\1\240\5\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\22\54\1\241"+
    "\10\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\24\54\1\242\6\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\14\54\1\243"+
    "\16\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\16\54\1\244\14\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\17\54\1\245"+
    "\13\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\22\54\1\246\10\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\24\54\1\247"+
    "\6\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\3\54\1\250\12\54\1\251\14\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\15\54\1\252\15\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\27\54\1\253\3\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\14\54\1\254\16\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\5\54\1\255\25\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\16\54\1\256\14\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\11\54\1\257\5\54\1\260"+
    "\13\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\2\54\1\261\30\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\21\54\1\262"+
    "\2\54\1\263\6\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\17\54\1\264\13\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\7\54\1\265\22\54\1\266\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\11\54\1\267\21\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\1\54\1\270\20\54\1\271\10\54\5\0\1\111"+
    "\10\0\1\112\7\0\7\54\7\0\10\54\4\0\11\54"+
    "\1\272\21\54\5\0\1\111\10\0\1\112\7\0\7\54"+
    "\7\0\10\54\4\0\11\54\1\273\10\54\1\274\10\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\25\54\1\275\3\54\1\276\1\54\5\0\1\111"+
    "\10\0\1\112\7\0\7\54\7\0\10\54\4\0\20\54"+
    "\1\277\12\54\5\0\1\111\10\0\1\112\7\0\7\54"+
    "\7\0\10\54\4\0\10\54\1\300\22\54\5\0\1\111"+
    "\10\0\1\112\7\0\7\54\7\0\10\54\4\0\16\54"+
    "\1\301\14\54\5\0\1\111\10\0\1\112\7\0\7\54"+
    "\7\0\10\54\4\0\17\54\1\302\13\54\5\0\1\111"+
    "\10\0\1\112\7\0\7\54\7\0\10\54\4\0\11\54"+
    "\1\303\5\54\1\304\13\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\10\54\1\305\1\306"+
    "\21\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\22\54\1\307\10\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\22\54\1\310"+
    "\10\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\11\54\1\311\21\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\1\54\1\312"+
    "\31\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\11\54\1\313\21\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\5\54\1\314"+
    "\25\54\4\0\12\204\1\315\1\0\77\204\34\0\1\76"+
    "\56\0\14\206\1\316\76\206\14\317\1\320\4\317\1\321"+
    "\71\317\1\0\1\210\30\0\1\322\1\0\1\323\57\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\4\54\1\324\26\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\23\54\1\325\7\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\10\54\1\326\22\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\5\54\1\327\25\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\23\54\1\330\7\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\24\54\1\331\6\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\5\54\1\332\25\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\16\54\1\333\14\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\5\54\1\334\25\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\14\54\1\335\16\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\1\54\1\336\31\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\5\54\1\337\25\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\3\54\1\340\27\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\22\54\1\341\10\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\23\54\1\342\7\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\23\54\1\343\1\344\6\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\1\54\1\345\31\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\5\54\1\346\25\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\2\54\1\347\30\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\6\54\1\350\24\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\5\54\1\351\25\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\11\54\1\352\21\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\25\54\1\353\5\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\15\54\1\354\15\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\17\54\1\355\13\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\5\54\1\356\25\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\23\54\1\357\7\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\1\54\1\360\31\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\1\54\1\361\31\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\5\54\1\362\25\54"+
    "\5\0\1\111\10\0\1\112\7\0\1\54\1\363\1\54"+
    "\1\364\1\54\1\365\1\366\7\0\10\54\4\0\5\54"+
    "\1\367\25\54\5\0\1\111\10\0\1\112\7\0\7\54"+
    "\7\0\10\54\4\0\13\54\1\370\17\54\5\0\1\111"+
    "\10\0\1\112\7\0\7\54\7\0\10\54\4\0\7\54"+
    "\1\371\23\54\5\0\1\111\10\0\1\112\7\0\7\54"+
    "\7\0\10\54\4\0\5\54\1\372\25\54\5\0\1\111"+
    "\10\0\1\112\7\0\7\54\7\0\10\54\4\0\14\54"+
    "\1\373\16\54\5\0\1\111\10\0\1\112\7\0\7\54"+
    "\7\0\10\54\4\0\22\54\1\374\10\54\5\0\1\111"+
    "\10\0\1\112\7\0\7\54\7\0\10\54\4\0\5\54"+
    "\1\375\25\54\5\0\1\111\10\0\1\112\7\0\7\54"+
    "\7\0\10\54\4\0\26\54\1\376\4\54\5\0\1\111"+
    "\10\0\1\112\7\0\7\54\7\0\10\54\4\0\24\54"+
    "\1\377\6\54\5\0\1\111\10\0\1\112\7\0\7\54"+
    "\7\0\10\54\4\0\14\54\1\u0100\16\54\5\0\1\111"+
    "\10\0\1\112\7\0\7\54\7\0\10\54\4\0\25\54"+
    "\1\u0101\5\54\5\0\1\111\10\0\1\112\7\0\7\54"+
    "\7\0\10\54\4\0\25\54\1\u0102\5\54\5\0\1\111"+
    "\10\0\1\112\7\0\7\54\7\0\10\54\4\0\22\54"+
    "\1\u0103\10\54\5\0\1\111\10\0\1\112\7\0\7\54"+
    "\7\0\10\54\4\0\16\54\1\u0104\14\54\5\0\1\111"+
    "\10\0\1\112\7\0\7\54\7\0\10\54\4\0\5\54"+
    "\1\u0105\25\54\5\0\1\111\10\0\1\112\7\0\7\54"+
    "\7\0\10\54\4\0\32\54\1\u0106\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\24\54\1\u0107"+
    "\6\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\11\54\1\u0108\13\54\1\u0109\5\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\24\54\1\u010a\6\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\23\54\1\u010b\7\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\17\54\1\u010c\13\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\5\54\1\u010d\25\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\5\54\1\u010e\25\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\1\54\1\u010f\31\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\24\54\1\u0110\6\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\16\54\1\u0111\14\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\3\54\1\u0112\27\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\27\54\1\u0113\3\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\17\54\1\u0114\13\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\16\54\1\u0115\14\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\24\54\1\u0116\6\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\4\54\1\u0117\26\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\13\54\1\u0118\17\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\14\54\1\u0119\16\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\14\54\1\u011a\16\54\4\0\1\204\1\315\10\204\1\315"+
    "\1\0\77\204\21\206\1\u011b\71\206\14\317\1\u011c\112\317"+
    "\1\u011c\4\317\1\u011d\71\317\14\u011e\1\u011f\76\u011e\35\0"+
    "\1\u0120\56\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\5\54\1\u0121\25\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\5\54\1\u0122\2\54\4\0"+
    "\33\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\3\54\1\u0123\27\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\11\54\1\u0124"+
    "\21\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\22\54\1\u0125\10\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\22\54\1\u0126"+
    "\10\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\3\54\1\u0127\27\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\13\54\1\u0128"+
    "\17\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\10\54\1\u0129\22\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\23\54\1\u012a"+
    "\7\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\24\54\1\u012b\6\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\11\54\1\u012c"+
    "\21\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\25\54\1\u012d\5\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\7\54\1\u012e"+
    "\23\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\14\54\1\u012f\16\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\6\54\1\u0130"+
    "\24\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\22\54\1\u0131\10\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\22\54\1\u0132"+
    "\10\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\22\54\1\u0133\10\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\5\54\1\u0134"+
    "\25\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\14\54\1\u0135\16\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\24\54\1\u0136"+
    "\6\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\1\54\1\u0137\31\54\5\0\1\111\10\0"+
    "\1\112\7\0\5\54\1\u0138\1\54\7\0\10\54\4\0"+
    "\33\54\5\0\1\111\10\0\1\112\7\0\2\54\1\u0139"+
    "\4\54\7\0\10\54\4\0\33\54\5\0\1\111\10\0"+
    "\1\112\7\0\4\54\1\u013a\2\54\7\0\10\54\4\0"+
    "\33\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\22\54\1\u013b\10\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\23\54\1\u013c"+
    "\7\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\22\54\1\u013d\10\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\4\54\1\u013e"+
    "\26\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\1\54\1\u013f\31\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\5\54\1\u0140"+
    "\25\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\11\54\1\u0141\21\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\11\54\1\u0142"+
    "\21\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\22\54\1\u0143\10\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\24\54\1\u0144"+
    "\6\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\1\54\1\u0145\31\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\1\u0146\32\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\5\54\1\u0147\25\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\11\54\1\u0148\21\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\16\54\1\u0149\14\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\3\54\1\u014a\27\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\3\54\1\u014b\27\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\27\54\1\u014c\3\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\17\54\1\u014d\13\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\22\54\1\u014e\10\54"+
    "\5\0\1\111\10\0\1\112\7\0\1\54\1\u014f\1\54"+
    "\1\u0150\1\54\1\u0151\1\u0152\7\0\10\54\4\0\33\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\7\54\1\u0153\23\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\10\54\1\u0154\22\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\16\54\1\u0155\14\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\22\54\1\u0156\10\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\7\54\1\u0157\23\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\25\54\1\u0158\5\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\5\54\1\u0159\25\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\4\54\1\u015a\26\54"+
    "\4\0\14\317\1\320\4\317\1\u015b\71\317\14\u011e\1\u011f"+
    "\4\u011e\1\u015b\71\u011e\1\0\1\u0120\105\0\1\322\4\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\1\54\1\u015c\31\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\24\54\1\u015d\6\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\17\54\1\u015e\13\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\1\54\1\u015f\31\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\24\54\1\u0160\6\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\22\54\1\u0161\10\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\16\54\1\u0162\14\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\14\54\1\u0163\16\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\1\54\1\u0164\31\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\5\54\1\u0165\25\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\5\54\1\u0166\25\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\4\54\1\u0167\26\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\16\54\1\u0168\14\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\14\54\1\u0169\16\54\5\0"+
    "\1\111\10\0\1\112\7\0\7\54\7\0\10\54\4\0"+
    "\3\54\1\u016a\27\54\5\0\1\111\10\0\1\112\7\0"+
    "\7\54\7\0\10\54\4\0\6\54\1\u016b\7\54\1\u016c"+
    "\14\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\20\54\1\u016d\12\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\11\54\1\u016e"+
    "\21\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\24\54\1\u016f\6\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\3\54\1\u0170"+
    "\27\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\3\54\1\u0171\27\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\22\54\1\u0172"+
    "\10\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\16\54\1\u0173\14\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\14\54\1\u0174"+
    "\16\54\5\0\1\111\10\0\1\112\7\0\7\54\7\0"+
    "\10\54\4\0\24\54\1\u0175\6\54\5\0\1\111\10\0"+
    "\1\112\7\0\7\54\7\0\10\54\4\0\1\u0176\32\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\3\54\1\u0177\27\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\7\54\1\u0178\23\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\24\54\1\u0179\6\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\10\54\1\u017a\22\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\23\54\1\u017b\7\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\6\54\1\u017c\24\54"+
    "\5\0\1\111\10\0\1\112\7\0\5\54\1\u017d\1\54"+
    "\7\0\10\54\4\0\33\54\5\0\1\111\10\0\1\112"+
    "\7\0\2\54\1\u017e\4\54\7\0\10\54\4\0\33\54"+
    "\5\0\1\111\10\0\1\112\7\0\4\54\1\u017f\2\54"+
    "\7\0\10\54\4\0\33\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\1\54\1\u0180\31\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\5\54\1\u0181\25\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\24\54\1\u0182\6\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\1\54\1\u0183\31\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\20\54\1\u0184\12\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\16\54\1\u0185\14\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\3\54\1\u0186\27\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\25\54\1\u0187\5\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\25\54\1\u0188\5\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\24\54\1\u0189\6\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\24\54\1\u018a\6\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\23\54\1\u018b\7\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\17\54\1\u018c\13\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\31\54\1\u018d\1\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\10\54\1\u018e\22\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\1\54\1\u018f\31\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\1\54\1\u0190\31\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\1\54\1\u0191\31\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\4\54\1\u0192\26\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\5\54\1\u0193\25\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\24\54\1\u0194\6\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\5\54\1\u0195\25\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\24\54\1\u0196\6\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\22\54\1\u0197\10\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\4\54\1\u0198\26\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\14\54\1\u0199\16\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\24\54\1\u019a\6\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\3\54\1\u019b\27\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\5\54\1\u019c\25\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\5\54\1\u019d\25\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\15\54\1\u019e\15\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\3\54\1\u019f\27\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\14\54\1\u01a0\16\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\3\54\1\u01a1\27\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\5\54\1\u01a2\25\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\5\54\1\u01a3\25\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\23\54\1\u01a4\7\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\24\54\1\u01a5\6\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\1\54\1\u01a6\31\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\5\54\1\u01a7\25\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\5\54\1\u01a8\25\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\4\54\1\u01a9\26\54\5\0\1\111\10\0\1\112"+
    "\7\0\7\54\7\0\10\54\4\0\11\54\1\u01aa\21\54"+
    "\5\0\1\111\10\0\1\112\7\0\7\54\7\0\10\54"+
    "\4\0\16\54\1\u01ab\14\54\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[23325];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\3\11\1\1\7\11"+
    "\2\1\7\11\6\1\3\11\24\1\4\11\1\1\3\0"+
    "\1\11\2\0\1\11\2\0\2\1\2\0\71\1\5\0"+
    "\105\1\3\0\1\1\1\11\1\0\107\1\1\11\1\0"+
    "\1\1\3\0\72\1\1\11\120\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[427];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private BitSet zzFin = null;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ValaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 127: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 128: break;
          case 3:
            { return ValaTypes.EXCLAMATION;
            }
          // fall through
          case 129: break;
          case 4:
            { return ValaTypes.POUND;
            }
          // fall through
          case 130: break;
          case 5:
            { return ValaTypes.PERCENT;
            }
          // fall through
          case 131: break;
          case 6:
            { return ValaTypes.AND;
            }
          // fall through
          case 132: break;
          case 7:
            { return ValaTypes.LPAREN;
            }
          // fall through
          case 133: break;
          case 8:
            { return ValaTypes.RPAREN;
            }
          // fall through
          case 134: break;
          case 9:
            { return ValaTypes.STAR;
            }
          // fall through
          case 135: break;
          case 10:
            { return ValaTypes.PLUS;
            }
          // fall through
          case 136: break;
          case 11:
            { return ValaTypes.COMMA;
            }
          // fall through
          case 137: break;
          case 12:
            { return ValaTypes.MINUS;
            }
          // fall through
          case 138: break;
          case 13:
            { return ValaTypes.DOT;
            }
          // fall through
          case 139: break;
          case 14:
            { return ValaTypes.FORWARD_SLASH;
            }
          // fall through
          case 140: break;
          case 15:
            { return ValaTypes.NUMBER;
            }
          // fall through
          case 141: break;
          case 16:
            { return ValaTypes.COLON;
            }
          // fall through
          case 142: break;
          case 17:
            { return ValaTypes.SEMICOLON;
            }
          // fall through
          case 143: break;
          case 18:
            { return ValaTypes.LESS_THAN;
            }
          // fall through
          case 144: break;
          case 19:
            { return ValaTypes.EQUALS;
            }
          // fall through
          case 145: break;
          case 20:
            { return ValaTypes.GREATER_THAN;
            }
          // fall through
          case 146: break;
          case 21:
            { return ValaTypes.QUESTION_MARK;
            }
          // fall through
          case 147: break;
          case 22:
            { return ValaTypes.AT;
            }
          // fall through
          case 148: break;
          case 23:
            { return ValaTypes.IDENTIFIER;
            }
          // fall through
          case 149: break;
          case 24:
            { return ValaTypes.LBRACKET;
            }
          // fall through
          case 150: break;
          case 25:
            { return ValaTypes.RBRACKET;
            }
          // fall through
          case 151: break;
          case 26:
            { return ValaTypes.CARET;
            }
          // fall through
          case 152: break;
          case 27:
            { return ValaTypes.UNDERSCORE;
            }
          // fall through
          case 153: break;
          case 28:
            { return ValaTypes.LBRACE;
            }
          // fall through
          case 154: break;
          case 29:
            { return ValaTypes.PIPE;
            }
          // fall through
          case 155: break;
          case 30:
            { return ValaTypes.RBRACE;
            }
          // fall through
          case 156: break;
          case 31:
            { return ValaTypes.TILDE;
            }
          // fall through
          case 157: break;
          case 32:
            { return ValaTypes.STRING_LITERAL;
            }
          // fall through
          case 158: break;
          case 33:
            { return ValaTypes.CHAR_LITERAL;
            }
          // fall through
          case 159: break;
          case 34:
            { return ValaTypes.COMMENT;
            }
          // fall through
          case 160: break;
          case 35:
            { return ValaTypes.CONSTANT;
            }
          // fall through
          case 161: break;
          case 36:
            { return ValaTypes.AS;
            }
          // fall through
          case 162: break;
          case 37:
            { return ValaTypes.DO;
            }
          // fall through
          case 163: break;
          case 38:
            { return ValaTypes.IF;
            }
          // fall through
          case 164: break;
          case 39:
            { return ValaTypes.IN;
            }
          // fall through
          case 165: break;
          case 40:
            { return ValaTypes.IS;
            }
          // fall through
          case 166: break;
          case 41:
            { return ValaTypes.FOR;
            }
          // fall through
          case 167: break;
          case 42:
            { return ValaTypes.INT;
            }
          // fall through
          case 168: break;
          case 43:
            { return ValaTypes.NEW;
            }
          // fall through
          case 169: break;
          case 44:
            { return ValaTypes.TRY;
            }
          // fall through
          case 170: break;
          case 45:
            { return ValaTypes.VAR;
            }
          // fall through
          case 171: break;
          case 46:
            { return ValaTypes.BLOCK_COMMENT;
            }
          // fall through
          case 172: break;
          case 47:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 1;
              int zzFPos = zzStartRead;
              if (zzFin == null || zzFin.size() <= zzBufferL.length()) {
                zzFin = new BitSet(zzBufferL.length()+1);
              }
              BitSet zzFinL = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL.set(zzFPos, ((zzAttrL[zzFState] & 1) == 1));
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL.set(zzFPos++, ((zzAttrL[zzFState] & 1) == 1));
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL.clear(zzFPos++);
              }

              zzFState = 2;
              zzFPos = zzMarkedPos;
              while (!zzFinL.get(zzFPos) || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { String text = yytext().toString();

              if(!ValaTokenSets.KEYWORDS_STRINGS.contains(text)) {
                  return ValaTypes.METHOD_CALL;
              }
            }
          // fall through
          case 173: break;
          case 48:
            { return ValaTypes.DBUS;
            }
          // fall through
          case 174: break;
          case 49:
            { return ValaTypes.BASE;
            }
          // fall through
          case 175: break;
          case 50:
            { return ValaTypes.BOOL;
            }
          // fall through
          case 176: break;
          case 51:
            { return ValaTypes.CASE;
            }
          // fall through
          case 177: break;
          case 52:
            { return ValaTypes.CHAR;
            }
          // fall through
          case 178: break;
          case 53:
            { return ValaTypes.ELIF;
            }
          // fall through
          case 179: break;
          case 54:
            { return ValaTypes.ELSE;
            }
          // fall through
          case 180: break;
          case 55:
            { return ValaTypes.ENUM;
            }
          // fall through
          case 181: break;
          case 56:
            { return ValaTypes.INT8;
            }
          // fall through
          case 182: break;
          case 57:
            { return ValaTypes.LOCK;
            }
          // fall through
          case 183: break;
          case 58:
            { return ValaTypes.LONG;
            }
          // fall through
          case 184: break;
          case 59:
            { return ValaTypes.NULL;
            }
          // fall through
          case 185: break;
          case 60:
            { return ValaTypes.THIS;
            }
          // fall through
          case 186: break;
          case 61:
            { return ValaTypes.TRUE;
            }
          // fall through
          case 187: break;
          case 62:
            { return ValaTypes.UINT;
            }
          // fall through
          case 188: break;
          case 63:
            { return ValaTypes.VOID;
            }
          // fall through
          case 189: break;
          case 64:
            { return ValaTypes.WEAK;
            }
          // fall through
          case 190: break;
          case 65:
            { return ValaTypes.DOC_COMMENT;
            }
          // fall through
          case 191: break;
          case 66:
            { return ValaTypes.CCODE;
            }
          // fall through
          case 192: break;
          case 67:
            { return ValaTypes.ASYNC;
            }
          // fall through
          case 193: break;
          case 68:
            { return ValaTypes.BREAK;
            }
          // fall through
          case 194: break;
          case 69:
            { return ValaTypes.CATCH;
            }
          // fall through
          case 195: break;
          case 70:
            { return ValaTypes.CLASS;
            }
          // fall through
          case 196: break;
          case 71:
            { return ValaTypes.CONST;
            }
          // fall through
          case 197: break;
          case 72:
            { return ValaTypes.ENDIF;
            }
          // fall through
          case 198: break;
          case 73:
            { return ValaTypes.FALSE;
            }
          // fall through
          case 199: break;
          case 74:
            { return ValaTypes.FLOAT;
            }
          // fall through
          case 200: break;
          case 75:
            { return ValaTypes.INT16;
            }
          // fall through
          case 201: break;
          case 76:
            { return ValaTypes.INT32;
            }
          // fall through
          case 202: break;
          case 77:
            { return ValaTypes.INT64;
            }
          // fall through
          case 203: break;
          case 78:
            { return ValaTypes.OWNED;
            }
          // fall through
          case 204: break;
          case 79:
            { return ValaTypes.SHORT;
            }
          // fall through
          case 205: break;
          case 80:
            { return ValaTypes.THROW;
            }
          // fall through
          case 206: break;
          case 81:
            { return ValaTypes.UCHAR;
            }
          // fall through
          case 207: break;
          case 82:
            { return ValaTypes.UINT8;
            }
          // fall through
          case 208: break;
          case 83:
            { return ValaTypes.ULONG;
            }
          // fall through
          case 209: break;
          case 84:
            { return ValaTypes.USING;
            }
          // fall through
          case 210: break;
          case 85:
            { return ValaTypes.WHILE;
            }
          // fall through
          case 211: break;
          case 86:
            { return ValaTypes.YIELD;
            }
          // fall through
          case 212: break;
          case 87:
            { return ValaTypes.OBJECT;
            }
          // fall through
          case 213: break;
          case 88:
            { return ValaTypes.ASSERT;
            }
          // fall through
          case 214: break;
          case 89:
            { return ValaTypes.DOUBLE;
            }
          // fall through
          case 215: break;
          case 90:
            { return ValaTypes.EXTERN;
            }
          // fall through
          case 216: break;
          case 91:
            { return ValaTypes.PUBLIC;
            }
          // fall through
          case 217: break;
          case 92:
            { return ValaTypes.RETURN;
            }
          // fall through
          case 218: break;
          case 93:
            { return ValaTypes.SIGNAL;
            }
          // fall through
          case 219: break;
          case 94:
            { return ValaTypes.SIZE_T;
            }
          // fall through
          case 220: break;
          case 95:
            { return ValaTypes.STATIC;
            }
          // fall through
          case 221: break;
          case 96:
            { return ValaTypes.STRING;
            }
          // fall through
          case 222: break;
          case 97:
            { return ValaTypes.STRUCT;
            }
          // fall through
          case 223: break;
          case 98:
            { return ValaTypes.SWITCH;
            }
          // fall through
          case 224: break;
          case 99:
            { return ValaTypes.THROWS;
            }
          // fall through
          case 225: break;
          case 100:
            { return ValaTypes.TYPEOF;
            }
          // fall through
          case 226: break;
          case 101:
            { return ValaTypes.UINT16;
            }
          // fall through
          case 227: break;
          case 102:
            { return ValaTypes.UINT32;
            }
          // fall through
          case 228: break;
          case 103:
            { return ValaTypes.UINT64;
            }
          // fall through
          case 229: break;
          case 104:
            { return ValaTypes.USHORT;
            }
          // fall through
          case 230: break;
          case 105:
            { return ValaTypes.HASHMAP;
            }
          // fall through
          case 231: break;
          case 106:
            { return ValaTypes.VERSION;
            }
          // fall through
          case 232: break;
          case 107:
            { return ValaTypes.DEFAULT;
            }
          // fall through
          case 233: break;
          case 108:
            { return ValaTypes.ENSURES;
            }
          // fall through
          case 234: break;
          case 109:
            { return ValaTypes.FINALLY;
            }
          // fall through
          case 235: break;
          case 110:
            { return ValaTypes.FOREACH;
            }
          // fall through
          case 236: break;
          case 111:
            { return ValaTypes.PRIVATE;
            }
          // fall through
          case 237: break;
          case 112:
            { return ValaTypes.SSIZE_T;
            }
          // fall through
          case 238: break;
          case 113:
            { return ValaTypes.UNICHAR;
            }
          // fall through
          case 239: break;
          case 114:
            { return ValaTypes.UNOWNED;
            }
          // fall through
          case 240: break;
          case 115:
            { return ValaTypes.VIRTUAL;
            }
          // fall through
          case 241: break;
          case 116:
            { return ValaTypes.ABSTRACT;
            }
          // fall through
          case 242: break;
          case 117:
            { return ValaTypes.CONTINUE;
            }
          // fall through
          case 243: break;
          case 118:
            { return ValaTypes.DELEGATE;
            }
          // fall through
          case 244: break;
          case 119:
            { return ValaTypes.INTERNAL;
            }
          // fall through
          case 245: break;
          case 120:
            { return ValaTypes.OVERRIDE;
            }
          // fall through
          case 246: break;
          case 121:
            { return ValaTypes.REQUIRES;
            }
          // fall through
          case 247: break;
          case 122:
            { return ValaTypes.CONSTRUCT;
            }
          // fall through
          case 248: break;
          case 123:
            { return ValaTypes.INTERFACE;
            }
          // fall through
          case 249: break;
          case 124:
            { return ValaTypes.NAMESPACE;
            }
          // fall through
          case 250: break;
          case 125:
            { return ValaTypes.PROTECTED;
            }
          // fall through
          case 251: break;
          case 126:
            { return ValaTypes.ERRORDOMAIN;
            }
          // fall through
          case 252: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
