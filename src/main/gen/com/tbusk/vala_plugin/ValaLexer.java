// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Vala.flex

package com.tbusk.vala_plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tbusk.vala_plugin.psi.ValaTypes;
import com.intellij.psi.TokenType;
import com.tbusk.vala_plugin.ValaTokenSets;
import com.tbusk.vala_plugin.psi.ValaTokenType;

/**
 * Lexer generator used is JFlex.
 * Documentation can be found at: https://jflex.de/manual.html
 */

public class ValaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\25\1\32\1\25\1\33\1\25"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\32\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\43"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\6\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\22\30\1\36\1\37\1\40\1\41\1\42\1\0\1\43"+
    "\3\0\1\44\1\45\1\0\1\46\1\0\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\3\0\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\12\30\1\63\10\30\1\64\1\65"+
    "\34\30\1\66\1\67\1\43\4\0\1\70\3\0\25\30"+
    "\1\71\1\72\3\30\1\73\1\30\1\74\5\30\1\75"+
    "\14\30\1\76\7\30\1\77\5\30\3\0\2\100\3\0"+
    "\1\101\3\0\1\102\2\30\1\103\1\104\1\30\1\105"+
    "\1\30\1\106\6\30\1\107\1\30\1\110\11\30\1\111"+
    "\1\30\1\112\1\113\1\30\1\114\17\30\1\115\1\30"+
    "\1\116\1\30\1\117\6\30\1\120\1\121\2\30\2\0"+
    "\1\101\1\0\1\102\1\0\1\122\2\0\1\30\1\123"+
    "\1\124\1\125\1\126\1\127\7\30\1\130\1\30\1\131"+
    "\1\30\1\132\1\133\1\134\3\30\1\135\5\30\1\136"+
    "\7\30\1\137\1\140\3\30\1\141\1\142\3\30\1\143"+
    "\1\30\1\144\1\145\1\146\2\0\1\122\5\30\1\147"+
    "\2\30\1\150\10\30\1\151\1\30\1\152\1\153\1\154"+
    "\1\30\1\155\1\156\1\157\1\160\1\161\1\162\1\163"+
    "\1\164\2\30\1\165\1\30\2\0\3\30\1\166\1\30"+
    "\1\167\1\30\1\170\1\171\4\30\1\172\2\30\1\173"+
    "\1\174\1\175\1\176\2\0\1\177\1\30\1\200\1\201"+
    "\2\30\1\202\1\30\1\203\1\30\1\204\1\0\1\205"+
    "\1\30\1\206\1\207\1\210\1\30\1\211";

  private static int [] zzUnpackAction() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\107\0\u01aa"+
    "\0\u01f1\0\u0238\0\107\0\107\0\u027f\0\u02c6\0\107\0\u030d"+
    "\0\u0354\0\u039b\0\u03e2\0\107\0\107\0\u0429\0\u0470\0\u04b7"+
    "\0\107\0\u04fe\0\u0545\0\107\0\107\0\107\0\107\0\107"+
    "\0\u058c\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d"+
    "\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5"+
    "\0\u09fc\0\u0a43\0\107\0\u0a8a\0\107\0\107\0\107\0\u0ad1"+
    "\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed\0\107\0\107\0\u0238\0\107"+
    "\0\u0c34\0\107\0\107\0\107\0\107\0\107\0\107\0\u0c7b"+
    "\0\u0cc2\0\u0d09\0\u0d50\0\107\0\u0d97\0\107\0\107\0\107"+
    "\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf"+
    "\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207"+
    "\0\u124e\0\u1295\0\u12dc\0\u0545\0\u1323\0\u136a\0\u13b1\0\u13f8"+
    "\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630"+
    "\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868"+
    "\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0"+
    "\0\u1ae7\0\107\0\107\0\107\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03"+
    "\0\107\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4"+
    "\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c"+
    "\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264"+
    "\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e\0\u0545\0\u2455"+
    "\0\u0545\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u0545\0\u25ff"+
    "\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837"+
    "\0\u287e\0\u28c5\0\u290c\0\u0545\0\u2953\0\u299a\0\u29e1\0\u2a28"+
    "\0\u2a6f\0\u2ab6\0\u2afd\0\u0545\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19"+
    "\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\107\0\u2d7c\0\u2dc3\0\u2e0a"+
    "\0\u2e51\0\u0cc2\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb"+
    "\0\u0545\0\u0545\0\u3042\0\u0545\0\u3089\0\u0545\0\u30d0\0\u3117"+
    "\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u0545\0\u327a\0\u0545\0\u32c1"+
    "\0\u3308\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9"+
    "\0\u0545\0\u3540\0\u0545\0\u0545\0\u3587\0\u0545\0\u35ce\0\u3615"+
    "\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u3806\0\u384d"+
    "\0\u3894\0\u38db\0\u3922\0\u3969\0\u39b0\0\u0545\0\u39f7\0\u0545"+
    "\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f"+
    "\0\u0545\0\u0545\0\u3c76\0\u3cbd\0\u3d04\0\u3d4b\0\107\0\u3d92"+
    "\0\107\0\u3dd9\0\u1c91\0\u2f6d\0\u3e20\0\u3e67\0\u0545\0\u0545"+
    "\0\u0545\0\u0545\0\u3eae\0\u3ef5\0\u3f3c\0\u3f83\0\u3fca\0\u4011"+
    "\0\u4058\0\u409f\0\u0545\0\u40e6\0\u0545\0\u412d\0\u0545\0\u0545"+
    "\0\u0545\0\u4174\0\u41bb\0\u4202\0\u0545\0\u4249\0\u4290\0\u42d7"+
    "\0\u431e\0\u4365\0\u0545\0\u43ac\0\u43f3\0\u443a\0\u4481\0\u44c8"+
    "\0\u450f\0\u4556\0\u459d\0\u0545\0\u45e4\0\u462b\0\u4672\0\u0545"+
    "\0\u0545\0\u46b9\0\u4700\0\u4747\0\u0545\0\u478e\0\u0545\0\u0545"+
    "\0\107\0\u47d5\0\u481c\0\107\0\u4863\0\u48aa\0\u48f1\0\u4938"+
    "\0\u497f\0\u0545\0\u49c6\0\u4a0d\0\u0545\0\u4a54\0\u4a9b\0\u4ae2"+
    "\0\u4b29\0\u4b70\0\u4bb7\0\u4bfe\0\u4c45\0\u0545\0\u4c8c\0\u0545"+
    "\0\u0545\0\u0545\0\u4cd3\0\u0545\0\u0545\0\u0545\0\u0545\0\u0545"+
    "\0\u0545\0\u0545\0\u0545\0\u4d1a\0\u4d61\0\u0545\0\u4da8\0\u4def"+
    "\0\u4e36\0\u4e7d\0\u4ec4\0\u4f0b\0\u0545\0\u4f52\0\u0545\0\u4f99"+
    "\0\u0545\0\u0545\0\u4fe0\0\u5027\0\u506e\0\u50b5\0\u0545\0\u50fc"+
    "\0\u5143\0\u0545\0\u0545\0\u0545\0\u0545\0\u518a\0\u51d1\0\u0545"+
    "\0\u5218\0\u0545\0\u0545\0\u525f\0\u52a6\0\u0545\0\u52ed\0\u0545"+
    "\0\u5334\0\u0545\0\u537b\0\u0545\0\u53c2\0\u0545\0\u0545\0\u0545"+
    "\0\u5409\0\u0545";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\7\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\33\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\2\33\1\47\1\33\1\50\1\33\1\51\1\52\1\53"+
    "\1\33\1\54\1\55\1\56\1\57\1\60\1\61\1\33"+
    "\1\62\1\33\1\63\1\64\1\65\1\66\110\0\2\3"+
    "\1\0\2\3\140\0\1\67\47\0\7\70\1\71\35\70"+
    "\1\72\41\70\56\0\1\73\3\0\1\74\63\0\1\75"+
    "\62\0\1\76\73\0\14\77\1\100\30\77\1\101\41\77"+
    "\37\0\1\102\67\0\1\103\16\0\1\104\71\0\1\105"+
    "\2\0\7\23\3\0\1\106\1\107\71\0\1\110\74\0"+
    "\1\111\3\0\2\111\1\112\1\111\2\0\1\111\1\113"+
    "\12\0\1\114\1\0\1\111\2\0\5\111\33\0\1\111"+
    "\25\0\1\115\1\0\7\23\112\0\1\116\106\0\1\117"+
    "\106\0\1\120\56\0\1\70\110\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\31\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\1\33"+
    "\1\121\17\33\1\122\7\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\1\123\14\33\1\124"+
    "\2\33\1\125\10\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\1\126\6\33\1\127\2\33"+
    "\1\130\2\33\1\131\13\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\4\33\1\132\10\33"+
    "\1\133\13\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\12\33\1\134\1\33\1\135\3\33"+
    "\1\136\5\33\1\137\2\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\1\140\7\33\1\141"+
    "\1\33\1\142\2\33\1\143\13\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\5\33\1\144"+
    "\6\33\1\145\14\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\15\33\1\146\13\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\1\147\3\33\1\150\16\33\1\151\5\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\23\33"+
    "\1\152\1\153\1\154\3\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\20\33\1\155\2\33"+
    "\1\156\5\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\4\33\1\157\24\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\7\33"+
    "\1\160\1\161\10\33\1\162\1\163\2\33\1\164\3\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\7\33\1\165\10\33\1\166\10\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\2\33"+
    "\1\167\5\33\1\170\1\33\1\171\1\33\1\172\4\33"+
    "\1\173\7\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\1\174\7\33\1\175\4\33\1\176"+
    "\13\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\4\33\1\177\2\33\1\200\21\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\10\33\1\201\20\33\43\0\1\202\44\0\1\203\2\0"+
    "\7\70\1\204\35\70\1\72\41\70\7\0\1\205\77\0"+
    "\2\70\3\0\102\70\64\0\1\206\1\0\1\207\77\0"+
    "\1\210\27\0\2\77\3\0\102\77\23\0\1\211\63\0"+
    "\2\111\3\0\17\111\1\212\62\111\17\213\1\214\67\213"+
    "\2\113\1\0\1\113\1\0\102\113\25\0\7\115\64\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\21\33\1\215\7\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\27\33\1\216\1\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\21\33\1\217\7\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\15\33\1\220\13\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\4\33\1\221\24\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\21\33\1\222\1\223\6\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\1\224\30\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\1\225\30\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\14\33"+
    "\1\226\14\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\5\33\1\227\4\33\1\230\16\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\23\33\1\231\5\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\21\33\1\232\7\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\21\33\1\233\1\33\1\234\5\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\20\33"+
    "\1\235\10\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\22\33\1\236\6\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\12\33"+
    "\1\237\16\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\14\33\1\240\14\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\15\33"+
    "\1\241\13\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\20\33\1\242\10\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\22\33"+
    "\1\243\6\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\2\33\1\244\11\33\1\245\14\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\13\33\1\246\15\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\25\33\1\247\3\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\12\33\1\250\16\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\22\33\1\251\6\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\4\33\1\252\24\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\14\33\1\253\14\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\10\33\1\254\4\33\1\255\13\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\1\33"+
    "\1\256\27\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\5\33\1\257\11\33\1\260\2\33"+
    "\1\261\6\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\15\33\1\262\13\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\6\33"+
    "\1\263\21\33\1\264\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\10\33\1\265\20\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\1\266\17\33\1\267\10\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\10\33\1\270\20\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\10\33\1\271\7\33\1\272\10\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\23\33"+
    "\1\273\3\33\1\274\1\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\7\33\1\275\21\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\14\33\1\276\14\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\15\33\1\277\13\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\10\33\1\300\4\33\1\301\13\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\7\33"+
    "\1\302\1\303\20\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\20\33\1\304\10\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\20\33\1\305\10\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\10\33\1\306\20\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\1\307\30\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\10\33\1\310\20\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\4\33"+
    "\1\311\24\33\4\0\7\205\1\312\77\205\62\0\1\74"+
    "\10\0\1\313\70\0\1\314\31\0\2\210\1\315\1\0"+
    "\1\316\102\210\2\111\1\317\2\0\1\320\15\111\1\321"+
    "\1\212\10\111\1\322\51\111\17\213\1\323\67\213\17\324"+
    "\1\325\4\324\1\326\62\324\11\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\22\33\1\327\6\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\14\33\1\330\14\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\4\33\1\331\24\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\12\33\1\332\16\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\1\333\30\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\4\33\1\334\24\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\2\33\1\335\26\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\20\33\1\336\10\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\21\33\1\337\7\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\21\33\1\340\1\341\6\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\1\342\30\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\4\33\1\343\24\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\1\33\1\344\27\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\4\33\1\345\24\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\23\33\1\346\5\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\13\33\1\347\15\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\15\33\1\350\13\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\4\33\1\351\24\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\21\33\1\352\7\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\1\353\30\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\1\354\30\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\4\33\1\355"+
    "\24\33\15\0\1\33\13\0\1\33\1\356\1\33\1\357"+
    "\1\33\1\360\1\361\7\0\1\33\4\0\1\33\1\0"+
    "\4\33\1\362\24\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\11\33\1\363\17\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\6\33\1\364\22\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\365\24\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\12\33\1\366\16\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\20\33\1\367\10\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\4\33\1\370\24\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\24\33\1\371\4\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\22\33\1\372\6\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\12\33\1\373\16\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\23\33\1\374\5\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\23\33\1\375\5\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\20\33\1\376\10\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\14\33\1\377\14\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\4\33\1\u0100\24\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\30\33\1\u0101\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\22\33"+
    "\1\u0102\6\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\10\33\1\u0103\12\33\1\u0104\5\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\22\33\1\u0105\6\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\21\33\1\u0106\7\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\15\33\1\u0107\13\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\4\33\1\u0108\24\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\1\u0109\30\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\22\33\1\u010a\6\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\14\33\1\u010b\14\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\2\33\1\u010c\26\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\25\33\1\u010d\3\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\15\33\1\u010e\13\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\14\33\1\u010f\14\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\22\33\1\u0110\6\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\3\33\1\u0111\25\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\11\33\1\u0112\17\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\12\33\1\u0113\16\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\12\33\1\u0114\16\33\4\0"+
    "\7\205\1\u0115\77\205\56\0\1\210\112\0\1\74\26\0"+
    "\1\315\111\0\1\317\15\0\1\u0116\11\0\1\u0117\51\0"+
    "\2\111\3\0\1\320\15\111\1\321\1\212\10\111\1\322"+
    "\53\111\3\0\17\111\1\212\40\111\1\u0118\21\111\24\213"+
    "\1\u0119\62\213\17\324\1\u011a\106\324\1\u011a\4\324\1\u011b"+
    "\62\324\17\u011c\1\u011d\67\u011c\11\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\20\33\1\u011e\10\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\2\33\1\u011f\26\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\11\33\1\u0120\17\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\7\33\1\u0121\21\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\21\33\1\u0122\7\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\22\33\1\u0123\6\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\10\33\1\u0124\20\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\23\33\1\u0125\5\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\6\33\1\u0126\22\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\12\33\1\u0127\16\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\20\33\1\u0128\10\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\20\33\1\u0129\10\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\20\33\1\u012a\10\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\4\33\1\u012b\24\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\12\33\1\u012c\16\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\22\33\1\u012d\6\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\1\u012e\30\33\15\0"+
    "\1\33\13\0\5\33\1\u012f\1\33\7\0\1\33\4\0"+
    "\1\33\1\0\31\33\15\0\1\33\13\0\2\33\1\u0130"+
    "\4\33\7\0\1\33\4\0\1\33\1\0\31\33\15\0"+
    "\1\33\13\0\4\33\1\u0131\2\33\7\0\1\33\4\0"+
    "\1\33\1\0\31\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\20\33\1\u0132\10\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\21\33\1\u0133\7\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\20\33\1\u0134\10\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\3\33\1\u0135\25\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\1\u0136\30\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\4\33"+
    "\1\u0137\24\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\10\33\1\u0138\20\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\10\33"+
    "\1\u0139\20\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\20\33\1\u013a\10\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\22\33"+
    "\1\u013b\6\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\1\u013c\30\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\u013d\1\0\31\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\4\33\1\u013e\24\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\10\33\1\u013f\20\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\14\33\1\u0140\14\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\2\33\1\u0141\26\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\2\33\1\u0142\26\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\25\33\1\u0143\3\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\20\33\1\u0144\10\33\15\0\1\33\13\0\1\33\1\u0145"+
    "\1\33\1\u0146\1\33\1\u0147\1\u0148\7\0\1\33\4\0"+
    "\1\33\1\0\31\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\6\33\1\u0149\22\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\7\33\1\u014a\21\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\14\33\1\u014b\14\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\20\33\1\u014c\10\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\6\33\1\u014d\22\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\23\33\1\u014e\5\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\u014f\24\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\3\33\1\u0150\25\33\4\0\7\205\1\u0151\77\205\65\0"+
    "\1\u0152\21\0\2\111\3\0\17\111\1\212\25\111\1\u0153"+
    "\34\111\17\324\1\325\4\324\1\u0154\62\324\17\u011c\1\u011d"+
    "\4\u011c\1\u0154\62\u011c\11\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\1\u0155\30\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\20\33"+
    "\1\u0156\10\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\14\33\1\u0157\14\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\12\33"+
    "\1\u0158\16\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\1\u0159\30\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\4\33\1\u015a"+
    "\24\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\4\33\1\u015b\24\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\3\33\1\u015c"+
    "\25\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\14\33\1\u015d\14\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\12\33\1\u015e"+
    "\16\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\2\33\1\u015f\26\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\5\33\1\u0160"+
    "\6\33\1\u0161\14\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\16\33\1\u0162\12\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\10\33\1\u0163\20\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\22\33\1\u0164\6\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\2\33\1\u0165\26\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\2\33\1\u0166\26\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\20\33\1\u0167\10\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\14\33\1\u0168\14\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\12\33\1\u0169\16\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\22\33\1\u016a\6\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\u016b\1\0"+
    "\31\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\2\33\1\u016c\26\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\6\33\1\u016d"+
    "\22\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\22\33\1\u016e\6\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\7\33\1\u016f"+
    "\21\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\21\33\1\u0170\7\33\15\0\1\33\13\0"+
    "\5\33\1\u0171\1\33\7\0\1\33\4\0\1\33\1\0"+
    "\31\33\15\0\1\33\13\0\2\33\1\u0172\4\33\7\0"+
    "\1\33\4\0\1\33\1\0\31\33\15\0\1\33\13\0"+
    "\4\33\1\u0173\2\33\7\0\1\33\4\0\1\33\1\0"+
    "\31\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\1\u0174\30\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\4\33\1\u0175\24\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\22\33\1\u0176\6\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\1\u0177\30\33\56\0"+
    "\1\u0178\34\0\2\111\3\0\17\111\1\212\47\111\1\u0179"+
    "\12\111\11\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\2\33\1\u017a\26\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\23\33\1\u017b"+
    "\5\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\23\33\1\u017c\5\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\22\33\1\u017d"+
    "\6\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\22\33\1\u017e\6\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\21\33\1\u017f"+
    "\7\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\15\33\1\u0180\13\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\27\33\1\u0181"+
    "\1\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\7\33\1\u0182\21\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\1\u0183\30\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\1\u0184\30\33\15\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\1\u0185\30\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\3\33"+
    "\1\u0186\25\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\4\33\1\u0187\24\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\22\33"+
    "\1\u0188\6\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\4\33\1\u0189\24\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\22\33"+
    "\1\u018a\6\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\20\33\1\u018b\10\33\15\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\3\33"+
    "\1\u018c\25\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\12\33\1\u018d\16\33\100\0\1\u018e"+
    "\12\0\2\111\3\0\17\111\1\212\27\111\1\u018f\32\111"+
    "\11\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\22\33\1\u0190\6\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\2\33\1\u0191\26\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\4\33\1\u0192\24\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\4\33\1\u0193\24\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\13\33\1\u0194\15\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\2\33\1\u0195\26\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\12\33\1\u0196\16\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\2\33\1\u0197\26\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\4\33\1\u0198\24\33\15\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\4\33\1\u0199\24\33"+
    "\15\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\21\33\1\u019a\7\33\60\0\1\u019b\32\0\2\111"+
    "\3\0\17\111\1\212\34\111\1\322\25\111\11\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\22\33"+
    "\1\u019c\6\33\15\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\1\u019d\30\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\4\33\1\u019e"+
    "\24\33\15\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\4\33\1\u019f\24\33\15\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\3\33\1\u01a0"+
    "\25\33\65\0\1\u0117\36\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\10\33\1\u01a1\20\33\15\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\14\33\1\u01a2\14\33\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[21584];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\3\1\2\11\2\1\1\11"+
    "\4\1\2\11\3\1\1\11\2\1\5\11\22\1\1\11"+
    "\1\1\3\11\1\0\1\1\3\0\2\11\1\0\1\11"+
    "\1\0\6\11\3\0\1\1\1\11\1\1\3\11\61\1"+
    "\3\11\4\0\1\11\3\0\75\1\3\0\1\11\1\1"+
    "\3\0\1\1\3\0\77\1\2\0\1\11\1\0\1\11"+
    "\1\0\1\1\2\0\63\1\1\11\2\0\1\11\43\1"+
    "\2\0\24\1\2\0\13\1\1\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ValaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 138: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 139: break;
          case 3:
            { return ValaTypes.EXCLAMATION;
            }
          // fall through
          case 140: break;
          case 4:
            { return ValaTypes.POUND;
            }
          // fall through
          case 141: break;
          case 5:
            { return ValaTypes.DOLLAR;
            }
          // fall through
          case 142: break;
          case 6:
            { return ValaTypes.MODULO;
            }
          // fall through
          case 143: break;
          case 7:
            { return ValaTypes.AND;
            }
          // fall through
          case 144: break;
          case 8:
            { return ValaTypes.LPAREN;
            }
          // fall through
          case 145: break;
          case 9:
            { return ValaTypes.RPAREN;
            }
          // fall through
          case 146: break;
          case 10:
            { return ValaTypes.STAR;
            }
          // fall through
          case 147: break;
          case 11:
            { return ValaTypes.PLUS;
            }
          // fall through
          case 148: break;
          case 12:
            { return ValaTypes.COMMA;
            }
          // fall through
          case 149: break;
          case 13:
            { return ValaTypes.MINUS;
            }
          // fall through
          case 150: break;
          case 14:
            { return ValaTypes.DOT;
            }
          // fall through
          case 151: break;
          case 15:
            { return ValaTypes.FORWARD_SLASH;
            }
          // fall through
          case 152: break;
          case 16:
            { return ValaTypes.INTEGER_LITERAL;
            }
          // fall through
          case 153: break;
          case 17:
            { return ValaTypes.COLON;
            }
          // fall through
          case 154: break;
          case 18:
            { return ValaTypes.SEMICOLON;
            }
          // fall through
          case 155: break;
          case 19:
            { return ValaTypes.LESS_THAN;
            }
          // fall through
          case 156: break;
          case 20:
            { return ValaTypes.EQUALS;
            }
          // fall through
          case 157: break;
          case 21:
            { return ValaTypes.GREATER_THAN;
            }
          // fall through
          case 158: break;
          case 22:
            { return ValaTypes.QUESTION_MARK;
            }
          // fall through
          case 159: break;
          case 23:
            { return ValaTypes.AT;
            }
          // fall through
          case 160: break;
          case 24:
            { return ValaTypes.IDENTIFIER;
            }
          // fall through
          case 161: break;
          case 25:
            { return ValaTypes.LBRACKET;
            }
          // fall through
          case 162: break;
          case 26:
            { return ValaTypes.BACKSLASH;
            }
          // fall through
          case 163: break;
          case 27:
            { return ValaTypes.RBRACKET;
            }
          // fall through
          case 164: break;
          case 28:
            { return ValaTypes.CARET;
            }
          // fall through
          case 165: break;
          case 29:
            { return ValaTypes.BACKTICK;
            }
          // fall through
          case 166: break;
          case 30:
            { return ValaTypes.LBRACE;
            }
          // fall through
          case 167: break;
          case 31:
            { return ValaTypes.PIPE;
            }
          // fall through
          case 168: break;
          case 32:
            { return ValaTypes.RBRACE;
            }
          // fall through
          case 169: break;
          case 33:
            { return ValaTypes.TILDE;
            }
          // fall through
          case 170: break;
          case 34:
            { return ValaTypes.NOT_EQUALS;
            }
          // fall through
          case 171: break;
          case 35:
            { return ValaTypes.STRING_LITERAL;
            }
          // fall through
          case 172: break;
          case 36:
            { return ValaTypes.MODULO_EQUALS;
            }
          // fall through
          case 173: break;
          case 37:
            { return ValaTypes.AND_AND;
            }
          // fall through
          case 174: break;
          case 38:
            { return ValaTypes.CHAR_LITERAL;
            }
          // fall through
          case 175: break;
          case 39:
            { return ValaTypes.MULTIPLY_EQUALS;
            }
          // fall through
          case 176: break;
          case 40:
            { return ValaTypes.INCREMENT;
            }
          // fall through
          case 177: break;
          case 41:
            { return ValaTypes.PLUS_EQUALS;
            }
          // fall through
          case 178: break;
          case 42:
            { return ValaTypes.DECREMENT;
            }
          // fall through
          case 179: break;
          case 43:
            { return ValaTypes.MINUS_EQUALS;
            }
          // fall through
          case 180: break;
          case 44:
            { return ValaTypes.ARROW;
            }
          // fall through
          case 181: break;
          case 45:
            { return ValaTypes.COMMENT;
            }
          // fall through
          case 182: break;
          case 46:
            { return ValaTypes.DIVIDE_EQUALS;
            }
          // fall through
          case 183: break;
          case 47:
            { return ValaTypes.DECIMAL_LITERAL;
            }
          // fall through
          case 184: break;
          case 48:
            { return ValaTypes.LESS_THAN_EQUALS;
            }
          // fall through
          case 185: break;
          case 49:
            { return ValaTypes.EQUALS_EQUALS;
            }
          // fall through
          case 186: break;
          case 50:
            { return ValaTypes.GREATER_THAN_EQUALS;
            }
          // fall through
          case 187: break;
          case 51:
            { return ValaTypes.DO;
            }
          // fall through
          case 188: break;
          case 52:
            { return ValaTypes.IF;
            }
          // fall through
          case 189: break;
          case 53:
            { return ValaTypes.IN;
            }
          // fall through
          case 190: break;
          case 54:
            { return ValaTypes.PIPE_EQUALS;
            }
          // fall through
          case 191: break;
          case 55:
            { return ValaTypes.OR_OR;
            }
          // fall through
          case 192: break;
          case 56:
            { return ValaTypes.DOT_DOT_DOT;
            }
          // fall through
          case 193: break;
          case 57:
            { return ValaTypes.FOR;
            }
          // fall through
          case 194: break;
          case 58:
            { return ValaTypes.INT;
            }
          // fall through
          case 195: break;
          case 59:
            { return ValaTypes.NEW;
            }
          // fall through
          case 196: break;
          case 60:
            { return ValaTypes.OUT;
            }
          // fall through
          case 197: break;
          case 61:
            { return ValaTypes.REF;
            }
          // fall through
          case 198: break;
          case 62:
            { return ValaTypes.TRY;
            }
          // fall through
          case 199: break;
          case 63:
            { return ValaTypes.VAR;
            }
          // fall through
          case 200: break;
          case 64:
            { return ValaTypes.PREPROCESSOR_DIRECTIVE;
            }
          // fall through
          case 201: break;
          case 65:
            { return ValaTypes.REGULAR_EXPRESSION;
            }
          // fall through
          case 202: break;
          case 66:
            { return ValaTypes.BLOCK_COMMENT;
            }
          // fall through
          case 203: break;
          case 67:
            { return ValaTypes.BASE;
            }
          // fall through
          case 204: break;
          case 68:
            { return ValaTypes.BOOL;
            }
          // fall through
          case 205: break;
          case 69:
            { return ValaTypes.CASE;
            }
          // fall through
          case 206: break;
          case 70:
            { return ValaTypes.CHAR;
            }
          // fall through
          case 207: break;
          case 71:
            { return ValaTypes.ELSE;
            }
          // fall through
          case 208: break;
          case 72:
            { return ValaTypes.ENUM;
            }
          // fall through
          case 209: break;
          case 73:
            { return ValaTypes.INT8;
            }
          // fall through
          case 210: break;
          case 74:
            { return ValaTypes.LOCK;
            }
          // fall through
          case 211: break;
          case 75:
            { return ValaTypes.LONG;
            }
          // fall through
          case 212: break;
          case 76:
            { return ValaTypes.NULL;
            }
          // fall through
          case 213: break;
          case 77:
            { return ValaTypes.THIS;
            }
          // fall through
          case 214: break;
          case 78:
            { return ValaTypes.TRUE;
            }
          // fall through
          case 215: break;
          case 79:
            { return ValaTypes.UINT;
            }
          // fall through
          case 216: break;
          case 80:
            { return ValaTypes.VOID;
            }
          // fall through
          case 217: break;
          case 81:
            { return ValaTypes.WEAK;
            }
          // fall through
          case 218: break;
          case 82:
            { return ValaTypes.DOC_COMMENT;
            }
          // fall through
          case 219: break;
          case 83:
            { return ValaTypes.ASYNC;
            }
          // fall through
          case 220: break;
          case 84:
            { return ValaTypes.BREAK;
            }
          // fall through
          case 221: break;
          case 85:
            { return ValaTypes.CATCH;
            }
          // fall through
          case 222: break;
          case 86:
            { return ValaTypes.CLASS;
            }
          // fall through
          case 223: break;
          case 87:
            { return ValaTypes.CONST;
            }
          // fall through
          case 224: break;
          case 88:
            { return ValaTypes.FALSE;
            }
          // fall through
          case 225: break;
          case 89:
            { return ValaTypes.FLOAT;
            }
          // fall through
          case 226: break;
          case 90:
            { return ValaTypes.INT16;
            }
          // fall through
          case 227: break;
          case 91:
            { return ValaTypes.INT32;
            }
          // fall through
          case 228: break;
          case 92:
            { return ValaTypes.INT64;
            }
          // fall through
          case 229: break;
          case 93:
            { return ValaTypes.OWNED;
            }
          // fall through
          case 230: break;
          case 94:
            { return ValaTypes.SHORT;
            }
          // fall through
          case 231: break;
          case 95:
            { return ValaTypes.THROW;
            }
          // fall through
          case 232: break;
          case 96:
            { return ValaTypes.UCHAR;
            }
          // fall through
          case 233: break;
          case 97:
            { return ValaTypes.UINT8;
            }
          // fall through
          case 234: break;
          case 98:
            { return ValaTypes.ULONG;
            }
          // fall through
          case 235: break;
          case 99:
            { return ValaTypes.USING;
            }
          // fall through
          case 236: break;
          case 100:
            { return ValaTypes.WHILE;
            }
          // fall through
          case 237: break;
          case 101:
            { return ValaTypes.YIELD;
            }
          // fall through
          case 238: break;
          case 102:
            { return ValaTypes.TRIPLE_QUOTE_STRING;
            }
          // fall through
          case 239: break;
          case 103:
            { return ValaTypes.DOUBLE;
            }
          // fall through
          case 240: break;
          case 104:
            { return ValaTypes.EXTERN;
            }
          // fall through
          case 241: break;
          case 105:
            { return ValaTypes.PUBLIC;
            }
          // fall through
          case 242: break;
          case 106:
            { return ValaTypes.RETURN;
            }
          // fall through
          case 243: break;
          case 107:
            { return ValaTypes.SIGNAL;
            }
          // fall through
          case 244: break;
          case 108:
            { return ValaTypes.SIZE_T;
            }
          // fall through
          case 245: break;
          case 109:
            { return ValaTypes.STATIC;
            }
          // fall through
          case 246: break;
          case 110:
            { return ValaTypes.STRING;
            }
          // fall through
          case 247: break;
          case 111:
            { return ValaTypes.STRUCT;
            }
          // fall through
          case 248: break;
          case 112:
            { return ValaTypes.SWITCH;
            }
          // fall through
          case 249: break;
          case 113:
            { return ValaTypes.THROWS;
            }
          // fall through
          case 250: break;
          case 114:
            { return ValaTypes.UINT16;
            }
          // fall through
          case 251: break;
          case 115:
            { return ValaTypes.UINT32;
            }
          // fall through
          case 252: break;
          case 116:
            { return ValaTypes.UINT64;
            }
          // fall through
          case 253: break;
          case 117:
            { return ValaTypes.USHORT;
            }
          // fall through
          case 254: break;
          case 118:
            { return ValaTypes.DEFAULT;
            }
          // fall through
          case 255: break;
          case 119:
            { return ValaTypes.ENSURES;
            }
          // fall through
          case 256: break;
          case 120:
            { return ValaTypes.FINALLY;
            }
          // fall through
          case 257: break;
          case 121:
            { return ValaTypes.FOREACH;
            }
          // fall through
          case 258: break;
          case 122:
            { return ValaTypes.PRIVATE;
            }
          // fall through
          case 259: break;
          case 123:
            { return ValaTypes.SSIZE_T;
            }
          // fall through
          case 260: break;
          case 124:
            { return ValaTypes.UNICHAR;
            }
          // fall through
          case 261: break;
          case 125:
            { return ValaTypes.UNOWNED;
            }
          // fall through
          case 262: break;
          case 126:
            { return ValaTypes.VIRTUAL;
            }
          // fall through
          case 263: break;
          case 127:
            { return ValaTypes.ABSTRACT;
            }
          // fall through
          case 264: break;
          case 128:
            { return ValaTypes.CONTINUE;
            }
          // fall through
          case 265: break;
          case 129:
            { return ValaTypes.DELEGATE;
            }
          // fall through
          case 266: break;
          case 130:
            { return ValaTypes.INTERNAL;
            }
          // fall through
          case 267: break;
          case 131:
            { return ValaTypes.OVERRIDE;
            }
          // fall through
          case 268: break;
          case 132:
            { return ValaTypes.REQUIRES;
            }
          // fall through
          case 269: break;
          case 133:
            { return ValaTypes.CONSTRUCT;
            }
          // fall through
          case 270: break;
          case 134:
            { return ValaTypes.INTERFACE;
            }
          // fall through
          case 271: break;
          case 135:
            { return ValaTypes.NAMESPACE;
            }
          // fall through
          case 272: break;
          case 136:
            { return ValaTypes.PROTECTED;
            }
          // fall through
          case 273: break;
          case 137:
            { return ValaTypes.ERRORDOMAIN;
            }
          // fall through
          case 274: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
