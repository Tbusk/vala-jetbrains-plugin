// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Vala.flex

package com.tbusk.vala_plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tbusk.vala_plugin.psi.ValaTypes;
import com.intellij.psi.TokenType;
import com.tbusk.vala_plugin.ValaTokenSets;
import com.tbusk.vala_plugin.psi.ValaTokenType;

/**
 * Lexer generator used is JFlex.
 * Documentation can be found at: https://jflex.de/manual.html
 */

public class ValaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\23\1\30\1\23\1\31\1\23"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\32\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\41"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\6\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\22\30\1\37\1\40\1\41\1\42\1\43\1\0"+
    "\1\44\3\0\1\45\1\46\1\0\1\47\1\0\1\50"+
    "\1\51\1\52\1\53\1\54\3\0\1\55\1\56\1\0"+
    "\1\57\1\60\1\61\1\62\1\30\1\63\10\30\1\64"+
    "\10\30\1\65\1\66\1\67\34\30\1\70\1\71\2\0"+
    "\1\72\1\73\1\74\2\0\1\74\1\0\25\30\1\75"+
    "\1\76\3\30\1\77\1\30\1\100\5\30\1\101\14\30"+
    "\1\102\7\30\1\103\5\30\6\0\1\104\3\0\2\30"+
    "\1\105\1\106\1\30\1\107\1\30\1\110\6\30\1\111"+
    "\1\30\1\112\11\30\1\113\1\30\1\114\1\115\1\30"+
    "\1\116\17\30\1\117\1\30\1\120\1\30\1\121\6\30"+
    "\1\122\1\123\2\30\1\124\1\125\1\0\1\104\1\0"+
    "\1\74\1\126\3\0\1\30\1\127\1\130\1\131\1\132"+
    "\1\133\7\30\1\134\1\30\1\135\1\30\1\136\1\137"+
    "\1\140\3\30\1\141\5\30\1\142\7\30\1\143\1\144"+
    "\3\30\1\145\1\146\3\30\1\147\1\30\1\150\1\151"+
    "\1\152\1\126\1\0\5\30\1\153\2\30\1\154\10\30"+
    "\1\155\1\30\1\156\1\157\1\160\1\30\1\161\1\162"+
    "\1\163\1\164\1\165\1\166\1\167\1\170\2\30\1\171"+
    "\1\30\1\0\3\30\1\172\1\30\1\173\1\30\1\174"+
    "\1\175\4\30\1\176\2\30\1\177\1\200\1\201\1\202"+
    "\1\203\1\30\1\204\1\205\2\30\1\206\1\30\1\207"+
    "\1\30\1\210\1\211\1\30\1\212\1\213\1\214\1\30"+
    "\1\215";

  private static int [] zzUnpackAction() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\105\0\u019e"+
    "\0\u01e3\0\u0228\0\105\0\105\0\u026d\0\u02b2\0\105\0\u02f7"+
    "\0\u033c\0\u0381\0\u03c6\0\105\0\105\0\u040b\0\u0450\0\u0495"+
    "\0\105\0\u04da\0\u051f\0\105\0\105\0\105\0\105\0\u051f"+
    "\0\105\0\u0564\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702"+
    "\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a"+
    "\0\u096f\0\u09b4\0\u09f9\0\105\0\u0a3e\0\105\0\105\0\105"+
    "\0\u0114\0\105\0\u0a83\0\u0ac8\0\u0b0d\0\105\0\105\0\u0228"+
    "\0\105\0\u0b52\0\105\0\105\0\105\0\105\0\105\0\u0b97"+
    "\0\u0bdc\0\u0c21\0\u0c66\0\u0bdc\0\u0cab\0\u0cf0\0\105\0\105"+
    "\0\105\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3"+
    "\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb"+
    "\0\u1140\0\u1185\0\u11ca\0\u120f\0\u051f\0\u1254\0\u051f\0\u1299"+
    "\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1"+
    "\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9"+
    "\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911"+
    "\0\u1956\0\u199b\0\u19e0\0\105\0\105\0\u1a25\0\u1a6a\0\105"+
    "\0\105\0\105\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08"+
    "\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30"+
    "\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058"+
    "\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280"+
    "\0\u051f\0\u22c5\0\u051f\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e"+
    "\0\u051f\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601"+
    "\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u051f\0\u279f\0\u27e4"+
    "\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u051f\0\u2982\0\u29c7"+
    "\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef"+
    "\0\u2c34\0\u2c79\0\u2cbe\0\u1b39\0\u2d03\0\u2d48\0\u2d8d\0\u051f"+
    "\0\u051f\0\u2dd2\0\u051f\0\u2e17\0\u051f\0\u2e5c\0\u2ea1\0\u2ee6"+
    "\0\u2f2b\0\u2f70\0\u2fb5\0\u051f\0\u2ffa\0\u051f\0\u303f\0\u3084"+
    "\0\u30c9\0\u310e\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267\0\u051f"+
    "\0\u32ac\0\u051f\0\u051f\0\u32f1\0\u051f\0\u3336\0\u337b\0\u33c0"+
    "\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519\0\u355e\0\u35a3\0\u35e8"+
    "\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u051f\0\u3741\0\u051f\0\u3786"+
    "\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969\0\u051f"+
    "\0\u051f\0\u39ae\0\u39f3\0\105\0\105\0\u3a38\0\105\0\u3a7d"+
    "\0\u3ac2\0\u1b39\0\u2c79\0\u3b07\0\u3ac2\0\u3b4c\0\u051f\0\u051f"+
    "\0\u051f\0\u051f\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea"+
    "\0\u3d2f\0\u3d74\0\u051f\0\u3db9\0\u051f\0\u3dfe\0\u051f\0\u051f"+
    "\0\u051f\0\u3e43\0\u3e88\0\u3ecd\0\u051f\0\u3f12\0\u3f57\0\u3f9c"+
    "\0\u3fe1\0\u4026\0\u051f\0\u406b\0\u40b0\0\u40f5\0\u413a\0\u417f"+
    "\0\u41c4\0\u4209\0\u424e\0\u051f\0\u4293\0\u42d8\0\u431d\0\u051f"+
    "\0\u051f\0\u4362\0\u43a7\0\u43ec\0\u051f\0\u4431\0\u051f\0\u051f"+
    "\0\105\0\105\0\u4476\0\u44bb\0\u4500\0\u4545\0\u458a\0\u45cf"+
    "\0\u051f\0\u4614\0\u4659\0\u051f\0\u469e\0\u46e3\0\u4728\0\u476d"+
    "\0\u47b2\0\u47f7\0\u483c\0\u4881\0\u051f\0\u48c6\0\u051f\0\u051f"+
    "\0\u051f\0\u490b\0\u051f\0\u051f\0\u051f\0\u051f\0\u051f\0\u051f"+
    "\0\u051f\0\u051f\0\u4950\0\u4995\0\u051f\0\u49da\0\u4a1f\0\u4a64"+
    "\0\u4aa9\0\u4aee\0\u051f\0\u4b33\0\u051f\0\u4b78\0\u051f\0\u051f"+
    "\0\u4bbd\0\u4c02\0\u4c47\0\u4c8c\0\u051f\0\u4cd1\0\u4d16\0\u051f"+
    "\0\u051f\0\u051f\0\u051f\0\u051f\0\u4d5b\0\u051f\0\u051f\0\u4da0"+
    "\0\u4de5\0\u051f\0\u4e2a\0\u051f\0\u4e6f\0\u051f\0\u051f\0\u4eb4"+
    "\0\u051f\0\u051f\0\u051f\0\u4ef9\0\u051f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\7\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\2\33"+
    "\1\50\1\33\1\51\1\33\1\52\1\53\1\54\1\33"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\33\1\63"+
    "\1\33\1\64\1\65\1\66\1\67\106\0\2\3\137\0"+
    "\1\70\47\0\5\71\1\72\35\71\1\73\41\71\54\0"+
    "\1\74\3\0\1\75\61\0\1\76\60\0\1\77\73\0"+
    "\12\100\1\101\30\100\1\102\41\100\35\0\1\103\65\0"+
    "\1\104\16\0\1\105\67\0\1\106\2\0\7\23\3\0"+
    "\1\107\70\0\1\110\63\0\15\111\1\112\4\111\1\113"+
    "\12\111\1\114\5\111\1\115\41\111\21\0\1\116\1\0"+
    "\7\23\110\0\1\117\104\0\1\120\104\0\1\121\54\0"+
    "\1\71\106\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\31\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\1\33\1\122\17\33\1\123"+
    "\7\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\1\124\14\33\1\125\2\33\1\126\10\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\1\127\6\33\1\130\2\33\1\131\2\33\1\132"+
    "\13\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\4\33\1\133\10\33\1\134\13\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\12\33\1\135\1\33\1\136\3\33\1\137\5\33\1\140"+
    "\2\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\1\141\7\33\1\142\1\33\1\143\2\33"+
    "\1\144\13\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\5\33\1\145\6\33\1\146\4\33"+
    "\1\147\7\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\15\33\1\150\13\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\1\151"+
    "\3\33\1\152\16\33\1\153\5\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\23\33\1\154"+
    "\1\155\1\156\3\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\20\33\1\157\2\33\1\160"+
    "\5\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\4\33\1\161\24\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\7\33\1\162"+
    "\1\163\10\33\1\164\1\165\2\33\1\166\3\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\7\33\1\167\10\33\1\170\10\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\2\33\1\171"+
    "\5\33\1\172\1\33\1\173\1\33\1\174\4\33\1\175"+
    "\7\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\1\176\7\33\1\177\4\33\1\200\13\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\4\33\1\201\2\33\1\202\21\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\10\33"+
    "\1\203\20\33\41\0\1\204\44\0\1\205\2\0\2\71"+
    "\2\0\101\71\62\0\1\206\1\0\1\207\75\0\1\210"+
    "\27\0\2\100\2\0\101\100\21\0\1\211\63\0\22\111"+
    "\1\212\20\111\1\115\41\111\15\213\1\214\4\213\1\215"+
    "\20\213\1\216\41\213\2\113\1\0\102\113\2\111\2\0"+
    "\101\111\23\0\7\116\62\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\21\33\1\217\7\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\27\33\1\220\1\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\21\33\1\221\7\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\15\33\1\222\13\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\223\24\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\21\33\1\224\1\225\6\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\1\226\30\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\1\227\30\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\14\33\1\230\14\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\5\33"+
    "\1\231\4\33\1\232\16\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\23\33\1\233\5\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\21\33\1\234\7\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\21\33\1\235\1\33"+
    "\1\236\5\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\20\33\1\237\10\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\22\33"+
    "\1\240\6\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\12\33\1\241\16\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\14\33"+
    "\1\242\14\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\15\33\1\243\13\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\20\33"+
    "\1\244\10\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\22\33\1\245\6\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\2\33"+
    "\1\246\11\33\1\247\14\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\13\33\1\250\15\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\25\33\1\251\3\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\12\33\1\252\16\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\22\33\1\253\6\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\4\33\1\254\24\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\14\33\1\255\14\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\10\33\1\256\4\33"+
    "\1\257\13\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\1\33\1\260\27\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\5\33"+
    "\1\261\11\33\1\262\2\33\1\263\6\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\15\33"+
    "\1\264\13\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\6\33\1\265\21\33\1\266\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\10\33\1\267\20\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\1\270\17\33\1\271\10\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\10\33\1\272\20\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\10\33\1\273\7\33"+
    "\1\274\10\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\23\33\1\275\3\33\1\276\1\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\7\33\1\277\21\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\14\33\1\300\14\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\15\33\1\301\13\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\10\33\1\302\4\33"+
    "\1\303\13\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\7\33\1\304\1\305\20\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\20\33\1\306\10\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\20\33\1\307\10\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\10\33\1\310\20\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\1\311\30\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\10\33"+
    "\1\312\20\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\4\33\1\313\24\33\64\0\1\314"+
    "\10\0\1\315\66\0\1\316\31\0\15\213\1\317\4\213"+
    "\1\215\20\213\1\216\41\213\15\320\1\321\4\320\1\322"+
    "\20\320\1\323\41\320\15\324\1\325\67\324\2\213\2\324"+
    "\11\213\1\317\67\213\7\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\22\33\1\326\6\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\14\33\1\327\14\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\330\24\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\12\33\1\331\16\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\1\332\30\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\4\33"+
    "\1\333\24\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\2\33\1\334\26\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\20\33"+
    "\1\335\10\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\21\33\1\336\7\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\21\33"+
    "\1\337\1\340\6\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\1\341\30\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\4\33"+
    "\1\342\24\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\1\33\1\343\27\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\4\33"+
    "\1\344\24\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\23\33\1\345\5\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\13\33"+
    "\1\346\15\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\15\33\1\347\13\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\4\33"+
    "\1\350\24\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\21\33\1\351\7\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\1\352"+
    "\30\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\1\353\30\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\4\33\1\354\24\33"+
    "\13\0\1\33\13\0\1\33\1\355\1\33\1\356\1\33"+
    "\1\357\1\360\7\0\1\33\4\0\1\33\1\0\4\33"+
    "\1\361\24\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\11\33\1\362\17\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\6\33"+
    "\1\363\22\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\4\33\1\364\24\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\12\33"+
    "\1\365\16\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\20\33\1\366\10\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\4\33"+
    "\1\367\24\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\24\33\1\370\4\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\22\33"+
    "\1\371\6\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\12\33\1\372\16\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\23\33"+
    "\1\373\5\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\23\33\1\374\5\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\20\33"+
    "\1\375\10\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\14\33\1\376\14\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\4\33"+
    "\1\377\24\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\30\33\1\u0100\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\22\33\1\u0101"+
    "\6\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\10\33\1\u0102\12\33\1\u0103\5\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\22\33\1\u0104\6\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\21\33\1\u0105\7\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\15\33\1\u0106\13\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\u0107\24\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\1\u0108\30\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\22\33\1\u0109\6\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\14\33"+
    "\1\u010a\14\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\2\33\1\u010b\26\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\25\33"+
    "\1\u010c\3\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\15\33\1\u010d\13\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\14\33"+
    "\1\u010e\14\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\22\33\1\u010f\6\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\3\33"+
    "\1\u0110\25\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\11\33\1\u0111\17\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\12\33"+
    "\1\u0112\16\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\12\33\1\u0113\16\33\61\0\1\u0114"+
    "\103\0\1\u0115\110\0\1\u0116\24\0\22\213\1\u0117\20\213"+
    "\1\216\41\213\15\320\1\u0118\4\320\1\u0119\20\320\1\323"+
    "\56\320\1\u0118\4\320\1\u011a\20\320\1\323\41\320\15\u011b"+
    "\1\u011c\67\u011b\2\320\2\u011d\11\320\1\u0118\67\320\22\324"+
    "\1\u0117\62\324\7\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\20\33\1\u011e\10\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\2\33"+
    "\1\u011f\26\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\11\33\1\u0120\17\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\7\33"+
    "\1\u0121\21\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\21\33\1\u0122\7\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\22\33"+
    "\1\u0123\6\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\10\33\1\u0124\20\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\23\33"+
    "\1\u0125\5\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\6\33\1\u0126\22\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\12\33"+
    "\1\u0127\16\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\20\33\1\u0128\10\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\20\33"+
    "\1\u0129\10\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\20\33\1\u012a\10\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\4\33"+
    "\1\u012b\24\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\12\33\1\u012c\16\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\22\33"+
    "\1\u012d\6\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\1\u012e\30\33\13\0\1\33\13\0"+
    "\5\33\1\u012f\1\33\7\0\1\33\4\0\1\33\1\0"+
    "\31\33\13\0\1\33\13\0\2\33\1\u0130\4\33\7\0"+
    "\1\33\4\0\1\33\1\0\31\33\13\0\1\33\13\0"+
    "\4\33\1\u0131\2\33\7\0\1\33\4\0\1\33\1\0"+
    "\31\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\20\33\1\u0132\10\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\21\33\1\u0133"+
    "\7\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\20\33\1\u0134\10\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\3\33\1\u0135"+
    "\25\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\1\u0136\30\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\4\33\1\u0137\24\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\10\33\1\u0138\20\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\10\33\1\u0139\20\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\20\33\1\u013a\10\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\22\33\1\u013b\6\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\1\u013c\30\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\u013d\1\0\31\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\4\33\1\u013e"+
    "\24\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\10\33\1\u013f\20\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\14\33\1\u0140"+
    "\14\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\2\33\1\u0141\26\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\2\33\1\u0142"+
    "\26\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\25\33\1\u0143\3\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\20\33\1\u0144"+
    "\10\33\13\0\1\33\13\0\1\33\1\u0145\1\33\1\u0146"+
    "\1\33\1\u0147\1\u0148\7\0\1\33\4\0\1\33\1\0"+
    "\31\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\6\33\1\u0149\22\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\7\33\1\u014a"+
    "\21\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\14\33\1\u014b\14\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\20\33\1\u014c"+
    "\10\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\6\33\1\u014d\22\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\23\33\1\u014e"+
    "\5\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\4\33\1\u014f\24\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\3\33\1\u0150"+
    "\25\33\61\0\1\u0151\27\0\15\320\1\321\4\320\1\u0152"+
    "\20\320\1\323\41\320\15\u011d\1\u0153\67\u011d\15\u011b\1\u011c"+
    "\4\u011b\1\u0152\62\u011b\7\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\1\u0154\30\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\20\33"+
    "\1\u0155\10\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\14\33\1\u0156\14\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\12\33"+
    "\1\u0157\16\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\1\u0158\30\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\4\33\1\u0159"+
    "\24\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\4\33\1\u015a\24\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\3\33\1\u015b"+
    "\25\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\14\33\1\u015c\14\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\12\33\1\u015d"+
    "\16\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\2\33\1\u015e\26\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\5\33\1\u015f"+
    "\6\33\1\u0160\14\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\16\33\1\u0161\12\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\10\33\1\u0162\20\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\22\33\1\u0163\6\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\2\33\1\u0164\26\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\2\33\1\u0165\26\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\20\33\1\u0166\10\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\14\33\1\u0167\14\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\12\33\1\u0168\16\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\22\33\1\u0169\6\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\u016a\1\0"+
    "\31\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\2\33\1\u016b\26\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\6\33\1\u016c"+
    "\22\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\22\33\1\u016d\6\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\7\33\1\u016e"+
    "\21\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\21\33\1\u016f\7\33\13\0\1\33\13\0"+
    "\5\33\1\u0170\1\33\7\0\1\33\4\0\1\33\1\0"+
    "\31\33\13\0\1\33\13\0\2\33\1\u0171\4\33\7\0"+
    "\1\33\4\0\1\33\1\0\31\33\13\0\1\33\13\0"+
    "\4\33\1\u0172\2\33\7\0\1\33\4\0\1\33\1\0"+
    "\31\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\1\u0173\30\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\4\33\1\u0174\24\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\22\33\1\u0175\6\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\1\u0176\30\33\4\0"+
    "\15\u011d\1\u0177\4\u011d\1\u0152\62\u011d\7\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\2\33\1\u0178"+
    "\26\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\23\33\1\u0179\5\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\23\33\1\u017a"+
    "\5\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\22\33\1\u017b\6\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\22\33\1\u017c"+
    "\6\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\21\33\1\u017d\7\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\15\33\1\u017e"+
    "\13\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\27\33\1\u017f\1\33\13\0\1\33\13\0"+
    "\7\33\7\0\1\33\4\0\1\33\1\0\7\33\1\u0180"+
    "\21\33\13\0\1\33\13\0\7\33\7\0\1\33\4\0"+
    "\1\33\1\0\1\u0181\30\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\1\u0182\30\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\1\u0183\30\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\3\33\1\u0184\25\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\4\33"+
    "\1\u0185\24\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\22\33\1\u0186\6\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\4\33"+
    "\1\u0187\24\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\22\33\1\u0188\6\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\20\33"+
    "\1\u0189\10\33\13\0\1\33\13\0\7\33\7\0\1\33"+
    "\4\0\1\33\1\0\3\33\1\u018a\25\33\13\0\1\33"+
    "\13\0\7\33\7\0\1\33\4\0\1\33\1\0\12\33"+
    "\1\u018b\16\33\4\0\15\u011d\1\u0153\4\u011d\1\u011a\62\u011d"+
    "\7\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\22\33\1\u018c\6\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\2\33\1\u018d\26\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\4\33\1\u018e\24\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\4\33\1\u018f\24\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\13\33\1\u0190\15\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\2\33\1\u0191\26\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\12\33\1\u0192\16\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\2\33\1\u0193\26\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\4\33\1\u0194\24\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\4\33\1\u0195\24\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\21\33\1\u0196\7\33\13\0\1\33\13\0\7\33"+
    "\7\0\1\33\4\0\1\33\1\0\22\33\1\u0197\6\33"+
    "\13\0\1\33\13\0\7\33\7\0\1\33\4\0\1\33"+
    "\1\0\1\u0198\30\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\4\33\1\u0199\24\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\4\33\1\u019a\24\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\3\33\1\u019b\25\33\13\0"+
    "\1\33\13\0\7\33\7\0\1\33\4\0\1\33\1\0"+
    "\10\33\1\u019c\20\33\13\0\1\33\13\0\7\33\7\0"+
    "\1\33\4\0\1\33\1\0\14\33\1\u019d\14\33\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[20286];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\3\1\2\11\2\1\1\11"+
    "\4\1\2\11\3\1\1\11\2\1\4\11\1\1\1\11"+
    "\22\1\1\11\1\1\3\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\1\0\5\11\3\0\2\1\1\0\1\1"+
    "\3\11\62\1\2\11\2\0\3\11\2\0\1\1\1\0"+
    "\75\1\6\0\1\1\3\0\76\1\2\11\1\0\1\11"+
    "\1\0\2\1\3\0\63\1\2\11\1\0\43\1\1\0"+
    "\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[413];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ValaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 142: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 143: break;
          case 3:
            { return ValaTypes.EXCLAMATION;
            }
          // fall through
          case 144: break;
          case 4:
            { return ValaTypes.POUND;
            }
          // fall through
          case 145: break;
          case 5:
            { return ValaTypes.DOLLAR;
            }
          // fall through
          case 146: break;
          case 6:
            { return ValaTypes.MODULO;
            }
          // fall through
          case 147: break;
          case 7:
            { return ValaTypes.AND;
            }
          // fall through
          case 148: break;
          case 8:
            { return ValaTypes.LPAREN;
            }
          // fall through
          case 149: break;
          case 9:
            { return ValaTypes.RPAREN;
            }
          // fall through
          case 150: break;
          case 10:
            { return ValaTypes.STAR;
            }
          // fall through
          case 151: break;
          case 11:
            { return ValaTypes.PLUS;
            }
          // fall through
          case 152: break;
          case 12:
            { return ValaTypes.COMMA;
            }
          // fall through
          case 153: break;
          case 13:
            { return ValaTypes.MINUS;
            }
          // fall through
          case 154: break;
          case 14:
            { return ValaTypes.DOT;
            }
          // fall through
          case 155: break;
          case 15:
            { return ValaTypes.FORWARD_SLASH;
            }
          // fall through
          case 156: break;
          case 16:
            { return ValaTypes.INTEGER_LITERAL;
            }
          // fall through
          case 157: break;
          case 17:
            { return ValaTypes.COLON;
            }
          // fall through
          case 158: break;
          case 18:
            { return ValaTypes.SEMICOLON;
            }
          // fall through
          case 159: break;
          case 19:
            { return ValaTypes.LESS_THAN;
            }
          // fall through
          case 160: break;
          case 20:
            { return ValaTypes.EQUALS;
            }
          // fall through
          case 161: break;
          case 21:
            { return ValaTypes.GREATER_THAN;
            }
          // fall through
          case 162: break;
          case 22:
            { return ValaTypes.QUESTION_MARK;
            }
          // fall through
          case 163: break;
          case 23:
            { return ValaTypes.AT;
            }
          // fall through
          case 164: break;
          case 24:
            { return ValaTypes.IDENTIFIER;
            }
          // fall through
          case 165: break;
          case 25:
            { return ValaTypes.LBRACKET;
            }
          // fall through
          case 166: break;
          case 26:
            { return ValaTypes.BACKSLASH;
            }
          // fall through
          case 167: break;
          case 27:
            { return ValaTypes.RBRACKET;
            }
          // fall through
          case 168: break;
          case 28:
            { return ValaTypes.CARET;
            }
          // fall through
          case 169: break;
          case 29:
            { return ValaTypes.UNDERSCORE;
            }
          // fall through
          case 170: break;
          case 30:
            { return ValaTypes.BACKTICK;
            }
          // fall through
          case 171: break;
          case 31:
            { return ValaTypes.LBRACE;
            }
          // fall through
          case 172: break;
          case 32:
            { return ValaTypes.PIPE;
            }
          // fall through
          case 173: break;
          case 33:
            { return ValaTypes.RBRACE;
            }
          // fall through
          case 174: break;
          case 34:
            { return ValaTypes.TILDE;
            }
          // fall through
          case 175: break;
          case 35:
            { return ValaTypes.NOT_EQUALS;
            }
          // fall through
          case 176: break;
          case 36:
            { return ValaTypes.STRING_LITERAL;
            }
          // fall through
          case 177: break;
          case 37:
            { return ValaTypes.MODULO_EQUALS;
            }
          // fall through
          case 178: break;
          case 38:
            { return ValaTypes.AND_AND;
            }
          // fall through
          case 179: break;
          case 39:
            { return ValaTypes.CHAR_LITERAL;
            }
          // fall through
          case 180: break;
          case 40:
            { return ValaTypes.MULTIPLY_EQUALS;
            }
          // fall through
          case 181: break;
          case 41:
            { return ValaTypes.INCREMENT;
            }
          // fall through
          case 182: break;
          case 42:
            { return ValaTypes.PLUS_EQUALS;
            }
          // fall through
          case 183: break;
          case 43:
            { return ValaTypes.DECREMENT;
            }
          // fall through
          case 184: break;
          case 44:
            { return ValaTypes.MINUS_EQUALS;
            }
          // fall through
          case 185: break;
          case 45:
            { return ValaTypes.COMMENT;
            }
          // fall through
          case 186: break;
          case 46:
            { return ValaTypes.DIVIDE_EQUALS;
            }
          // fall through
          case 187: break;
          case 47:
            { return ValaTypes.DECIMAL_LITERAL;
            }
          // fall through
          case 188: break;
          case 48:
            { return ValaTypes.LESS_THAN_EQUALS;
            }
          // fall through
          case 189: break;
          case 49:
            { return ValaTypes.EQUALS_EQUALS;
            }
          // fall through
          case 190: break;
          case 50:
            { return ValaTypes.GREATER_THAN_EQUALS;
            }
          // fall through
          case 191: break;
          case 51:
            { return ValaTypes.AS;
            }
          // fall through
          case 192: break;
          case 52:
            { return ValaTypes.DO;
            }
          // fall through
          case 193: break;
          case 53:
            { return ValaTypes.IF;
            }
          // fall through
          case 194: break;
          case 54:
            { return ValaTypes.IN;
            }
          // fall through
          case 195: break;
          case 55:
            { return ValaTypes.IS;
            }
          // fall through
          case 196: break;
          case 56:
            { return ValaTypes.PIPE_EQUALS;
            }
          // fall through
          case 197: break;
          case 57:
            { return ValaTypes.OR_OR;
            }
          // fall through
          case 198: break;
          case 58:
            { return ValaTypes.POUND_IF;
            }
          // fall through
          case 199: break;
          case 59:
            { return ValaTypes.DOT_DOT_DOT;
            }
          // fall through
          case 200: break;
          case 60:
            { return ValaTypes.REGULAR_EXPRESSION;
            }
          // fall through
          case 201: break;
          case 61:
            { return ValaTypes.FOR;
            }
          // fall through
          case 202: break;
          case 62:
            { return ValaTypes.INT;
            }
          // fall through
          case 203: break;
          case 63:
            { return ValaTypes.NEW;
            }
          // fall through
          case 204: break;
          case 64:
            { return ValaTypes.OUT;
            }
          // fall through
          case 205: break;
          case 65:
            { return ValaTypes.REF;
            }
          // fall through
          case 206: break;
          case 66:
            { return ValaTypes.TRY;
            }
          // fall through
          case 207: break;
          case 67:
            { return ValaTypes.VAR;
            }
          // fall through
          case 208: break;
          case 68:
            { return ValaTypes.BLOCK_COMMENT;
            }
          // fall through
          case 209: break;
          case 69:
            { return ValaTypes.BASE;
            }
          // fall through
          case 210: break;
          case 70:
            { return ValaTypes.BOOL;
            }
          // fall through
          case 211: break;
          case 71:
            { return ValaTypes.CASE;
            }
          // fall through
          case 212: break;
          case 72:
            { return ValaTypes.CHAR;
            }
          // fall through
          case 213: break;
          case 73:
            { return ValaTypes.ELSE;
            }
          // fall through
          case 214: break;
          case 74:
            { return ValaTypes.ENUM;
            }
          // fall through
          case 215: break;
          case 75:
            { return ValaTypes.INT8;
            }
          // fall through
          case 216: break;
          case 76:
            { return ValaTypes.LOCK;
            }
          // fall through
          case 217: break;
          case 77:
            { return ValaTypes.LONG;
            }
          // fall through
          case 218: break;
          case 78:
            { return ValaTypes.NULL;
            }
          // fall through
          case 219: break;
          case 79:
            { return ValaTypes.THIS;
            }
          // fall through
          case 220: break;
          case 80:
            { return ValaTypes.TRUE;
            }
          // fall through
          case 221: break;
          case 81:
            { return ValaTypes.UINT;
            }
          // fall through
          case 222: break;
          case 82:
            { return ValaTypes.VOID;
            }
          // fall through
          case 223: break;
          case 83:
            { return ValaTypes.WEAK;
            }
          // fall through
          case 224: break;
          case 84:
            { return ValaTypes.POUND_ELIF;
            }
          // fall through
          case 225: break;
          case 85:
            { return ValaTypes.POUND_ELSE;
            }
          // fall through
          case 226: break;
          case 86:
            { return ValaTypes.DOC_COMMENT;
            }
          // fall through
          case 227: break;
          case 87:
            { return ValaTypes.ASYNC;
            }
          // fall through
          case 228: break;
          case 88:
            { return ValaTypes.BREAK;
            }
          // fall through
          case 229: break;
          case 89:
            { return ValaTypes.CATCH;
            }
          // fall through
          case 230: break;
          case 90:
            { return ValaTypes.CLASS;
            }
          // fall through
          case 231: break;
          case 91:
            { return ValaTypes.CONST;
            }
          // fall through
          case 232: break;
          case 92:
            { return ValaTypes.FALSE;
            }
          // fall through
          case 233: break;
          case 93:
            { return ValaTypes.FLOAT;
            }
          // fall through
          case 234: break;
          case 94:
            { return ValaTypes.INT16;
            }
          // fall through
          case 235: break;
          case 95:
            { return ValaTypes.INT32;
            }
          // fall through
          case 236: break;
          case 96:
            { return ValaTypes.INT64;
            }
          // fall through
          case 237: break;
          case 97:
            { return ValaTypes.OWNED;
            }
          // fall through
          case 238: break;
          case 98:
            { return ValaTypes.SHORT;
            }
          // fall through
          case 239: break;
          case 99:
            { return ValaTypes.THROW;
            }
          // fall through
          case 240: break;
          case 100:
            { return ValaTypes.UCHAR;
            }
          // fall through
          case 241: break;
          case 101:
            { return ValaTypes.UINT8;
            }
          // fall through
          case 242: break;
          case 102:
            { return ValaTypes.ULONG;
            }
          // fall through
          case 243: break;
          case 103:
            { return ValaTypes.USING;
            }
          // fall through
          case 244: break;
          case 104:
            { return ValaTypes.WHILE;
            }
          // fall through
          case 245: break;
          case 105:
            { return ValaTypes.YIELD;
            }
          // fall through
          case 246: break;
          case 106:
            { return ValaTypes.POUND_ENDIF;
            }
          // fall through
          case 247: break;
          case 107:
            { return ValaTypes.DOUBLE;
            }
          // fall through
          case 248: break;
          case 108:
            { return ValaTypes.EXTERN;
            }
          // fall through
          case 249: break;
          case 109:
            { return ValaTypes.PUBLIC;
            }
          // fall through
          case 250: break;
          case 110:
            { return ValaTypes.RETURN;
            }
          // fall through
          case 251: break;
          case 111:
            { return ValaTypes.SIGNAL;
            }
          // fall through
          case 252: break;
          case 112:
            { return ValaTypes.SIZE_T;
            }
          // fall through
          case 253: break;
          case 113:
            { return ValaTypes.STATIC;
            }
          // fall through
          case 254: break;
          case 114:
            { return ValaTypes.STRING;
            }
          // fall through
          case 255: break;
          case 115:
            { return ValaTypes.STRUCT;
            }
          // fall through
          case 256: break;
          case 116:
            { return ValaTypes.SWITCH;
            }
          // fall through
          case 257: break;
          case 117:
            { return ValaTypes.THROWS;
            }
          // fall through
          case 258: break;
          case 118:
            { return ValaTypes.UINT16;
            }
          // fall through
          case 259: break;
          case 119:
            { return ValaTypes.UINT32;
            }
          // fall through
          case 260: break;
          case 120:
            { return ValaTypes.UINT64;
            }
          // fall through
          case 261: break;
          case 121:
            { return ValaTypes.USHORT;
            }
          // fall through
          case 262: break;
          case 122:
            { return ValaTypes.DEFAULT;
            }
          // fall through
          case 263: break;
          case 123:
            { return ValaTypes.ENSURES;
            }
          // fall through
          case 264: break;
          case 124:
            { return ValaTypes.FINALLY;
            }
          // fall through
          case 265: break;
          case 125:
            { return ValaTypes.FOREACH;
            }
          // fall through
          case 266: break;
          case 126:
            { return ValaTypes.PRIVATE;
            }
          // fall through
          case 267: break;
          case 127:
            { return ValaTypes.SSIZE_T;
            }
          // fall through
          case 268: break;
          case 128:
            { return ValaTypes.UNICHAR;
            }
          // fall through
          case 269: break;
          case 129:
            { return ValaTypes.UNOWNED;
            }
          // fall through
          case 270: break;
          case 130:
            { return ValaTypes.VIRTUAL;
            }
          // fall through
          case 271: break;
          case 131:
            { return ValaTypes.ABSTRACT;
            }
          // fall through
          case 272: break;
          case 132:
            { return ValaTypes.CONTINUE;
            }
          // fall through
          case 273: break;
          case 133:
            { return ValaTypes.DELEGATE;
            }
          // fall through
          case 274: break;
          case 134:
            { return ValaTypes.INTERNAL;
            }
          // fall through
          case 275: break;
          case 135:
            { return ValaTypes.OVERRIDE;
            }
          // fall through
          case 276: break;
          case 136:
            { return ValaTypes.REQUIRES;
            }
          // fall through
          case 277: break;
          case 137:
            { return ValaTypes.CONSTRUCT;
            }
          // fall through
          case 278: break;
          case 138:
            { return ValaTypes.INTERFACE;
            }
          // fall through
          case 279: break;
          case 139:
            { return ValaTypes.NAMESPACE;
            }
          // fall through
          case 280: break;
          case 140:
            { return ValaTypes.PROTECTED;
            }
          // fall through
          case 281: break;
          case 141:
            { return ValaTypes.ERRORDOMAIN;
            }
          // fall through
          case 282: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
